# C89/C90 Grammar Definition - Simplified LL(1) Compatible
# Based on ANSI C (ISO/IEC 9899:1990)

# Start symbol
START: translation_unit

# Translation unit
translation_unit:
    external_declaration
    | external_declaration translation_unit
    ;

external_declaration:
    function_definition
    | declaration
    ;

# Function definitions
function_definition:
    declaration_specifiers declarator compound_statement
    | declarator compound_statement
    ;

# Declarations
declaration:
    declaration_specifiers ';'
    | declaration_specifiers init_declarator_list ';'
    ;

declaration_specifiers:
    declaration_specifier declaration_specifiers_list
    ;

declaration_specifier:
    storage_class_specifier
    | type_specifier
    | type_qualifier
    ;

declaration_specifiers_list:
    declaration_specifier declaration_specifiers_list
    | /* empty */
    ;

init_declarator_list:
    init_declarator
    | init_declarator ',' init_declarator_list
    ;

init_declarator:
    declarator
    | declarator '=' initializer
    ;

# Storage class specifiers
storage_class_specifier:
    'typedef'
    | 'extern'
    | 'static'
    | 'auto'
    | 'register'
    ;

# Type specifiers
type_specifier:
    'void'
    | 'char'
    | 'short'
    | 'int'
    | 'long'
    | 'float'
    | 'double'
    | 'signed'
    | 'unsigned'
    | struct_or_union_specifier
    | enum_specifier
    | typedef_name
    ;

struct_or_union_specifier:
    struct_or_union struct_or_union_body
    ;

struct_or_union_body:
    IDENTIFIER '{' struct_declaration_list '}'
    | '{' struct_declaration_list '}'
    | IDENTIFIER
    ;

struct_or_union:
    'struct'
    | 'union'
    ;

struct_declaration_list:
    struct_declaration
    | struct_declaration struct_declaration_list
    ;

struct_declaration:
    specifier_qualifier_list struct_declarator_list ';'
    ;

specifier_qualifier_list:
    specifier_qualifier specifier_qualifier_list_tail
    ;

specifier_qualifier:
    type_specifier
    | type_qualifier
    ;

specifier_qualifier_list_tail:
    specifier_qualifier specifier_qualifier_list_tail
    | /* empty */
    ;

struct_declarator_list:
    struct_declarator
    | struct_declarator ',' struct_declarator_list
    ;

struct_declarator:
    declarator
    | ':' constant_expression
    | declarator ':' constant_expression
    ;

enum_specifier:
    'enum' enum_body
    ;

enum_body:
    '{' enumerator_list '}'
    | IDENTIFIER '{' enumerator_list '}'
    | IDENTIFIER
    ;

enumerator_list:
    enumerator
    | enumerator ',' enumerator_list
    ;

enumerator:
    IDENTIFIER
    | IDENTIFIER '=' constant_expression
    ;

# Type qualifiers
type_qualifier:
    'const'
    | 'volatile'
    ;

# Declarators
declarator:
    pointer direct_declarator
    | direct_declarator
    ;

direct_declarator:
    IDENTIFIER direct_declarator_suffix
    | '(' declarator ')' direct_declarator_suffix
    ;

direct_declarator_suffix:
    '[' constant_expression ']' direct_declarator_suffix
    | '[' ']' direct_declarator_suffix
    | '(' parameter_list_opt ')' direct_declarator_suffix
    | /* empty */
    ;

parameter_list_opt:
    parameter_or_identifier_list
    | /* empty */
    ;

parameter_or_identifier_list:
    parameter_declaration parameter_list_continuation
    | IDENTIFIER identifier_list_continuation
    ;

parameter_list_continuation:
    ',' parameter_declaration parameter_list_continuation
    | ',' '...'
    | /* empty */
    ;

identifier_list_continuation:
    ',' IDENTIFIER identifier_list_continuation
    | /* empty */
    ;

pointer:
    '*'
    | '*' type_qualifier_list
    | '*' pointer
    | '*' type_qualifier_list pointer
    ;

type_qualifier_list:
    type_qualifier
    | type_qualifier type_qualifier_list
    ;

parameter_type_list:
    parameter_list
    | parameter_list ',' '...'
    ;

parameter_list:
    parameter_declaration
    | parameter_declaration ',' parameter_list
    ;

parameter_declaration:
    declaration_specifiers parameter_declarator_opt
    ;

parameter_declarator_opt:
    declarator
    | /* empty */
    ;

identifier_list:
    IDENTIFIER
    | IDENTIFIER ',' identifier_list
    ;

type_name:
    specifier_qualifier_list
    | specifier_qualifier_list declarator
    ;

# Removed abstract_declarator to simplify LL(1) conflicts

typedef_name:
    IDENTIFIER
    ;

initializer:
    assignment_expression
    | '{' initializer_list '}'
    | '{' initializer_list ',' '}'
    ;

initializer_list:
    initializer
    | initializer ',' initializer_list
    ;

# Statements
statement:
    labeled_statement
    | compound_statement
    | expression_statement
    | selection_statement
    | iteration_statement
    | jump_statement
    ;

labeled_statement:
    IDENTIFIER ':' statement
    | 'case' constant_expression ':' statement
    | 'default' ':' statement
    ;

compound_statement:
    '{' '}'
    | '{' statement_list '}'
    | '{' declaration_list '}'
    | '{' declaration_list statement_list '}'
    ;

declaration_list:
    declaration
    | declaration declaration_list
    ;

statement_list:
    statement
    | statement statement_list
    ;

expression_statement:
    ';'
    | expression ';'
    ;

selection_statement:
    'if' '(' expression ')' statement
    | 'if' '(' expression ')' statement 'else' statement
    | 'switch' '(' expression ')' statement
    ;

iteration_statement:
    'while' '(' expression ')' statement
    | 'do' statement 'while' '(' expression ')' ';'
    | 'for' '(' expression_statement expression_statement ')' statement
    | 'for' '(' expression_statement expression_statement expression ')' statement
    ;

jump_statement:
    'goto' IDENTIFIER ';'
    | 'continue' ';'
    | 'break' ';'
    | 'return' ';'
    | 'return' expression ';'
    ;

# Expressions
expression:
    assignment_expression
    | assignment_expression ',' expression
    ;

assignment_expression:
    conditional_expression assignment_expression_suffix
    ;

assignment_expression_suffix:
    assignment_operator assignment_expression
    | /* empty */
    ;

assignment_operator:
    '='
    | '*='
    | '/='
    | '%='
    | '+='
    | '-='
    | '<<='
    | '>>='
    | '&='
    | '^='
    | '|='
    ;

conditional_expression:
    logical_or_expression
    | logical_or_expression '?' expression ':' conditional_expression
    ;

constant_expression:
    conditional_expression
    ;

logical_or_expression:
    logical_and_expression
    | logical_and_expression '||' logical_or_expression
    ;

logical_and_expression:
    inclusive_or_expression
    | inclusive_or_expression '&&' logical_and_expression
    ;

inclusive_or_expression:
    exclusive_or_expression
    | exclusive_or_expression '|' inclusive_or_expression
    ;

exclusive_or_expression:
    and_expression
    | and_expression '^' exclusive_or_expression
    ;

and_expression:
    equality_expression
    | equality_expression '&' and_expression
    ;

equality_expression:
    relational_expression
    | relational_expression '==' equality_expression
    | relational_expression '!=' equality_expression
    ;

relational_expression:
    shift_expression
    | shift_expression '<' relational_expression
    | shift_expression '>' relational_expression
    | shift_expression '<=' relational_expression
    | shift_expression '>=' relational_expression
    ;

shift_expression:
    additive_expression
    | additive_expression '<<' shift_expression
    | additive_expression '>>' shift_expression
    ;

additive_expression:
    multiplicative_expression
    | multiplicative_expression '+' additive_expression
    | multiplicative_expression '-' additive_expression
    ;

multiplicative_expression:
    cast_expression
    | cast_expression '*' multiplicative_expression
    | cast_expression '/' multiplicative_expression
    | cast_expression '%' multiplicative_expression
    ;

cast_expression:
    unary_expression cast_expression_suffix
    ;

cast_expression_suffix:
    /* empty */
    ;

unary_expression:
    postfix_expression
    | '++' unary_expression
    | '--' unary_expression
    | unary_operator cast_expression
    | 'sizeof' unary_expression
    | 'sizeof' '(' type_name ')'
    ;

unary_operator:
    '&'
    | '*'
    | '+'
    | '-'
    | '~'
    | '!'
    ;

postfix_expression:
    primary_expression postfix_expression_suffix
    ;

postfix_expression_suffix:
    '[' expression ']' postfix_expression_suffix
    | '(' ')' postfix_expression_suffix
    | '(' argument_expression_list ')' postfix_expression_suffix
    | '.' IDENTIFIER postfix_expression_suffix
    | '->' IDENTIFIER postfix_expression_suffix
    | '++' postfix_expression_suffix
    | '--' postfix_expression_suffix
    | /* empty */
    ;

primary_expression:
    IDENTIFIER
    | CONSTANT
    | STRING_LITERAL
    | '(' expression ')'
    ;

argument_expression_list:
    assignment_expression
    | assignment_expression ',' argument_expression_list
    ;

# Terminals (tokens)
IDENTIFIER: [a-zA-Z_][a-zA-Z0-9_]*
CONSTANT: [0-9]+
STRING_LITERAL: "[^"]*"