
╔══════════════════════════════════════════════════════════════╗
║ Processando: test_cases/advanced/performance/valid/large_file.c║
╚══════════════════════════════════════════════════════════════╝
[2025-09-12 17:56:47.416] [WARNING] Possível macro não expandida na linha 1: MAX
[2025-09-12 17:56:47.417] [WARNING] Possível macro não expandida na linha 1: MIN
[2025-09-12 17:56:47.418] [WARNING] Possível macro não expandida na linha 1: CLAMP
[2025-09-12 17:56:47.423] [WARNING] Possível macro não expandida na linha 269: MAX
[2025-09-12 17:56:47.423] [WARNING] Possível macro não expandida na linha 270: MIN
[2025-09-12 17:56:47.423] [WARNING] Possível macro não expandida na linha 271: CLAMP
 CÓDIGO PROCESSADO PELO PREPROCESSOR:
========================================
/*
 * Arquivo de teste de performance para lexer e preprocessor
 * Contém uma grande quantidade de código C válido para testar desempenho
 */












// Macros simples para teste de preprocessor






// Estruturas complexas
struct Point2D {
    double x, y;
};

struct Point3D {
    double x, y, z;
};

struct Matrix4x4 {
    double m[4][4];
};

struct ComplexStruct {
    int id;
    char name[256];
    struct Point3D position;
    struct Point3D velocity;
    struct Matrix4x4 transform;
    bool active;
    uint64_t timestamp;
    float data[100];
};

// Enums extensos
enum ErrorCodes {
    ERROR_NONE = 0,
    ERROR_INVALID_INPUT = 1,
    ERROR_OUT_OF_MEMORY = 2,
    ERROR_FILE_NOT_FOUND = 3,
    ERROR_PERMISSION_DENIED = 4,
    ERROR_NETWORK_TIMEOUT = 5,
    ERROR_INVALID_FORMAT = 6,
    ERROR_BUFFER_OVERFLOW = 7,
    ERROR_DIVISION_BY_ZERO = 8,
    ERROR_NULL_POINTER = 9,
    ERROR_INDEX_OUT_OF_BOUNDS = 10,
    ERROR_INVALID_STATE = 11,
    ERROR_RESOURCE_BUSY = 12,
    ERROR_OPERATION_FAILED = 13,
    ERROR_TIMEOUT = 14,
    ERROR_CANCELLED = 15,
    ERROR_NOT_IMPLEMENTED = 16,
    ERROR_DEPRECATED = 17,
    ERROR_VERSION_MISMATCH = 18,
    ERROR_CHECKSUM_FAILED = 19,
    ERROR_UNKNOWN = 999
};

// Funções com muitos parâmetros
int complex_function_1(int a, int b, int c, int d, int e, int f, int g, int h, int i, int j) {
    int result = a + b + c + d + e + f + g + h + i + j;
    return result;
}

double complex_function_2(double x1, double y1, double z1, double x2, double y2, double z2,
                         double x3, double y3, double z3, double x4, double y4, double z4) {
    return sqrt((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2) + (z1-z2)*(z1-z2)) +
           sqrt((x2-x3)*(x2-x3) + (y2-y3)*(y2-y3) + (z2-z3)*(z2-z3)) +
           sqrt((x3-x4)*(x3-x4) + (y3-y4)*(y3-y4) + (z3-z4)*(z3-z4));
}

// Arrays grandes
static int large_array_1[1000] = {
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
    21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
    41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
    61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
     82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100
};

static double large_array_2[500] = {
    3.14159, 2.71828, 1.41421, 1.73205, 2.23607, 1.61803, 2.44949, 2.64575, 1.32472, 3.31662,
    2.44949, 1.73205, 2.23607, 3.14159, 2.71828, 1.41421, 1.61803, 2.64575, 1.32472, 3.31662,
    1.41421, 3.14159, 2.71828, 1.73205, 2.23607, 1.61803, 2.44949, 2.64575, 1.32472, 3.31662,
    2.71828, 1.41421, 3.14159, 1.73205, 2.23607, 1.61803, 2.44949, 2.64575, 1.32472, 3.31662,
    1.73205, 2.23607, 1.61803, 3.14159, 2.71828, 1.41421, 2.44949, 2.64575, 1.32472, 3.31662
};

// Strings longas
static const char *long_strings[] = {
    "This is a very long string that contains a lot of text to test the lexer's ability to handle large string literals efficiently and correctly without any performance degradation or memory issues that might occur during the tokenization process of very long string constants in C source code files.",
    "Another extremely long string with different content to ensure that the lexer can handle multiple long strings in the same source file without any problems or performance issues that might arise from processing large amounts of string data during the lexical analysis phase of compilation.",
    "Yet another long string with even more content to thoroughly test the lexer's string handling capabilities and ensure that it can process large amounts of string data efficiently and correctly without any memory leaks or performance bottlenecks that might occur during tokenization.",
    "A fourth long string to continue testing the lexer's ability to handle multiple long string literals in a single source file and ensure that the performance remains consistent even when processing large amounts of string data during the lexical analysis phase.",
    "The fifth and final long string in this array to complete the testing of the lexer's string handling capabilities and ensure that it can efficiently process large amounts of string data without any issues or performance degradation during the tokenization process."
};

// Declarações de funções de biblioteca (já que includes são ignorados)
long time(long *tloc);
double sin(double x);
double sqrt(double x);
double pow(double x, double y);
double log(double x);
double fabs(double x);
size_t strlen(const char *s);

// Declarações de funções
int partition(int arr[], int low, int high);

// Funções com loops complexos
void matrix_multiply(double a[4][4], double b[4][4], double result[4][4]) {
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            result[i][j] = 0.0;
            for (int k = 0; k < 4; k++) {
                result[i][j] += a[i][k] * b[k][j];
            }
        }
    }
}

void bubble_sort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

void quick_sort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quick_sort(arr, low, pi - 1);
        quick_sort(arr, pi + 1, high);
    }
}

int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = (low - 1);
    
    for (int j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
            i++;
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
    
    int temp = arr[i + 1];
    arr[i + 1] = arr[high];
    arr[high] = temp;
    
    return (i + 1);
}

// Função principal com muito código
int main(void) {
    printf("Starting performance test...\n");
    
    // Teste de arrays grandes
    int sum = 0;
    for (int i = 0; i < 1000; i++) {
        sum += large_array_1[i];
    }
    printf("Sum of large_array_1: %d\n", sum);
    
    double double_sum = 0.0;
    for (int i = 0; i < 500; i++) {
        double_sum += large_array_2[i];
    }
    printf("Sum of large_array_2: %f\n", double_sum);
    
    // Teste de estruturas complexas
    struct ComplexStruct objects[100];
    for (int i = 0; i < 100; i++) {
        objects[i].id = i;
        sprintf(objects[i].name, "Object_%d", i);
        objects[i].position.x = i * 1.0;
        objects[i].position.y = i * 2.0;
        objects[i].position.z = i * 3.0;
        objects[i].velocity.x = i * 0.1;
        objects[i].velocity.y = i * 0.2;
        objects[i].velocity.z = i * 0.3;
        objects[i].active = (i % 2 == 0);
        objects[i].timestamp = time(NULL) + i;
        
        for (int j = 0; j < 100; j++) {
            objects[i].data[j] = sin(i * j * 0.01);
        }
        
        // Inicializar matriz identidade
        for (int row = 0; row < 4; row++) {
            for (int col = 0; col < 4; col++) {
                objects[i].transform.m[row][col] = (row == col) ? 1.0 : 0.0;
            }
        }
    }
    
    // Teste de funções complexas
    int result1 = complex_function_1(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
    printf("Complex function 1 result: %d\n", result1);
    
    double result2 = complex_function_2(1.0, 2.0, 3.0, 4.0, 5.0, 6.0,
                                       7.0, 8.0, 9.0, 10.0, 11.0, 12.0);
    printf("Complex function 2 result: %f\n", result2);
    
    // Teste de multiplicação de matrizes
    double matrix_a[4][4] = {
        {1.0, 2.0, 3.0, 4.0},
        {5.0, 6.0, 7.0, 8.0},
        {9.0, 10.0, 11.0, 12.0},
        {13.0, 14.0, 15.0, 16.0}
    };
    
    double matrix_b[4][4] = {
        {16.0, 15.0, 14.0, 13.0},
        {12.0, 11.0, 10.0, 9.0},
        {8.0, 7.0, 6.0, 5.0},
        {4.0, 3.0, 2.0, 1.0}
    };
    
    double matrix_result[4][4];
    matrix_multiply(matrix_a, matrix_b, matrix_result);
    
    printf("Matrix multiplication result:\n");
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            printf("%8.2f ", matrix_result[i][j]);
        }
        printf("\n");
    }
    
    // Teste de ordenação
    int test_array[1000];
    for (int i = 0; i < 1000; i++) {
        test_array[i] = 1000 - i;
    }
    
    bubble_sort(test_array, 1000);
    printf("Array sorted successfully\n");
    
    // Teste de strings longas
    for (int i = 0; i < 5; i++) {
        printf("String %d length: %zu\n", i, strlen(long_strings[i]));
    }
    
    // Teste de macros complexas
    int a = 10, b = 20, c = 15;
    printf("MAX(%d, %d) = %d\n", a, b, ((a) > (b) ? (a) : (b)));
    printf("MIN(%d, %d) = %d\n", a, b, ((a) < (b) ? (a) : (b)));
    printf("CLAMP(%d, %d, %d) = %d\n", c, a, b, (((((c) > (a) ? (c) : (a))) < (b) ? (((c) > (a) ? (c) : (a))) : (b))));
    
    // Teste de cálculos matemáticos intensivos
    double math_result = 0.0;
    for (int i = 1; i <= 1000; i++) {
        math_result += sin(i * 0.01) * cos(i * 0.02) * tan(i * 0.005);
        math_result += sqrt(i) * log(i) * exp(i * 0.001);
        math_result += pow(i, 0.5) * fabs(sin(i));
    }
    printf("Math result: %f\n", math_result);
    
    // Teste de operações bit a bit
    uint64_t bit_result = 0;
    for (int i = 0; i < 64; i++) {
        bit_result |= (1ULL << i);
        bit_result ^= (0xAAAAAAAAAAAAAAAAULL >> i);
        bit_result &= (0x5555555555555555ULL << (i % 32));
    }
    printf("Bit operations result: %llu\n", bit_result);
    
    printf("Performance test completed successfully!\n");
    return 0;
}

// Funções adicionais para completar o arquivo
void additional_function_1(void) {
    // Função adicional 1
    for (int i = 0; i < 100; i++) {
        printf("Additional function 1: %d\n", i);
    }
}

void additional_function_2(void) {
    // Função adicional 2
    double values[50];
    for (int i = 0; i < 50; i++) {
        values[i] = sin(i * 0.1) + cos(i * 0.2);
    }
}

void additional_function_3(void) {
    // Função adicional 3
    struct Point3D points[25];
    for (int i = 0; i < 25; i++) {
        points[i].x = i * 1.5;
        points[i].y = i * 2.5;
        points[i].z = i * 3.5;
    }
}

// Macros removidas para evitar problemas no parser

// Estruturas aninhadas simplificadas
struct DeepStruct {
    char deep_char;
    float deep_float;
};

struct MiddleStruct {
    int inner_a;
    double inner_b;
    struct DeepStruct deep_struct;
};

union TestUnion {
    int union_int;
    float union_float;
    char union_array[16];
};

struct NestedStruct {
    struct MiddleStruct middle_struct;
    union TestUnion test_union;
};

// Função final para completar o arquivo
void final_test_function(void) {
    struct NestedStruct nested;
    nested.middle_struct.inner_a = 42;
    nested.middle_struct.inner_b = 3.14159;
    nested.middle_struct.deep_struct.deep_char = 'A';
    nested.middle_struct.deep_struct.deep_float = 2.71828f;
    nested.test_union.union_int = 12345;
    
    printf("Nested structure test completed\n");
}

========================================
[2025-09-12 17:56:47.426] [INFO] Starting complete tokenization of file
[2025-09-12 17:56:47.432] [INFO] Tokenization completed. Total tokens: 2367

📊 ANÁLISE LÉXICA SEQUENCIAL
==================================================
   1. STRUCT               │ 'struct' │ L25:C1 │ Palavras-chave
2   . IDENTIFIER           │ 'Point2D' │ L25:C8 │ Identificadores
3   . LEFT_BRACE           │ '{' │ L25:C16 │ Delimitadores
4   . DOUBLE               │ 'double' │ L26:C5 │ Palavras-chave
5   . IDENTIFIER           │ 'x' │ L26:C12 │ Identificadores
6   . COMMA                │ ',' │ L26:C13 │ Operadores
7   . IDENTIFIER           │ 'y' │ L26:C15 │ Identificadores
8   . SEMICOLON            │ ';' │ L26:C16 │ Pontuação
9   . RIGHT_BRACE          │ '}' │ L27:C1 │ Delimitadores
10  . SEMICOLON            │ ';' │ L27:C2 │ Pontuação
11  . STRUCT               │ 'struct' │ L29:C1 │ Palavras-chave
12  . IDENTIFIER           │ 'Point3D' │ L29:C8 │ Identificadores
13  . LEFT_BRACE           │ '{' │ L29:C16 │ Delimitadores
14  . DOUBLE               │ 'double' │ L30:C5 │ Palavras-chave
15  . IDENTIFIER           │ 'x' │ L30:C12 │ Identificadores
16  . COMMA                │ ',' │ L30:C13 │ Operadores
17  . IDENTIFIER           │ 'y' │ L30:C15 │ Identificadores
18  . COMMA                │ ',' │ L30:C16 │ Operadores
19  . IDENTIFIER           │ 'z' │ L30:C18 │ Identificadores
20  . SEMICOLON            │ ';' │ L30:C19 │ Pontuação
21  . RIGHT_BRACE          │ '}' │ L31:C1 │ Delimitadores
22  . SEMICOLON            │ ';' │ L31:C2 │ Pontuação
23  . STRUCT               │ 'struct' │ L33:C1 │ Palavras-chave
24  . IDENTIFIER           │ 'Matrix4x4' │ L33:C8 │ Identificadores
25  . LEFT_BRACE           │ '{' │ L33:C18 │ Delimitadores
26  . DOUBLE               │ 'double' │ L34:C5 │ Palavras-chave
27  . IDENTIFIER           │ 'm' │ L34:C12 │ Identificadores
28  . LEFT_BRACKET         │ '[' │ L34:C13 │ Delimitadores
29  . INTEGER_LITERAL      │ '4' │ L34:C14 │ Literais
30  . RIGHT_BRACKET        │ ']' │ L34:C15 │ Delimitadores
31  . LEFT_BRACKET         │ '[' │ L34:C16 │ Delimitadores
32  . INTEGER_LITERAL      │ '4' │ L34:C17 │ Literais
33  . RIGHT_BRACKET        │ ']' │ L34:C18 │ Delimitadores
34  . SEMICOLON            │ ';' │ L34:C19 │ Pontuação
35  . RIGHT_BRACE          │ '}' │ L35:C1 │ Delimitadores
36  . SEMICOLON            │ ';' │ L35:C2 │ Pontuação
37  . STRUCT               │ 'struct' │ L37:C1 │ Palavras-chave
38  . IDENTIFIER           │ 'ComplexStruct' │ L37:C8 │ Identificadores
39  . LEFT_BRACE           │ '{' │ L37:C22 │ Delimitadores
40  . INT                  │ 'int' │ L38:C5 │ Palavras-chave
41  . IDENTIFIER           │ 'id' │ L38:C9 │ Identificadores
42  . SEMICOLON            │ ';' │ L38:C11 │ Pontuação
43  . CHAR                 │ 'char' │ L39:C5 │ Palavras-chave
44  . IDENTIFIER           │ 'name' │ L39:C10 │ Identificadores
45  . LEFT_BRACKET         │ '[' │ L39:C14 │ Delimitadores
46  . INTEGER_LITERAL      │ '256' │ L39:C15 │ Literais
47  . RIGHT_BRACKET        │ ']' │ L39:C18 │ Delimitadores
48  . SEMICOLON            │ ';' │ L39:C19 │ Pontuação
49  . STRUCT               │ 'struct' │ L40:C5 │ Palavras-chave
50  . IDENTIFIER           │ 'Point3D' │ L40:C12 │ Identificadores
51  . IDENTIFIER           │ 'position' │ L40:C20 │ Identificadores
52  . SEMICOLON            │ ';' │ L40:C28 │ Pontuação
53  . STRUCT               │ 'struct' │ L41:C5 │ Palavras-chave
54  . IDENTIFIER           │ 'Point3D' │ L41:C12 │ Identificadores
55  . IDENTIFIER           │ 'velocity' │ L41:C20 │ Identificadores
56  . SEMICOLON            │ ';' │ L41:C28 │ Pontuação
57  . STRUCT               │ 'struct' │ L42:C5 │ Palavras-chave
58  . IDENTIFIER           │ 'Matrix4x4' │ L42:C12 │ Identificadores
59  . IDENTIFIER           │ 'transform' │ L42:C22 │ Identificadores
60  . SEMICOLON            │ ';' │ L42:C31 │ Pontuação
61  . IDENTIFIER           │ 'bool' │ L43:C5 │ Identificadores
62  . IDENTIFIER           │ 'active' │ L43:C10 │ Identificadores
63  . SEMICOLON            │ ';' │ L43:C16 │ Pontuação
64  . IDENTIFIER           │ 'uint64_t' │ L44:C5 │ Identificadores
65  . IDENTIFIER           │ 'timestamp' │ L44:C14 │ Identificadores
66  . SEMICOLON            │ ';' │ L44:C23 │ Pontuação
67  . FLOAT                │ 'float' │ L45:C5 │ Palavras-chave
68  . IDENTIFIER           │ 'data' │ L45:C11 │ Identificadores
69  . LEFT_BRACKET         │ '[' │ L45:C15 │ Delimitadores
70  . INTEGER_LITERAL      │ '100' │ L45:C16 │ Literais
71  . RIGHT_BRACKET        │ ']' │ L45:C19 │ Delimitadores
72  . SEMICOLON            │ ';' │ L45:C20 │ Pontuação
73  . RIGHT_BRACE          │ '}' │ L46:C1 │ Delimitadores
74  . SEMICOLON            │ ';' │ L46:C2 │ Pontuação
75  . ENUM                 │ 'enum' │ L49:C1 │ Palavras-chave
76  . IDENTIFIER           │ 'ErrorCodes' │ L49:C6 │ Identificadores
77  . LEFT_BRACE           │ '{' │ L49:C17 │ Delimitadores
78  . IDENTIFIER           │ 'ERROR_NONE' │ L50:C5 │ Identificadores
79  . ASSIGN               │ '=' │ L50:C16 │ Operadores
80  . INTEGER_LITERAL      │ '0' │ L50:C18 │ Literais
81  . COMMA                │ ',' │ L50:C19 │ Operadores
82  . IDENTIFIER           │ 'ERROR_INVALID_INPUT' │ L51:C5 │ Identificadores
83  . ASSIGN               │ '=' │ L51:C25 │ Operadores
84  . INTEGER_LITERAL      │ '1' │ L51:C27 │ Literais
85  . COMMA                │ ',' │ L51:C28 │ Operadores
86  . IDENTIFIER           │ 'ERROR_OUT_OF_MEMORY' │ L52:C5 │ Identificadores
87  . ASSIGN               │ '=' │ L52:C25 │ Operadores
88  . INTEGER_LITERAL      │ '2' │ L52:C27 │ Literais
89  . COMMA                │ ',' │ L52:C28 │ Operadores
90  . IDENTIFIER           │ 'ERROR_FILE_NOT_FOUND' │ L53:C5 │ Identificadores
91  . ASSIGN               │ '=' │ L53:C26 │ Operadores
92  . INTEGER_LITERAL      │ '3' │ L53:C28 │ Literais
93  . COMMA                │ ',' │ L53:C29 │ Operadores
94  . IDENTIFIER           │ 'ERROR_PERMISSION_DENIED' │ L54:C5 │ Identificadores
95  . ASSIGN               │ '=' │ L54:C29 │ Operadores
96  . INTEGER_LITERAL      │ '4' │ L54:C31 │ Literais
97  . COMMA                │ ',' │ L54:C32 │ Operadores
98  . IDENTIFIER           │ 'ERROR_NETWORK_TIMEOUT' │ L55:C5 │ Identificadores
99  . ASSIGN               │ '=' │ L55:C27 │ Operadores
100 . INTEGER_LITERAL      │ '5' │ L55:C29 │ Literais
101 . COMMA                │ ',' │ L55:C30 │ Operadores
102 . IDENTIFIER           │ 'ERROR_INVALID_FORMAT' │ L56:C5 │ Identificadores
103 . ASSIGN               │ '=' │ L56:C26 │ Operadores
104 . INTEGER_LITERAL      │ '6' │ L56:C28 │ Literais
105 . COMMA                │ ',' │ L56:C29 │ Operadores
106 . IDENTIFIER           │ 'ERROR_BUFFER_OVERFLOW' │ L57:C5 │ Identificadores
107 . ASSIGN               │ '=' │ L57:C27 │ Operadores
108 . INTEGER_LITERAL      │ '7' │ L57:C29 │ Literais
109 . COMMA                │ ',' │ L57:C30 │ Operadores
110 . IDENTIFIER           │ 'ERROR_DIVISION_BY_ZERO' │ L58:C5 │ Identificadores
111 . ASSIGN               │ '=' │ L58:C28 │ Operadores
112 . INTEGER_LITERAL      │ '8' │ L58:C30 │ Literais
113 . COMMA                │ ',' │ L58:C31 │ Operadores
114 . IDENTIFIER           │ 'ERROR_NULL_POINTER' │ L59:C5 │ Identificadores
115 . ASSIGN               │ '=' │ L59:C24 │ Operadores
116 . INTEGER_LITERAL      │ '9' │ L59:C26 │ Literais
117 . COMMA                │ ',' │ L59:C27 │ Operadores
118 . IDENTIFIER           │ 'ERROR_INDEX_OUT_OF_BOUNDS' │ L60:C5 │ Identificadores
119 . ASSIGN               │ '=' │ L60:C31 │ Operadores
120 . INTEGER_LITERAL      │ '10' │ L60:C33 │ Literais
121 . COMMA                │ ',' │ L60:C35 │ Operadores
122 . IDENTIFIER           │ 'ERROR_INVALID_STATE' │ L61:C5 │ Identificadores
123 . ASSIGN               │ '=' │ L61:C25 │ Operadores
124 . INTEGER_LITERAL      │ '11' │ L61:C27 │ Literais
125 . COMMA                │ ',' │ L61:C29 │ Operadores
126 . IDENTIFIER           │ 'ERROR_RESOURCE_BUSY' │ L62:C5 │ Identificadores
127 . ASSIGN               │ '=' │ L62:C25 │ Operadores
128 . INTEGER_LITERAL      │ '12' │ L62:C27 │ Literais
129 . COMMA                │ ',' │ L62:C29 │ Operadores
130 . IDENTIFIER           │ 'ERROR_OPERATION_FAILED' │ L63:C5 │ Identificadores
131 . ASSIGN               │ '=' │ L63:C28 │ Operadores
132 . INTEGER_LITERAL      │ '13' │ L63:C30 │ Literais
133 . COMMA                │ ',' │ L63:C32 │ Operadores
134 . IDENTIFIER           │ 'ERROR_TIMEOUT' │ L64:C5 │ Identificadores
135 . ASSIGN               │ '=' │ L64:C19 │ Operadores
136 . INTEGER_LITERAL      │ '14' │ L64:C21 │ Literais
137 . COMMA                │ ',' │ L64:C23 │ Operadores
138 . IDENTIFIER           │ 'ERROR_CANCELLED' │ L65:C5 │ Identificadores
139 . ASSIGN               │ '=' │ L65:C21 │ Operadores
140 . INTEGER_LITERAL      │ '15' │ L65:C23 │ Literais
141 . COMMA                │ ',' │ L65:C25 │ Operadores
142 . IDENTIFIER           │ 'ERROR_NOT_IMPLEMENTED' │ L66:C5 │ Identificadores
143 . ASSIGN               │ '=' │ L66:C27 │ Operadores
144 . INTEGER_LITERAL      │ '16' │ L66:C29 │ Literais
145 . COMMA                │ ',' │ L66:C31 │ Operadores
146 . IDENTIFIER           │ 'ERROR_DEPRECATED' │ L67:C5 │ Identificadores
147 . ASSIGN               │ '=' │ L67:C22 │ Operadores
148 . INTEGER_LITERAL      │ '17' │ L67:C24 │ Literais
149 . COMMA                │ ',' │ L67:C26 │ Operadores
150 . IDENTIFIER           │ 'ERROR_VERSION_MISMATCH' │ L68:C5 │ Identificadores
151 . ASSIGN               │ '=' │ L68:C28 │ Operadores
152 . INTEGER_LITERAL      │ '18' │ L68:C30 │ Literais
153 . COMMA                │ ',' │ L68:C32 │ Operadores
154 . IDENTIFIER           │ 'ERROR_CHECKSUM_FAILED' │ L69:C5 │ Identificadores
155 . ASSIGN               │ '=' │ L69:C27 │ Operadores
156 . INTEGER_LITERAL      │ '19' │ L69:C29 │ Literais
157 . COMMA                │ ',' │ L69:C31 │ Operadores
158 . IDENTIFIER           │ 'ERROR_UNKNOWN' │ L70:C5 │ Identificadores
159 . ASSIGN               │ '=' │ L70:C19 │ Operadores
160 . INTEGER_LITERAL      │ '999' │ L70:C21 │ Literais
161 . RIGHT_BRACE          │ '}' │ L71:C1 │ Delimitadores
162 . SEMICOLON            │ ';' │ L71:C2 │ Pontuação
163 . INT                  │ 'int' │ L74:C1 │ Palavras-chave
164 . IDENTIFIER           │ 'complex_function_1' │ L74:C5 │ Identificadores
165 . LEFT_PAREN           │ '(' │ L74:C23 │ Delimitadores
166 . INT                  │ 'int' │ L74:C24 │ Palavras-chave
167 . IDENTIFIER           │ 'a' │ L74:C28 │ Identificadores
168 . COMMA                │ ',' │ L74:C29 │ Operadores
169 . INT                  │ 'int' │ L74:C31 │ Palavras-chave
170 . IDENTIFIER           │ 'b' │ L74:C35 │ Identificadores
171 . COMMA                │ ',' │ L74:C36 │ Operadores
172 . INT                  │ 'int' │ L74:C38 │ Palavras-chave
173 . IDENTIFIER           │ 'c' │ L74:C42 │ Identificadores
174 . COMMA                │ ',' │ L74:C43 │ Operadores
175 . INT                  │ 'int' │ L74:C45 │ Palavras-chave
176 . IDENTIFIER           │ 'd' │ L74:C49 │ Identificadores
177 . COMMA                │ ',' │ L74:C50 │ Operadores
178 . INT                  │ 'int' │ L74:C52 │ Palavras-chave
179 . IDENTIFIER           │ 'e' │ L74:C56 │ Identificadores
180 . COMMA                │ ',' │ L74:C57 │ Operadores
181 . INT                  │ 'int' │ L74:C59 │ Palavras-chave
182 . IDENTIFIER           │ 'f' │ L74:C63 │ Identificadores
183 . COMMA                │ ',' │ L74:C64 │ Operadores
184 . INT                  │ 'int' │ L74:C66 │ Palavras-chave
185 . IDENTIFIER           │ 'g' │ L74:C70 │ Identificadores
186 . COMMA                │ ',' │ L74:C71 │ Operadores
187 . INT                  │ 'int' │ L74:C73 │ Palavras-chave
188 . IDENTIFIER           │ 'h' │ L74:C77 │ Identificadores
189 . COMMA                │ ',' │ L74:C78 │ Operadores
190 . INT                  │ 'int' │ L74:C80 │ Palavras-chave
191 . IDENTIFIER           │ 'i' │ L74:C84 │ Identificadores
192 . COMMA                │ ',' │ L74:C85 │ Operadores
193 . INT                  │ 'int' │ L74:C87 │ Palavras-chave
194 . IDENTIFIER           │ 'j' │ L74:C91 │ Identificadores
195 . RIGHT_PAREN          │ ')' │ L74:C92 │ Delimitadores
196 . LEFT_BRACE           │ '{' │ L74:C94 │ Delimitadores
197 . INT                  │ 'int' │ L75:C5 │ Palavras-chave
198 . IDENTIFIER           │ 'result' │ L75:C9 │ Identificadores
199 . ASSIGN               │ '=' │ L75:C16 │ Operadores
200 . IDENTIFIER           │ 'a' │ L75:C18 │ Identificadores
201 . PLUS                 │ '+' │ L75:C20 │ Operadores
202 . IDENTIFIER           │ 'b' │ L75:C22 │ Identificadores
203 . PLUS                 │ '+' │ L75:C24 │ Operadores
204 . IDENTIFIER           │ 'c' │ L75:C26 │ Identificadores
205 . PLUS                 │ '+' │ L75:C28 │ Operadores
206 . IDENTIFIER           │ 'd' │ L75:C30 │ Identificadores
207 . PLUS                 │ '+' │ L75:C32 │ Operadores
208 . IDENTIFIER           │ 'e' │ L75:C34 │ Identificadores
209 . PLUS                 │ '+' │ L75:C36 │ Operadores
210 . IDENTIFIER           │ 'f' │ L75:C38 │ Identificadores
211 . PLUS                 │ '+' │ L75:C40 │ Operadores
212 . IDENTIFIER           │ 'g' │ L75:C42 │ Identificadores
213 . PLUS                 │ '+' │ L75:C44 │ Operadores
214 . IDENTIFIER           │ 'h' │ L75:C46 │ Identificadores
215 . PLUS                 │ '+' │ L75:C48 │ Operadores
216 . IDENTIFIER           │ 'i' │ L75:C50 │ Identificadores
217 . PLUS                 │ '+' │ L75:C52 │ Operadores
218 . IDENTIFIER           │ 'j' │ L75:C54 │ Identificadores
219 . SEMICOLON            │ ';' │ L75:C55 │ Pontuação
220 . RETURN               │ 'return' │ L76:C5 │ Palavras-chave
221 . IDENTIFIER           │ 'result' │ L76:C12 │ Identificadores
222 . SEMICOLON            │ ';' │ L76:C18 │ Pontuação
223 . RIGHT_BRACE          │ '}' │ L77:C1 │ Delimitadores
224 . DOUBLE               │ 'double' │ L79:C1 │ Palavras-chave
225 . IDENTIFIER           │ 'complex_function_2' │ L79:C8 │ Identificadores
226 . LEFT_PAREN           │ '(' │ L79:C26 │ Delimitadores
227 . DOUBLE               │ 'double' │ L79:C27 │ Palavras-chave
228 . IDENTIFIER           │ 'x1' │ L79:C34 │ Identificadores
229 . COMMA                │ ',' │ L79:C36 │ Operadores
230 . DOUBLE               │ 'double' │ L79:C38 │ Palavras-chave
231 . IDENTIFIER           │ 'y1' │ L79:C45 │ Identificadores
232 . COMMA                │ ',' │ L79:C47 │ Operadores
233 . DOUBLE               │ 'double' │ L79:C49 │ Palavras-chave
234 . IDENTIFIER           │ 'z1' │ L79:C56 │ Identificadores
235 . COMMA                │ ',' │ L79:C58 │ Operadores
236 . DOUBLE               │ 'double' │ L79:C60 │ Palavras-chave
237 . IDENTIFIER           │ 'x2' │ L79:C67 │ Identificadores
238 . COMMA                │ ',' │ L79:C69 │ Operadores
239 . DOUBLE               │ 'double' │ L79:C71 │ Palavras-chave
240 . IDENTIFIER           │ 'y2' │ L79:C78 │ Identificadores
241 . COMMA                │ ',' │ L79:C80 │ Operadores
242 . DOUBLE               │ 'double' │ L79:C82 │ Palavras-chave
243 . IDENTIFIER           │ 'z2' │ L79:C89 │ Identificadores
244 . COMMA                │ ',' │ L79:C91 │ Operadores
245 . DOUBLE               │ 'double' │ L80:C26 │ Palavras-chave
246 . IDENTIFIER           │ 'x3' │ L80:C33 │ Identificadores
247 . COMMA                │ ',' │ L80:C35 │ Operadores
248 . DOUBLE               │ 'double' │ L80:C37 │ Palavras-chave
249 . IDENTIFIER           │ 'y3' │ L80:C44 │ Identificadores
250 . COMMA                │ ',' │ L80:C46 │ Operadores
251 . DOUBLE               │ 'double' │ L80:C48 │ Palavras-chave
252 . IDENTIFIER           │ 'z3' │ L80:C55 │ Identificadores
253 . COMMA                │ ',' │ L80:C57 │ Operadores
254 . DOUBLE               │ 'double' │ L80:C59 │ Palavras-chave
255 . IDENTIFIER           │ 'x4' │ L80:C66 │ Identificadores
256 . COMMA                │ ',' │ L80:C68 │ Operadores
257 . DOUBLE               │ 'double' │ L80:C70 │ Palavras-chave
258 . IDENTIFIER           │ 'y4' │ L80:C77 │ Identificadores
259 . COMMA                │ ',' │ L80:C79 │ Operadores
260 . DOUBLE               │ 'double' │ L80:C81 │ Palavras-chave
261 . IDENTIFIER           │ 'z4' │ L80:C88 │ Identificadores
262 . RIGHT_PAREN          │ ')' │ L80:C90 │ Delimitadores
263 . LEFT_BRACE           │ '{' │ L80:C92 │ Delimitadores
264 . RETURN               │ 'return' │ L81:C5 │ Palavras-chave
265 . IDENTIFIER           │ 'sqrt' │ L81:C12 │ Identificadores
266 . LEFT_PAREN           │ '(' │ L81:C16 │ Delimitadores
267 . LEFT_PAREN           │ '(' │ L81:C17 │ Delimitadores
268 . IDENTIFIER           │ 'x1' │ L81:C18 │ Identificadores
269 . MINUS                │ '-' │ L81:C20 │ Operadores
270 . IDENTIFIER           │ 'x2' │ L81:C21 │ Identificadores
271 . RIGHT_PAREN          │ ')' │ L81:C23 │ Delimitadores
272 . MULTIPLY             │ '*' │ L81:C24 │ Operadores
273 . LEFT_PAREN           │ '(' │ L81:C25 │ Delimitadores
274 . IDENTIFIER           │ 'x1' │ L81:C26 │ Identificadores
275 . MINUS                │ '-' │ L81:C28 │ Operadores
276 . IDENTIFIER           │ 'x2' │ L81:C29 │ Identificadores
277 . RIGHT_PAREN          │ ')' │ L81:C31 │ Delimitadores
278 . PLUS                 │ '+' │ L81:C33 │ Operadores
279 . LEFT_PAREN           │ '(' │ L81:C35 │ Delimitadores
280 . IDENTIFIER           │ 'y1' │ L81:C36 │ Identificadores
281 . MINUS                │ '-' │ L81:C38 │ Operadores
282 . IDENTIFIER           │ 'y2' │ L81:C39 │ Identificadores
283 . RIGHT_PAREN          │ ')' │ L81:C41 │ Delimitadores
284 . MULTIPLY             │ '*' │ L81:C42 │ Operadores
285 . LEFT_PAREN           │ '(' │ L81:C43 │ Delimitadores
286 . IDENTIFIER           │ 'y1' │ L81:C44 │ Identificadores
287 . MINUS                │ '-' │ L81:C46 │ Operadores
288 . IDENTIFIER           │ 'y2' │ L81:C47 │ Identificadores
289 . RIGHT_PAREN          │ ')' │ L81:C49 │ Delimitadores
290 . PLUS                 │ '+' │ L81:C51 │ Operadores
291 . LEFT_PAREN           │ '(' │ L81:C53 │ Delimitadores
292 . IDENTIFIER           │ 'z1' │ L81:C54 │ Identificadores
293 . MINUS                │ '-' │ L81:C56 │ Operadores
294 . IDENTIFIER           │ 'z2' │ L81:C57 │ Identificadores
295 . RIGHT_PAREN          │ ')' │ L81:C59 │ Delimitadores
296 . MULTIPLY             │ '*' │ L81:C60 │ Operadores
297 . LEFT_PAREN           │ '(' │ L81:C61 │ Delimitadores
298 . IDENTIFIER           │ 'z1' │ L81:C62 │ Identificadores
299 . MINUS                │ '-' │ L81:C64 │ Operadores
300 . IDENTIFIER           │ 'z2' │ L81:C65 │ Identificadores
301 . RIGHT_PAREN          │ ')' │ L81:C67 │ Delimitadores
302 . RIGHT_PAREN          │ ')' │ L81:C68 │ Delimitadores
303 . PLUS                 │ '+' │ L81:C70 │ Operadores
304 . IDENTIFIER           │ 'sqrt' │ L82:C12 │ Identificadores
305 . LEFT_PAREN           │ '(' │ L82:C16 │ Delimitadores
306 . LEFT_PAREN           │ '(' │ L82:C17 │ Delimitadores
307 . IDENTIFIER           │ 'x2' │ L82:C18 │ Identificadores
308 . MINUS                │ '-' │ L82:C20 │ Operadores
309 . IDENTIFIER           │ 'x3' │ L82:C21 │ Identificadores
310 . RIGHT_PAREN          │ ')' │ L82:C23 │ Delimitadores
311 . MULTIPLY             │ '*' │ L82:C24 │ Operadores
312 . LEFT_PAREN           │ '(' │ L82:C25 │ Delimitadores
313 . IDENTIFIER           │ 'x2' │ L82:C26 │ Identificadores
314 . MINUS                │ '-' │ L82:C28 │ Operadores
315 . IDENTIFIER           │ 'x3' │ L82:C29 │ Identificadores
316 . RIGHT_PAREN          │ ')' │ L82:C31 │ Delimitadores
317 . PLUS                 │ '+' │ L82:C33 │ Operadores
318 . LEFT_PAREN           │ '(' │ L82:C35 │ Delimitadores
319 . IDENTIFIER           │ 'y2' │ L82:C36 │ Identificadores
320 . MINUS                │ '-' │ L82:C38 │ Operadores
321 . IDENTIFIER           │ 'y3' │ L82:C39 │ Identificadores
322 . RIGHT_PAREN          │ ')' │ L82:C41 │ Delimitadores
323 . MULTIPLY             │ '*' │ L82:C42 │ Operadores
324 . LEFT_PAREN           │ '(' │ L82:C43 │ Delimitadores
325 . IDENTIFIER           │ 'y2' │ L82:C44 │ Identificadores
326 . MINUS                │ '-' │ L82:C46 │ Operadores
327 . IDENTIFIER           │ 'y3' │ L82:C47 │ Identificadores
328 . RIGHT_PAREN          │ ')' │ L82:C49 │ Delimitadores
329 . PLUS                 │ '+' │ L82:C51 │ Operadores
330 . LEFT_PAREN           │ '(' │ L82:C53 │ Delimitadores
331 . IDENTIFIER           │ 'z2' │ L82:C54 │ Identificadores
332 . MINUS                │ '-' │ L82:C56 │ Operadores
333 . IDENTIFIER           │ 'z3' │ L82:C57 │ Identificadores
334 . RIGHT_PAREN          │ ')' │ L82:C59 │ Delimitadores
335 . MULTIPLY             │ '*' │ L82:C60 │ Operadores
336 . LEFT_PAREN           │ '(' │ L82:C61 │ Delimitadores
337 . IDENTIFIER           │ 'z2' │ L82:C62 │ Identificadores
338 . MINUS                │ '-' │ L82:C64 │ Operadores
339 . IDENTIFIER           │ 'z3' │ L82:C65 │ Identificadores
340 . RIGHT_PAREN          │ ')' │ L82:C67 │ Delimitadores
341 . RIGHT_PAREN          │ ')' │ L82:C68 │ Delimitadores
342 . PLUS                 │ '+' │ L82:C70 │ Operadores
343 . IDENTIFIER           │ 'sqrt' │ L83:C12 │ Identificadores
344 . LEFT_PAREN           │ '(' │ L83:C16 │ Delimitadores
345 . LEFT_PAREN           │ '(' │ L83:C17 │ Delimitadores
346 . IDENTIFIER           │ 'x3' │ L83:C18 │ Identificadores
347 . MINUS                │ '-' │ L83:C20 │ Operadores
348 . IDENTIFIER           │ 'x4' │ L83:C21 │ Identificadores
349 . RIGHT_PAREN          │ ')' │ L83:C23 │ Delimitadores
350 . MULTIPLY             │ '*' │ L83:C24 │ Operadores
351 . LEFT_PAREN           │ '(' │ L83:C25 │ Delimitadores
352 . IDENTIFIER           │ 'x3' │ L83:C26 │ Identificadores
353 . MINUS                │ '-' │ L83:C28 │ Operadores
354 . IDENTIFIER           │ 'x4' │ L83:C29 │ Identificadores
355 . RIGHT_PAREN          │ ')' │ L83:C31 │ Delimitadores
356 . PLUS                 │ '+' │ L83:C33 │ Operadores
357 . LEFT_PAREN           │ '(' │ L83:C35 │ Delimitadores
358 . IDENTIFIER           │ 'y3' │ L83:C36 │ Identificadores
359 . MINUS                │ '-' │ L83:C38 │ Operadores
360 . IDENTIFIER           │ 'y4' │ L83:C39 │ Identificadores
361 . RIGHT_PAREN          │ ')' │ L83:C41 │ Delimitadores
362 . MULTIPLY             │ '*' │ L83:C42 │ Operadores
363 . LEFT_PAREN           │ '(' │ L83:C43 │ Delimitadores
364 . IDENTIFIER           │ 'y3' │ L83:C44 │ Identificadores
365 . MINUS                │ '-' │ L83:C46 │ Operadores
366 . IDENTIFIER           │ 'y4' │ L83:C47 │ Identificadores
367 . RIGHT_PAREN          │ ')' │ L83:C49 │ Delimitadores
368 . PLUS                 │ '+' │ L83:C51 │ Operadores
369 . LEFT_PAREN           │ '(' │ L83:C53 │ Delimitadores
370 . IDENTIFIER           │ 'z3' │ L83:C54 │ Identificadores
371 . MINUS                │ '-' │ L83:C56 │ Operadores
372 . IDENTIFIER           │ 'z4' │ L83:C57 │ Identificadores
373 . RIGHT_PAREN          │ ')' │ L83:C59 │ Delimitadores
374 . MULTIPLY             │ '*' │ L83:C60 │ Operadores
375 . LEFT_PAREN           │ '(' │ L83:C61 │ Delimitadores
376 . IDENTIFIER           │ 'z3' │ L83:C62 │ Identificadores
377 . MINUS                │ '-' │ L83:C64 │ Operadores
378 . IDENTIFIER           │ 'z4' │ L83:C65 │ Identificadores
379 . RIGHT_PAREN          │ ')' │ L83:C67 │ Delimitadores
380 . RIGHT_PAREN          │ ')' │ L83:C68 │ Delimitadores
381 . SEMICOLON            │ ';' │ L83:C69 │ Pontuação
382 . RIGHT_BRACE          │ '}' │ L84:C1 │ Delimitadores
383 . STATIC               │ 'static' │ L87:C1 │ Palavras-chave
384 . INT                  │ 'int' │ L87:C8 │ Palavras-chave
385 . IDENTIFIER           │ 'large_array_1' │ L87:C12 │ Identificadores
386 . LEFT_BRACKET         │ '[' │ L87:C25 │ Delimitadores
387 . INTEGER_LITERAL      │ '1000' │ L87:C26 │ Literais
388 . RIGHT_BRACKET        │ ']' │ L87:C30 │ Delimitadores
389 . ASSIGN               │ '=' │ L87:C32 │ Operadores
390 . LEFT_BRACE           │ '{' │ L87:C34 │ Delimitadores
391 . INTEGER_LITERAL      │ '1' │ L88:C5 │ Literais
392 . COMMA                │ ',' │ L88:C6 │ Operadores
393 . INTEGER_LITERAL      │ '2' │ L88:C8 │ Literais
394 . COMMA                │ ',' │ L88:C9 │ Operadores
395 . INTEGER_LITERAL      │ '3' │ L88:C11 │ Literais
396 . COMMA                │ ',' │ L88:C12 │ Operadores
397 . INTEGER_LITERAL      │ '4' │ L88:C14 │ Literais
398 . COMMA                │ ',' │ L88:C15 │ Operadores
399 . INTEGER_LITERAL      │ '5' │ L88:C17 │ Literais
400 . COMMA                │ ',' │ L88:C18 │ Operadores
401 . INTEGER_LITERAL      │ '6' │ L88:C20 │ Literais
402 . COMMA                │ ',' │ L88:C21 │ Operadores
403 . INTEGER_LITERAL      │ '7' │ L88:C23 │ Literais
404 . COMMA                │ ',' │ L88:C24 │ Operadores
405 . INTEGER_LITERAL      │ '8' │ L88:C26 │ Literais
406 . COMMA                │ ',' │ L88:C27 │ Operadores
407 . INTEGER_LITERAL      │ '9' │ L88:C29 │ Literais
408 . COMMA                │ ',' │ L88:C30 │ Operadores
409 . INTEGER_LITERAL      │ '10' │ L88:C32 │ Literais
410 . COMMA                │ ',' │ L88:C34 │ Operadores
411 . INTEGER_LITERAL      │ '11' │ L88:C36 │ Literais
412 . COMMA                │ ',' │ L88:C38 │ Operadores
413 . INTEGER_LITERAL      │ '12' │ L88:C40 │ Literais
414 . COMMA                │ ',' │ L88:C42 │ Operadores
415 . INTEGER_LITERAL      │ '13' │ L88:C44 │ Literais
416 . COMMA                │ ',' │ L88:C46 │ Operadores
417 . INTEGER_LITERAL      │ '14' │ L88:C48 │ Literais
418 . COMMA                │ ',' │ L88:C50 │ Operadores
419 . INTEGER_LITERAL      │ '15' │ L88:C52 │ Literais
420 . COMMA                │ ',' │ L88:C54 │ Operadores
421 . INTEGER_LITERAL      │ '16' │ L88:C56 │ Literais
422 . COMMA                │ ',' │ L88:C58 │ Operadores
423 . INTEGER_LITERAL      │ '17' │ L88:C60 │ Literais
424 . COMMA                │ ',' │ L88:C62 │ Operadores
425 . INTEGER_LITERAL      │ '18' │ L88:C64 │ Literais
426 . COMMA                │ ',' │ L88:C66 │ Operadores
427 . INTEGER_LITERAL      │ '19' │ L88:C68 │ Literais
428 . COMMA                │ ',' │ L88:C70 │ Operadores
429 . INTEGER_LITERAL      │ '20' │ L88:C72 │ Literais
430 . COMMA                │ ',' │ L88:C74 │ Operadores
431 . INTEGER_LITERAL      │ '21' │ L89:C5 │ Literais
432 . COMMA                │ ',' │ L89:C7 │ Operadores
433 . INTEGER_LITERAL      │ '22' │ L89:C9 │ Literais
434 . COMMA                │ ',' │ L89:C11 │ Operadores
435 . INTEGER_LITERAL      │ '23' │ L89:C13 │ Literais
436 . COMMA                │ ',' │ L89:C15 │ Operadores
437 . INTEGER_LITERAL      │ '24' │ L89:C17 │ Literais
438 . COMMA                │ ',' │ L89:C19 │ Operadores
439 . INTEGER_LITERAL      │ '25' │ L89:C21 │ Literais
440 . COMMA                │ ',' │ L89:C23 │ Operadores
441 . INTEGER_LITERAL      │ '26' │ L89:C25 │ Literais
442 . COMMA                │ ',' │ L89:C27 │ Operadores
443 . INTEGER_LITERAL      │ '27' │ L89:C29 │ Literais
444 . COMMA                │ ',' │ L89:C31 │ Operadores
445 . INTEGER_LITERAL      │ '28' │ L89:C33 │ Literais
446 . COMMA                │ ',' │ L89:C35 │ Operadores
447 . INTEGER_LITERAL      │ '29' │ L89:C37 │ Literais
448 . COMMA                │ ',' │ L89:C39 │ Operadores
449 . INTEGER_LITERAL      │ '30' │ L89:C41 │ Literais
450 . COMMA                │ ',' │ L89:C43 │ Operadores
451 . INTEGER_LITERAL      │ '31' │ L89:C45 │ Literais
452 . COMMA                │ ',' │ L89:C47 │ Operadores
453 . INTEGER_LITERAL      │ '32' │ L89:C49 │ Literais
454 . COMMA                │ ',' │ L89:C51 │ Operadores
455 . INTEGER_LITERAL      │ '33' │ L89:C53 │ Literais
456 . COMMA                │ ',' │ L89:C55 │ Operadores
457 . INTEGER_LITERAL      │ '34' │ L89:C57 │ Literais
458 . COMMA                │ ',' │ L89:C59 │ Operadores
459 . INTEGER_LITERAL      │ '35' │ L89:C61 │ Literais
460 . COMMA                │ ',' │ L89:C63 │ Operadores
461 . INTEGER_LITERAL      │ '36' │ L89:C65 │ Literais
462 . COMMA                │ ',' │ L89:C67 │ Operadores
463 . INTEGER_LITERAL      │ '37' │ L89:C69 │ Literais
464 . COMMA                │ ',' │ L89:C71 │ Operadores
465 . INTEGER_LITERAL      │ '38' │ L89:C73 │ Literais
466 . COMMA                │ ',' │ L89:C75 │ Operadores
467 . INTEGER_LITERAL      │ '39' │ L89:C77 │ Literais
468 . COMMA                │ ',' │ L89:C79 │ Operadores
469 . INTEGER_LITERAL      │ '40' │ L89:C81 │ Literais
470 . COMMA                │ ',' │ L89:C83 │ Operadores
471 . INTEGER_LITERAL      │ '41' │ L90:C5 │ Literais
472 . COMMA                │ ',' │ L90:C7 │ Operadores
473 . INTEGER_LITERAL      │ '42' │ L90:C9 │ Literais
474 . COMMA                │ ',' │ L90:C11 │ Operadores
475 . INTEGER_LITERAL      │ '43' │ L90:C13 │ Literais
476 . COMMA                │ ',' │ L90:C15 │ Operadores
477 . INTEGER_LITERAL      │ '44' │ L90:C17 │ Literais
478 . COMMA                │ ',' │ L90:C19 │ Operadores
479 . INTEGER_LITERAL      │ '45' │ L90:C21 │ Literais
480 . COMMA                │ ',' │ L90:C23 │ Operadores
481 . INTEGER_LITERAL      │ '46' │ L90:C25 │ Literais
482 . COMMA                │ ',' │ L90:C27 │ Operadores
483 . INTEGER_LITERAL      │ '47' │ L90:C29 │ Literais
484 . COMMA                │ ',' │ L90:C31 │ Operadores
485 . INTEGER_LITERAL      │ '48' │ L90:C33 │ Literais
486 . COMMA                │ ',' │ L90:C35 │ Operadores
487 . INTEGER_LITERAL      │ '49' │ L90:C37 │ Literais
488 . COMMA                │ ',' │ L90:C39 │ Operadores
489 . INTEGER_LITERAL      │ '50' │ L90:C41 │ Literais
490 . COMMA                │ ',' │ L90:C43 │ Operadores
491 . INTEGER_LITERAL      │ '51' │ L90:C45 │ Literais
492 . COMMA                │ ',' │ L90:C47 │ Operadores
493 . INTEGER_LITERAL      │ '52' │ L90:C49 │ Literais
494 . COMMA                │ ',' │ L90:C51 │ Operadores
495 . INTEGER_LITERAL      │ '53' │ L90:C53 │ Literais
496 . COMMA                │ ',' │ L90:C55 │ Operadores
497 . INTEGER_LITERAL      │ '54' │ L90:C57 │ Literais
498 . COMMA                │ ',' │ L90:C59 │ Operadores
499 . INTEGER_LITERAL      │ '55' │ L90:C61 │ Literais
500 . COMMA                │ ',' │ L90:C63 │ Operadores
501 . INTEGER_LITERAL      │ '56' │ L90:C65 │ Literais
502 . COMMA                │ ',' │ L90:C67 │ Operadores
503 . INTEGER_LITERAL      │ '57' │ L90:C69 │ Literais
504 . COMMA                │ ',' │ L90:C71 │ Operadores
505 . INTEGER_LITERAL      │ '58' │ L90:C73 │ Literais
506 . COMMA                │ ',' │ L90:C75 │ Operadores
507 . INTEGER_LITERAL      │ '59' │ L90:C77 │ Literais
508 . COMMA                │ ',' │ L90:C79 │ Operadores
509 . INTEGER_LITERAL      │ '60' │ L90:C81 │ Literais
510 . COMMA                │ ',' │ L90:C83 │ Operadores
511 . INTEGER_LITERAL      │ '61' │ L91:C5 │ Literais
512 . COMMA                │ ',' │ L91:C7 │ Operadores
513 . INTEGER_LITERAL      │ '62' │ L91:C9 │ Literais
514 . COMMA                │ ',' │ L91:C11 │ Operadores
515 . INTEGER_LITERAL      │ '63' │ L91:C13 │ Literais
516 . COMMA                │ ',' │ L91:C15 │ Operadores
517 . INTEGER_LITERAL      │ '64' │ L91:C17 │ Literais
518 . COMMA                │ ',' │ L91:C19 │ Operadores
519 . INTEGER_LITERAL      │ '65' │ L91:C21 │ Literais
520 . COMMA                │ ',' │ L91:C23 │ Operadores
521 . INTEGER_LITERAL      │ '66' │ L91:C25 │ Literais
522 . COMMA                │ ',' │ L91:C27 │ Operadores
523 . INTEGER_LITERAL      │ '67' │ L91:C29 │ Literais
524 . COMMA                │ ',' │ L91:C31 │ Operadores
525 . INTEGER_LITERAL      │ '68' │ L91:C33 │ Literais
526 . COMMA                │ ',' │ L91:C35 │ Operadores
527 . INTEGER_LITERAL      │ '69' │ L91:C37 │ Literais
528 . COMMA                │ ',' │ L91:C39 │ Operadores
529 . INTEGER_LITERAL      │ '70' │ L91:C41 │ Literais
530 . COMMA                │ ',' │ L91:C43 │ Operadores
531 . INTEGER_LITERAL      │ '71' │ L91:C45 │ Literais
532 . COMMA                │ ',' │ L91:C47 │ Operadores
533 . INTEGER_LITERAL      │ '72' │ L91:C49 │ Literais
534 . COMMA                │ ',' │ L91:C51 │ Operadores
535 . INTEGER_LITERAL      │ '73' │ L91:C53 │ Literais
536 . COMMA                │ ',' │ L91:C55 │ Operadores
537 . INTEGER_LITERAL      │ '74' │ L91:C57 │ Literais
538 . COMMA                │ ',' │ L91:C59 │ Operadores
539 . INTEGER_LITERAL      │ '75' │ L91:C61 │ Literais
540 . COMMA                │ ',' │ L91:C63 │ Operadores
541 . INTEGER_LITERAL      │ '76' │ L91:C65 │ Literais
542 . COMMA                │ ',' │ L91:C67 │ Operadores
543 . INTEGER_LITERAL      │ '77' │ L91:C69 │ Literais
544 . COMMA                │ ',' │ L91:C71 │ Operadores
545 . INTEGER_LITERAL      │ '78' │ L91:C73 │ Literais
546 . COMMA                │ ',' │ L91:C75 │ Operadores
547 . INTEGER_LITERAL      │ '79' │ L91:C77 │ Literais
548 . COMMA                │ ',' │ L91:C79 │ Operadores
549 . INTEGER_LITERAL      │ '80' │ L91:C81 │ Literais
550 . COMMA                │ ',' │ L91:C83 │ Operadores
551 . INTEGER_LITERAL      │ '82' │ L92:C6 │ Literais
552 . COMMA                │ ',' │ L92:C8 │ Operadores
553 . INTEGER_LITERAL      │ '83' │ L92:C10 │ Literais
554 . COMMA                │ ',' │ L92:C12 │ Operadores
555 . INTEGER_LITERAL      │ '84' │ L92:C14 │ Literais
556 . COMMA                │ ',' │ L92:C16 │ Operadores
557 . INTEGER_LITERAL      │ '85' │ L92:C18 │ Literais
558 . COMMA                │ ',' │ L92:C20 │ Operadores
559 . INTEGER_LITERAL      │ '86' │ L92:C22 │ Literais
560 . COMMA                │ ',' │ L92:C24 │ Operadores
561 . INTEGER_LITERAL      │ '87' │ L92:C26 │ Literais
562 . COMMA                │ ',' │ L92:C28 │ Operadores
563 . INTEGER_LITERAL      │ '88' │ L92:C30 │ Literais
564 . COMMA                │ ',' │ L92:C32 │ Operadores
565 . INTEGER_LITERAL      │ '89' │ L92:C34 │ Literais
566 . COMMA                │ ',' │ L92:C36 │ Operadores
567 . INTEGER_LITERAL      │ '90' │ L92:C38 │ Literais
568 . COMMA                │ ',' │ L92:C40 │ Operadores
569 . INTEGER_LITERAL      │ '91' │ L92:C42 │ Literais
570 . COMMA                │ ',' │ L92:C44 │ Operadores
571 . INTEGER_LITERAL      │ '92' │ L92:C46 │ Literais
572 . COMMA                │ ',' │ L92:C48 │ Operadores
573 . INTEGER_LITERAL      │ '93' │ L92:C50 │ Literais
574 . COMMA                │ ',' │ L92:C52 │ Operadores
575 . INTEGER_LITERAL      │ '94' │ L92:C54 │ Literais
576 . COMMA                │ ',' │ L92:C56 │ Operadores
577 . INTEGER_LITERAL      │ '95' │ L92:C58 │ Literais
578 . COMMA                │ ',' │ L92:C60 │ Operadores
579 . INTEGER_LITERAL      │ '96' │ L92:C62 │ Literais
580 . COMMA                │ ',' │ L92:C64 │ Operadores
581 . INTEGER_LITERAL      │ '97' │ L92:C66 │ Literais
582 . COMMA                │ ',' │ L92:C68 │ Operadores
583 . INTEGER_LITERAL      │ '98' │ L92:C70 │ Literais
584 . COMMA                │ ',' │ L92:C72 │ Operadores
585 . INTEGER_LITERAL      │ '99' │ L92:C74 │ Literais
586 . COMMA                │ ',' │ L92:C76 │ Operadores
587 . INTEGER_LITERAL      │ '100' │ L92:C78 │ Literais
588 . RIGHT_BRACE          │ '}' │ L93:C1 │ Delimitadores
589 . SEMICOLON            │ ';' │ L93:C2 │ Pontuação
590 . STATIC               │ 'static' │ L95:C1 │ Palavras-chave
591 . DOUBLE               │ 'double' │ L95:C8 │ Palavras-chave
592 . IDENTIFIER           │ 'large_array_2' │ L95:C15 │ Identificadores
593 . LEFT_BRACKET         │ '[' │ L95:C28 │ Delimitadores
594 . INTEGER_LITERAL      │ '500' │ L95:C29 │ Literais
595 . RIGHT_BRACKET        │ ']' │ L95:C32 │ Delimitadores
596 . ASSIGN               │ '=' │ L95:C34 │ Operadores
597 . LEFT_BRACE           │ '{' │ L95:C36 │ Delimitadores
598 . FLOAT_LITERAL        │ '3.14159' │ L96:C5 │ Literais
599 . COMMA                │ ',' │ L96:C12 │ Operadores
600 . FLOAT_LITERAL        │ '2.71828' │ L96:C14 │ Literais
601 . COMMA                │ ',' │ L96:C21 │ Operadores
602 . FLOAT_LITERAL        │ '1.41421' │ L96:C23 │ Literais
603 . COMMA                │ ',' │ L96:C30 │ Operadores
604 . FLOAT_LITERAL        │ '1.73205' │ L96:C32 │ Literais
605 . COMMA                │ ',' │ L96:C39 │ Operadores
606 . FLOAT_LITERAL        │ '2.23607' │ L96:C41 │ Literais
607 . COMMA                │ ',' │ L96:C48 │ Operadores
608 . FLOAT_LITERAL        │ '1.61803' │ L96:C50 │ Literais
609 . COMMA                │ ',' │ L96:C57 │ Operadores
610 . FLOAT_LITERAL        │ '2.44949' │ L96:C59 │ Literais
611 . COMMA                │ ',' │ L96:C66 │ Operadores
612 . FLOAT_LITERAL        │ '2.64575' │ L96:C68 │ Literais
613 . COMMA                │ ',' │ L96:C75 │ Operadores
614 . FLOAT_LITERAL        │ '1.32472' │ L96:C77 │ Literais
615 . COMMA                │ ',' │ L96:C84 │ Operadores
616 . FLOAT_LITERAL        │ '3.31662' │ L96:C86 │ Literais
617 . COMMA                │ ',' │ L96:C93 │ Operadores
618 . FLOAT_LITERAL        │ '2.44949' │ L97:C5 │ Literais
619 . COMMA                │ ',' │ L97:C12 │ Operadores
620 . FLOAT_LITERAL        │ '1.73205' │ L97:C14 │ Literais
621 . COMMA                │ ',' │ L97:C21 │ Operadores
622 . FLOAT_LITERAL        │ '2.23607' │ L97:C23 │ Literais
623 . COMMA                │ ',' │ L97:C30 │ Operadores
624 . FLOAT_LITERAL        │ '3.14159' │ L97:C32 │ Literais
625 . COMMA                │ ',' │ L97:C39 │ Operadores
626 . FLOAT_LITERAL        │ '2.71828' │ L97:C41 │ Literais
627 . COMMA                │ ',' │ L97:C48 │ Operadores
628 . FLOAT_LITERAL        │ '1.41421' │ L97:C50 │ Literais
629 . COMMA                │ ',' │ L97:C57 │ Operadores
630 . FLOAT_LITERAL        │ '1.61803' │ L97:C59 │ Literais
631 . COMMA                │ ',' │ L97:C66 │ Operadores
632 . FLOAT_LITERAL        │ '2.64575' │ L97:C68 │ Literais
633 . COMMA                │ ',' │ L97:C75 │ Operadores
634 . FLOAT_LITERAL        │ '1.32472' │ L97:C77 │ Literais
635 . COMMA                │ ',' │ L97:C84 │ Operadores
636 . FLOAT_LITERAL        │ '3.31662' │ L97:C86 │ Literais
637 . COMMA                │ ',' │ L97:C93 │ Operadores
638 . FLOAT_LITERAL        │ '1.41421' │ L98:C5 │ Literais
639 . COMMA                │ ',' │ L98:C12 │ Operadores
640 . FLOAT_LITERAL        │ '3.14159' │ L98:C14 │ Literais
641 . COMMA                │ ',' │ L98:C21 │ Operadores
642 . FLOAT_LITERAL        │ '2.71828' │ L98:C23 │ Literais
643 . COMMA                │ ',' │ L98:C30 │ Operadores
644 . FLOAT_LITERAL        │ '1.73205' │ L98:C32 │ Literais
645 . COMMA                │ ',' │ L98:C39 │ Operadores
646 . FLOAT_LITERAL        │ '2.23607' │ L98:C41 │ Literais
647 . COMMA                │ ',' │ L98:C48 │ Operadores
648 . FLOAT_LITERAL        │ '1.61803' │ L98:C50 │ Literais
649 . COMMA                │ ',' │ L98:C57 │ Operadores
650 . FLOAT_LITERAL        │ '2.44949' │ L98:C59 │ Literais
651 . COMMA                │ ',' │ L98:C66 │ Operadores
652 . FLOAT_LITERAL        │ '2.64575' │ L98:C68 │ Literais
653 . COMMA                │ ',' │ L98:C75 │ Operadores
654 . FLOAT_LITERAL        │ '1.32472' │ L98:C77 │ Literais
655 . COMMA                │ ',' │ L98:C84 │ Operadores
656 . FLOAT_LITERAL        │ '3.31662' │ L98:C86 │ Literais
657 . COMMA                │ ',' │ L98:C93 │ Operadores
658 . FLOAT_LITERAL        │ '2.71828' │ L99:C5 │ Literais
659 . COMMA                │ ',' │ L99:C12 │ Operadores
660 . FLOAT_LITERAL        │ '1.41421' │ L99:C14 │ Literais
661 . COMMA                │ ',' │ L99:C21 │ Operadores
662 . FLOAT_LITERAL        │ '3.14159' │ L99:C23 │ Literais
663 . COMMA                │ ',' │ L99:C30 │ Operadores
664 . FLOAT_LITERAL        │ '1.73205' │ L99:C32 │ Literais
665 . COMMA                │ ',' │ L99:C39 │ Operadores
666 . FLOAT_LITERAL        │ '2.23607' │ L99:C41 │ Literais
667 . COMMA                │ ',' │ L99:C48 │ Operadores
668 . FLOAT_LITERAL        │ '1.61803' │ L99:C50 │ Literais
669 . COMMA                │ ',' │ L99:C57 │ Operadores
670 . FLOAT_LITERAL        │ '2.44949' │ L99:C59 │ Literais
671 . COMMA                │ ',' │ L99:C66 │ Operadores
672 . FLOAT_LITERAL        │ '2.64575' │ L99:C68 │ Literais
673 . COMMA                │ ',' │ L99:C75 │ Operadores
674 . FLOAT_LITERAL        │ '1.32472' │ L99:C77 │ Literais
675 . COMMA                │ ',' │ L99:C84 │ Operadores
676 . FLOAT_LITERAL        │ '3.31662' │ L99:C86 │ Literais
677 . COMMA                │ ',' │ L99:C93 │ Operadores
678 . FLOAT_LITERAL        │ '1.73205' │ L100:C5 │ Literais
679 . COMMA                │ ',' │ L100:C12 │ Operadores
680 . FLOAT_LITERAL        │ '2.23607' │ L100:C14 │ Literais
681 . COMMA                │ ',' │ L100:C21 │ Operadores
682 . FLOAT_LITERAL        │ '1.61803' │ L100:C23 │ Literais
683 . COMMA                │ ',' │ L100:C30 │ Operadores
684 . FLOAT_LITERAL        │ '3.14159' │ L100:C32 │ Literais
685 . COMMA                │ ',' │ L100:C39 │ Operadores
686 . FLOAT_LITERAL        │ '2.71828' │ L100:C41 │ Literais
687 . COMMA                │ ',' │ L100:C48 │ Operadores
688 . FLOAT_LITERAL        │ '1.41421' │ L100:C50 │ Literais
689 . COMMA                │ ',' │ L100:C57 │ Operadores
690 . FLOAT_LITERAL        │ '2.44949' │ L100:C59 │ Literais
691 . COMMA                │ ',' │ L100:C66 │ Operadores
692 . FLOAT_LITERAL        │ '2.64575' │ L100:C68 │ Literais
693 . COMMA                │ ',' │ L100:C75 │ Operadores
694 . FLOAT_LITERAL        │ '1.32472' │ L100:C77 │ Literais
695 . COMMA                │ ',' │ L100:C84 │ Operadores
696 . FLOAT_LITERAL        │ '3.31662' │ L100:C86 │ Literais
697 . RIGHT_BRACE          │ '}' │ L101:C1 │ Delimitadores
698 . SEMICOLON            │ ';' │ L101:C2 │ Pontuação
699 . STATIC               │ 'static' │ L104:C1 │ Palavras-chave
700 . CONST                │ 'const' │ L104:C8 │ Palavras-chave
701 . CHAR                 │ 'char' │ L104:C14 │ Palavras-chave
702 . MULTIPLY             │ '*' │ L104:C19 │ Operadores
703 . IDENTIFIER           │ 'long_strings' │ L104:C20 │ Identificadores
704 . LEFT_BRACKET         │ '[' │ L104:C32 │ Delimitadores
705 . RIGHT_BRACKET        │ ']' │ L104:C33 │ Delimitadores
706 . ASSIGN               │ '=' │ L104:C35 │ Operadores
707 . LEFT_BRACE           │ '{' │ L104:C37 │ Delimitadores
708 . STRING_LITERAL       │ '"This is a very long string that contains a lot of text to test the lexer's ability to handle large string literals efficiently and correctly without any performance degradation or memory issues that might occur during the tokenization process of very long string constants in C source code files."' │ L105:C5 │ Literais
709 . COMMA                │ ',' │ L105:C303 │ Operadores
710 . STRING_LITERAL       │ '"Another extremely long string with different content to ensure that the lexer can handle multiple long strings in the same source file without any problems or performance issues that might arise from processing large amounts of string data during the lexical analysis phase of compilation."' │ L106:C5 │ Literais
711 . COMMA                │ ',' │ L106:C296 │ Operadores
712 . STRING_LITERAL       │ '"Yet another long string with even more content to thoroughly test the lexer's string handling capabilities and ensure that it can process large amounts of string data efficiently and correctly without any memory leaks or performance bottlenecks that might occur during tokenization."' │ L107:C5 │ Literais
713 . COMMA                │ ',' │ L107:C289 │ Operadores
714 . STRING_LITERAL       │ '"A fourth long string to continue testing the lexer's ability to handle multiple long string literals in a single source file and ensure that the performance remains consistent even when processing large amounts of string data during the lexical analysis phase."' │ L108:C5 │ Literais
715 . COMMA                │ ',' │ L108:C267 │ Operadores
716 . STRING_LITERAL       │ '"The fifth and final long string in this array to complete the testing of the lexer's string handling capabilities and ensure that it can efficiently process large amounts of string data without any issues or performance degradation during the tokenization process."' │ L109:C5 │ Literais
717 . RIGHT_BRACE          │ '}' │ L110:C1 │ Delimitadores
718 . SEMICOLON            │ ';' │ L110:C2 │ Pontuação
719 . LONG                 │ 'long' │ L113:C1 │ Palavras-chave
720 . IDENTIFIER           │ 'time' │ L113:C6 │ Identificadores
721 . LEFT_PAREN           │ '(' │ L113:C10 │ Delimitadores
722 . LONG                 │ 'long' │ L113:C11 │ Palavras-chave
723 . MULTIPLY             │ '*' │ L113:C16 │ Operadores
724 . IDENTIFIER           │ 'tloc' │ L113:C17 │ Identificadores
725 . RIGHT_PAREN          │ ')' │ L113:C21 │ Delimitadores
726 . SEMICOLON            │ ';' │ L113:C22 │ Pontuação
727 . DOUBLE               │ 'double' │ L114:C1 │ Palavras-chave
728 . IDENTIFIER           │ 'sin' │ L114:C8 │ Identificadores
729 . LEFT_PAREN           │ '(' │ L114:C11 │ Delimitadores
730 . DOUBLE               │ 'double' │ L114:C12 │ Palavras-chave
731 . IDENTIFIER           │ 'x' │ L114:C19 │ Identificadores
732 . RIGHT_PAREN          │ ')' │ L114:C20 │ Delimitadores
733 . SEMICOLON            │ ';' │ L114:C21 │ Pontuação
734 . DOUBLE               │ 'double' │ L115:C1 │ Palavras-chave
735 . IDENTIFIER           │ 'sqrt' │ L115:C8 │ Identificadores
736 . LEFT_PAREN           │ '(' │ L115:C12 │ Delimitadores
737 . DOUBLE               │ 'double' │ L115:C13 │ Palavras-chave
738 . IDENTIFIER           │ 'x' │ L115:C20 │ Identificadores
739 . RIGHT_PAREN          │ ')' │ L115:C21 │ Delimitadores
740 . SEMICOLON            │ ';' │ L115:C22 │ Pontuação
741 . DOUBLE               │ 'double' │ L116:C1 │ Palavras-chave
742 . IDENTIFIER           │ 'pow' │ L116:C8 │ Identificadores
743 . LEFT_PAREN           │ '(' │ L116:C11 │ Delimitadores
744 . DOUBLE               │ 'double' │ L116:C12 │ Palavras-chave
745 . IDENTIFIER           │ 'x' │ L116:C19 │ Identificadores
746 . COMMA                │ ',' │ L116:C20 │ Operadores
747 . DOUBLE               │ 'double' │ L116:C22 │ Palavras-chave
748 . IDENTIFIER           │ 'y' │ L116:C29 │ Identificadores
749 . RIGHT_PAREN          │ ')' │ L116:C30 │ Delimitadores
750 . SEMICOLON            │ ';' │ L116:C31 │ Pontuação
751 . DOUBLE               │ 'double' │ L117:C1 │ Palavras-chave
752 . IDENTIFIER           │ 'log' │ L117:C8 │ Identificadores
753 . LEFT_PAREN           │ '(' │ L117:C11 │ Delimitadores
754 . DOUBLE               │ 'double' │ L117:C12 │ Palavras-chave
755 . IDENTIFIER           │ 'x' │ L117:C19 │ Identificadores
756 . RIGHT_PAREN          │ ')' │ L117:C20 │ Delimitadores
757 . SEMICOLON            │ ';' │ L117:C21 │ Pontuação
758 . DOUBLE               │ 'double' │ L118:C1 │ Palavras-chave
759 . IDENTIFIER           │ 'fabs' │ L118:C8 │ Identificadores
760 . LEFT_PAREN           │ '(' │ L118:C12 │ Delimitadores
761 . DOUBLE               │ 'double' │ L118:C13 │ Palavras-chave
762 . IDENTIFIER           │ 'x' │ L118:C20 │ Identificadores
763 . RIGHT_PAREN          │ ')' │ L118:C21 │ Delimitadores
764 . SEMICOLON            │ ';' │ L118:C22 │ Pontuação
765 . IDENTIFIER           │ 'size_t' │ L119:C1 │ Identificadores
766 . IDENTIFIER           │ 'strlen' │ L119:C8 │ Identificadores
767 . LEFT_PAREN           │ '(' │ L119:C14 │ Delimitadores
768 . CONST                │ 'const' │ L119:C15 │ Palavras-chave
769 . CHAR                 │ 'char' │ L119:C21 │ Palavras-chave
770 . MULTIPLY             │ '*' │ L119:C26 │ Operadores
771 . IDENTIFIER           │ 's' │ L119:C27 │ Identificadores
772 . RIGHT_PAREN          │ ')' │ L119:C28 │ Delimitadores
773 . SEMICOLON            │ ';' │ L119:C29 │ Pontuação
774 . INT                  │ 'int' │ L122:C1 │ Palavras-chave
775 . IDENTIFIER           │ 'partition' │ L122:C5 │ Identificadores
776 . LEFT_PAREN           │ '(' │ L122:C14 │ Delimitadores
777 . INT                  │ 'int' │ L122:C15 │ Palavras-chave
778 . IDENTIFIER           │ 'arr' │ L122:C19 │ Identificadores
779 . LEFT_BRACKET         │ '[' │ L122:C22 │ Delimitadores
780 . RIGHT_BRACKET        │ ']' │ L122:C23 │ Delimitadores
781 . COMMA                │ ',' │ L122:C24 │ Operadores
782 . INT                  │ 'int' │ L122:C26 │ Palavras-chave
783 . IDENTIFIER           │ 'low' │ L122:C30 │ Identificadores
784 . COMMA                │ ',' │ L122:C33 │ Operadores
785 . INT                  │ 'int' │ L122:C35 │ Palavras-chave
786 . IDENTIFIER           │ 'high' │ L122:C39 │ Identificadores
787 . RIGHT_PAREN          │ ')' │ L122:C43 │ Delimitadores
788 . SEMICOLON            │ ';' │ L122:C44 │ Pontuação
789 . VOID                 │ 'void' │ L125:C1 │ Palavras-chave
790 . IDENTIFIER           │ 'matrix_multiply' │ L125:C6 │ Identificadores
791 . LEFT_PAREN           │ '(' │ L125:C21 │ Delimitadores
792 . DOUBLE               │ 'double' │ L125:C22 │ Palavras-chave
793 . IDENTIFIER           │ 'a' │ L125:C29 │ Identificadores
794 . LEFT_BRACKET         │ '[' │ L125:C30 │ Delimitadores
795 . INTEGER_LITERAL      │ '4' │ L125:C31 │ Literais
796 . RIGHT_BRACKET        │ ']' │ L125:C32 │ Delimitadores
797 . LEFT_BRACKET         │ '[' │ L125:C33 │ Delimitadores
798 . INTEGER_LITERAL      │ '4' │ L125:C34 │ Literais
799 . RIGHT_BRACKET        │ ']' │ L125:C35 │ Delimitadores
800 . COMMA                │ ',' │ L125:C36 │ Operadores
801 . DOUBLE               │ 'double' │ L125:C38 │ Palavras-chave
802 . IDENTIFIER           │ 'b' │ L125:C45 │ Identificadores
803 . LEFT_BRACKET         │ '[' │ L125:C46 │ Delimitadores
804 . INTEGER_LITERAL      │ '4' │ L125:C47 │ Literais
805 . RIGHT_BRACKET        │ ']' │ L125:C48 │ Delimitadores
806 . LEFT_BRACKET         │ '[' │ L125:C49 │ Delimitadores
807 . INTEGER_LITERAL      │ '4' │ L125:C50 │ Literais
808 . RIGHT_BRACKET        │ ']' │ L125:C51 │ Delimitadores
809 . COMMA                │ ',' │ L125:C52 │ Operadores
810 . DOUBLE               │ 'double' │ L125:C54 │ Palavras-chave
811 . IDENTIFIER           │ 'result' │ L125:C61 │ Identificadores
812 . LEFT_BRACKET         │ '[' │ L125:C67 │ Delimitadores
813 . INTEGER_LITERAL      │ '4' │ L125:C68 │ Literais
814 . RIGHT_BRACKET        │ ']' │ L125:C69 │ Delimitadores
815 . LEFT_BRACKET         │ '[' │ L125:C70 │ Delimitadores
816 . INTEGER_LITERAL      │ '4' │ L125:C71 │ Literais
817 . RIGHT_BRACKET        │ ']' │ L125:C72 │ Delimitadores
818 . RIGHT_PAREN          │ ')' │ L125:C73 │ Delimitadores
819 . LEFT_BRACE           │ '{' │ L125:C75 │ Delimitadores
820 . FOR                  │ 'for' │ L126:C5 │ Palavras-chave
821 . LEFT_PAREN           │ '(' │ L126:C9 │ Delimitadores
822 . INT                  │ 'int' │ L126:C10 │ Palavras-chave
823 . IDENTIFIER           │ 'i' │ L126:C14 │ Identificadores
824 . ASSIGN               │ '=' │ L126:C16 │ Operadores
825 . INTEGER_LITERAL      │ '0' │ L126:C18 │ Literais
826 . SEMICOLON            │ ';' │ L126:C19 │ Pontuação
827 . IDENTIFIER           │ 'i' │ L126:C21 │ Identificadores
828 . LESS_THAN            │ '<' │ L126:C23 │ Operadores
829 . INTEGER_LITERAL      │ '4' │ L126:C25 │ Literais
830 . SEMICOLON            │ ';' │ L126:C26 │ Pontuação
831 . IDENTIFIER           │ 'i' │ L126:C28 │ Identificadores
832 . INCREMENT            │ '++' │ L126:C29 │ Operadores
833 . RIGHT_PAREN          │ ')' │ L126:C31 │ Delimitadores
834 . LEFT_BRACE           │ '{' │ L126:C33 │ Delimitadores
835 . FOR                  │ 'for' │ L127:C9 │ Palavras-chave
836 . LEFT_PAREN           │ '(' │ L127:C13 │ Delimitadores
837 . INT                  │ 'int' │ L127:C14 │ Palavras-chave
838 . IDENTIFIER           │ 'j' │ L127:C18 │ Identificadores
839 . ASSIGN               │ '=' │ L127:C20 │ Operadores
840 . INTEGER_LITERAL      │ '0' │ L127:C22 │ Literais
841 . SEMICOLON            │ ';' │ L127:C23 │ Pontuação
842 . IDENTIFIER           │ 'j' │ L127:C25 │ Identificadores
843 . LESS_THAN            │ '<' │ L127:C27 │ Operadores
844 . INTEGER_LITERAL      │ '4' │ L127:C29 │ Literais
845 . SEMICOLON            │ ';' │ L127:C30 │ Pontuação
846 . IDENTIFIER           │ 'j' │ L127:C32 │ Identificadores
847 . INCREMENT            │ '++' │ L127:C33 │ Operadores
848 . RIGHT_PAREN          │ ')' │ L127:C35 │ Delimitadores
849 . LEFT_BRACE           │ '{' │ L127:C37 │ Delimitadores
850 . IDENTIFIER           │ 'result' │ L128:C13 │ Identificadores
851 . LEFT_BRACKET         │ '[' │ L128:C19 │ Delimitadores
852 . IDENTIFIER           │ 'i' │ L128:C20 │ Identificadores
853 . RIGHT_BRACKET        │ ']' │ L128:C21 │ Delimitadores
854 . LEFT_BRACKET         │ '[' │ L128:C22 │ Delimitadores
855 . IDENTIFIER           │ 'j' │ L128:C23 │ Identificadores
856 . RIGHT_BRACKET        │ ']' │ L128:C24 │ Delimitadores
857 . ASSIGN               │ '=' │ L128:C26 │ Operadores
858 . FLOAT_LITERAL        │ '0.0' │ L128:C28 │ Literais
859 . SEMICOLON            │ ';' │ L128:C31 │ Pontuação
860 . FOR                  │ 'for' │ L129:C13 │ Palavras-chave
861 . LEFT_PAREN           │ '(' │ L129:C17 │ Delimitadores
862 . INT                  │ 'int' │ L129:C18 │ Palavras-chave
863 . IDENTIFIER           │ 'k' │ L129:C22 │ Identificadores
864 . ASSIGN               │ '=' │ L129:C24 │ Operadores
865 . INTEGER_LITERAL      │ '0' │ L129:C26 │ Literais
866 . SEMICOLON            │ ';' │ L129:C27 │ Pontuação
867 . IDENTIFIER           │ 'k' │ L129:C29 │ Identificadores
868 . LESS_THAN            │ '<' │ L129:C31 │ Operadores
869 . INTEGER_LITERAL      │ '4' │ L129:C33 │ Literais
870 . SEMICOLON            │ ';' │ L129:C34 │ Pontuação
871 . IDENTIFIER           │ 'k' │ L129:C36 │ Identificadores
872 . INCREMENT            │ '++' │ L129:C37 │ Operadores
873 . RIGHT_PAREN          │ ')' │ L129:C39 │ Delimitadores
874 . LEFT_BRACE           │ '{' │ L129:C41 │ Delimitadores
875 . IDENTIFIER           │ 'result' │ L130:C17 │ Identificadores
876 . LEFT_BRACKET         │ '[' │ L130:C23 │ Delimitadores
877 . IDENTIFIER           │ 'i' │ L130:C24 │ Identificadores
878 . RIGHT_BRACKET        │ ']' │ L130:C25 │ Delimitadores
879 . LEFT_BRACKET         │ '[' │ L130:C26 │ Delimitadores
880 . IDENTIFIER           │ 'j' │ L130:C27 │ Identificadores
881 . RIGHT_BRACKET        │ ']' │ L130:C28 │ Delimitadores
882 . PLUS_ASSIGN          │ '+=' │ L130:C30 │ Operadores
883 . IDENTIFIER           │ 'a' │ L130:C33 │ Identificadores
884 . LEFT_BRACKET         │ '[' │ L130:C34 │ Delimitadores
885 . IDENTIFIER           │ 'i' │ L130:C35 │ Identificadores
886 . RIGHT_BRACKET        │ ']' │ L130:C36 │ Delimitadores
887 . LEFT_BRACKET         │ '[' │ L130:C37 │ Delimitadores
888 . IDENTIFIER           │ 'k' │ L130:C38 │ Identificadores
889 . RIGHT_BRACKET        │ ']' │ L130:C39 │ Delimitadores
890 . MULTIPLY             │ '*' │ L130:C41 │ Operadores
891 . IDENTIFIER           │ 'b' │ L130:C43 │ Identificadores
892 . LEFT_BRACKET         │ '[' │ L130:C44 │ Delimitadores
893 . IDENTIFIER           │ 'k' │ L130:C45 │ Identificadores
894 . RIGHT_BRACKET        │ ']' │ L130:C46 │ Delimitadores
895 . LEFT_BRACKET         │ '[' │ L130:C47 │ Delimitadores
896 . IDENTIFIER           │ 'j' │ L130:C48 │ Identificadores
897 . RIGHT_BRACKET        │ ']' │ L130:C49 │ Delimitadores
898 . SEMICOLON            │ ';' │ L130:C50 │ Pontuação
899 . RIGHT_BRACE          │ '}' │ L131:C13 │ Delimitadores
900 . RIGHT_BRACE          │ '}' │ L132:C9 │ Delimitadores
901 . RIGHT_BRACE          │ '}' │ L133:C5 │ Delimitadores
902 . RIGHT_BRACE          │ '}' │ L134:C1 │ Delimitadores
903 . VOID                 │ 'void' │ L136:C1 │ Palavras-chave
904 . IDENTIFIER           │ 'bubble_sort' │ L136:C6 │ Identificadores
905 . LEFT_PAREN           │ '(' │ L136:C17 │ Delimitadores
906 . INT                  │ 'int' │ L136:C18 │ Palavras-chave
907 . IDENTIFIER           │ 'arr' │ L136:C22 │ Identificadores
908 . LEFT_BRACKET         │ '[' │ L136:C25 │ Delimitadores
909 . RIGHT_BRACKET        │ ']' │ L136:C26 │ Delimitadores
910 . COMMA                │ ',' │ L136:C27 │ Operadores
911 . INT                  │ 'int' │ L136:C29 │ Palavras-chave
912 . IDENTIFIER           │ 'n' │ L136:C33 │ Identificadores
913 . RIGHT_PAREN          │ ')' │ L136:C34 │ Delimitadores
914 . LEFT_BRACE           │ '{' │ L136:C36 │ Delimitadores
915 . FOR                  │ 'for' │ L137:C5 │ Palavras-chave
916 . LEFT_PAREN           │ '(' │ L137:C9 │ Delimitadores
917 . INT                  │ 'int' │ L137:C10 │ Palavras-chave
918 . IDENTIFIER           │ 'i' │ L137:C14 │ Identificadores
919 . ASSIGN               │ '=' │ L137:C16 │ Operadores
920 . INTEGER_LITERAL      │ '0' │ L137:C18 │ Literais
921 . SEMICOLON            │ ';' │ L137:C19 │ Pontuação
922 . IDENTIFIER           │ 'i' │ L137:C21 │ Identificadores
923 . LESS_THAN            │ '<' │ L137:C23 │ Operadores
924 . IDENTIFIER           │ 'n' │ L137:C25 │ Identificadores
925 . MINUS                │ '-' │ L137:C27 │ Operadores
926 . INTEGER_LITERAL      │ '1' │ L137:C29 │ Literais
927 . SEMICOLON            │ ';' │ L137:C30 │ Pontuação
928 . IDENTIFIER           │ 'i' │ L137:C32 │ Identificadores
929 . INCREMENT            │ '++' │ L137:C33 │ Operadores
930 . RIGHT_PAREN          │ ')' │ L137:C35 │ Delimitadores
931 . LEFT_BRACE           │ '{' │ L137:C37 │ Delimitadores
932 . FOR                  │ 'for' │ L138:C9 │ Palavras-chave
933 . LEFT_PAREN           │ '(' │ L138:C13 │ Delimitadores
934 . INT                  │ 'int' │ L138:C14 │ Palavras-chave
935 . IDENTIFIER           │ 'j' │ L138:C18 │ Identificadores
936 . ASSIGN               │ '=' │ L138:C20 │ Operadores
937 . INTEGER_LITERAL      │ '0' │ L138:C22 │ Literais
938 . SEMICOLON            │ ';' │ L138:C23 │ Pontuação
939 . IDENTIFIER           │ 'j' │ L138:C25 │ Identificadores
940 . LESS_THAN            │ '<' │ L138:C27 │ Operadores
941 . IDENTIFIER           │ 'n' │ L138:C29 │ Identificadores
942 . MINUS                │ '-' │ L138:C31 │ Operadores
943 . IDENTIFIER           │ 'i' │ L138:C33 │ Identificadores
944 . MINUS                │ '-' │ L138:C35 │ Operadores
945 . INTEGER_LITERAL      │ '1' │ L138:C37 │ Literais
946 . SEMICOLON            │ ';' │ L138:C38 │ Pontuação
947 . IDENTIFIER           │ 'j' │ L138:C40 │ Identificadores
948 . INCREMENT            │ '++' │ L138:C41 │ Operadores
949 . RIGHT_PAREN          │ ')' │ L138:C43 │ Delimitadores
950 . LEFT_BRACE           │ '{' │ L138:C45 │ Delimitadores
951 . IF                   │ 'if' │ L139:C13 │ Palavras-chave
952 . LEFT_PAREN           │ '(' │ L139:C16 │ Delimitadores
953 . IDENTIFIER           │ 'arr' │ L139:C17 │ Identificadores
954 . LEFT_BRACKET         │ '[' │ L139:C20 │ Delimitadores
955 . IDENTIFIER           │ 'j' │ L139:C21 │ Identificadores
956 . RIGHT_BRACKET        │ ']' │ L139:C22 │ Delimitadores
957 . GREATER_THAN         │ '>' │ L139:C24 │ Operadores
958 . IDENTIFIER           │ 'arr' │ L139:C26 │ Identificadores
959 . LEFT_BRACKET         │ '[' │ L139:C29 │ Delimitadores
960 . IDENTIFIER           │ 'j' │ L139:C30 │ Identificadores
961 . PLUS                 │ '+' │ L139:C32 │ Operadores
962 . INTEGER_LITERAL      │ '1' │ L139:C34 │ Literais
963 . RIGHT_BRACKET        │ ']' │ L139:C35 │ Delimitadores
964 . RIGHT_PAREN          │ ')' │ L139:C36 │ Delimitadores
965 . LEFT_BRACE           │ '{' │ L139:C38 │ Delimitadores
966 . INT                  │ 'int' │ L140:C17 │ Palavras-chave
967 . IDENTIFIER           │ 'temp' │ L140:C21 │ Identificadores
968 . ASSIGN               │ '=' │ L140:C26 │ Operadores
969 . IDENTIFIER           │ 'arr' │ L140:C28 │ Identificadores
970 . LEFT_BRACKET         │ '[' │ L140:C31 │ Delimitadores
971 . IDENTIFIER           │ 'j' │ L140:C32 │ Identificadores
972 . RIGHT_BRACKET        │ ']' │ L140:C33 │ Delimitadores
973 . SEMICOLON            │ ';' │ L140:C34 │ Pontuação
974 . IDENTIFIER           │ 'arr' │ L141:C17 │ Identificadores
975 . LEFT_BRACKET         │ '[' │ L141:C20 │ Delimitadores
976 . IDENTIFIER           │ 'j' │ L141:C21 │ Identificadores
977 . RIGHT_BRACKET        │ ']' │ L141:C22 │ Delimitadores
978 . ASSIGN               │ '=' │ L141:C24 │ Operadores
979 . IDENTIFIER           │ 'arr' │ L141:C26 │ Identificadores
980 . LEFT_BRACKET         │ '[' │ L141:C29 │ Delimitadores
981 . IDENTIFIER           │ 'j' │ L141:C30 │ Identificadores
982 . PLUS                 │ '+' │ L141:C32 │ Operadores
983 . INTEGER_LITERAL      │ '1' │ L141:C34 │ Literais
984 . RIGHT_BRACKET        │ ']' │ L141:C35 │ Delimitadores
985 . SEMICOLON            │ ';' │ L141:C36 │ Pontuação
986 . IDENTIFIER           │ 'arr' │ L142:C17 │ Identificadores
987 . LEFT_BRACKET         │ '[' │ L142:C20 │ Delimitadores
988 . IDENTIFIER           │ 'j' │ L142:C21 │ Identificadores
989 . PLUS                 │ '+' │ L142:C23 │ Operadores
990 . INTEGER_LITERAL      │ '1' │ L142:C25 │ Literais
991 . RIGHT_BRACKET        │ ']' │ L142:C26 │ Delimitadores
992 . ASSIGN               │ '=' │ L142:C28 │ Operadores
993 . IDENTIFIER           │ 'temp' │ L142:C30 │ Identificadores
994 . SEMICOLON            │ ';' │ L142:C34 │ Pontuação
995 . RIGHT_BRACE          │ '}' │ L143:C13 │ Delimitadores
996 . RIGHT_BRACE          │ '}' │ L144:C9 │ Delimitadores
997 . RIGHT_BRACE          │ '}' │ L145:C5 │ Delimitadores
998 . RIGHT_BRACE          │ '}' │ L146:C1 │ Delimitadores
999 . VOID                 │ 'void' │ L148:C1 │ Palavras-chave
1000. IDENTIFIER           │ 'quick_sort' │ L148:C6 │ Identificadores
1001. LEFT_PAREN           │ '(' │ L148:C16 │ Delimitadores
1002. INT                  │ 'int' │ L148:C17 │ Palavras-chave
1003. IDENTIFIER           │ 'arr' │ L148:C21 │ Identificadores
1004. LEFT_BRACKET         │ '[' │ L148:C24 │ Delimitadores
1005. RIGHT_BRACKET        │ ']' │ L148:C25 │ Delimitadores
1006. COMMA                │ ',' │ L148:C26 │ Operadores
1007. INT                  │ 'int' │ L148:C28 │ Palavras-chave
1008. IDENTIFIER           │ 'low' │ L148:C32 │ Identificadores
1009. COMMA                │ ',' │ L148:C35 │ Operadores
1010. INT                  │ 'int' │ L148:C37 │ Palavras-chave
1011. IDENTIFIER           │ 'high' │ L148:C41 │ Identificadores
1012. RIGHT_PAREN          │ ')' │ L148:C45 │ Delimitadores
1013. LEFT_BRACE           │ '{' │ L148:C47 │ Delimitadores
1014. IF                   │ 'if' │ L149:C5 │ Palavras-chave
1015. LEFT_PAREN           │ '(' │ L149:C8 │ Delimitadores
1016. IDENTIFIER           │ 'low' │ L149:C9 │ Identificadores
1017. LESS_THAN            │ '<' │ L149:C13 │ Operadores
1018. IDENTIFIER           │ 'high' │ L149:C15 │ Identificadores
1019. RIGHT_PAREN          │ ')' │ L149:C19 │ Delimitadores
1020. LEFT_BRACE           │ '{' │ L149:C21 │ Delimitadores
1021. INT                  │ 'int' │ L150:C9 │ Palavras-chave
1022. IDENTIFIER           │ 'pi' │ L150:C13 │ Identificadores
1023. ASSIGN               │ '=' │ L150:C16 │ Operadores
1024. IDENTIFIER           │ 'partition' │ L150:C18 │ Identificadores
1025. LEFT_PAREN           │ '(' │ L150:C27 │ Delimitadores
1026. IDENTIFIER           │ 'arr' │ L150:C28 │ Identificadores
1027. COMMA                │ ',' │ L150:C31 │ Operadores
1028. IDENTIFIER           │ 'low' │ L150:C33 │ Identificadores
1029. COMMA                │ ',' │ L150:C36 │ Operadores
1030. IDENTIFIER           │ 'high' │ L150:C38 │ Identificadores
1031. RIGHT_PAREN          │ ')' │ L150:C42 │ Delimitadores
1032. SEMICOLON            │ ';' │ L150:C43 │ Pontuação
1033. IDENTIFIER           │ 'quick_sort' │ L151:C9 │ Identificadores
1034. LEFT_PAREN           │ '(' │ L151:C19 │ Delimitadores
1035. IDENTIFIER           │ 'arr' │ L151:C20 │ Identificadores
1036. COMMA                │ ',' │ L151:C23 │ Operadores
1037. IDENTIFIER           │ 'low' │ L151:C25 │ Identificadores
1038. COMMA                │ ',' │ L151:C28 │ Operadores
1039. IDENTIFIER           │ 'pi' │ L151:C30 │ Identificadores
1040. MINUS                │ '-' │ L151:C33 │ Operadores
1041. INTEGER_LITERAL      │ '1' │ L151:C35 │ Literais
1042. RIGHT_PAREN          │ ')' │ L151:C36 │ Delimitadores
1043. SEMICOLON            │ ';' │ L151:C37 │ Pontuação
1044. IDENTIFIER           │ 'quick_sort' │ L152:C9 │ Identificadores
1045. LEFT_PAREN           │ '(' │ L152:C19 │ Delimitadores
1046. IDENTIFIER           │ 'arr' │ L152:C20 │ Identificadores
1047. COMMA                │ ',' │ L152:C23 │ Operadores
1048. IDENTIFIER           │ 'pi' │ L152:C25 │ Identificadores
1049. PLUS                 │ '+' │ L152:C28 │ Operadores
1050. INTEGER_LITERAL      │ '1' │ L152:C30 │ Literais
1051. COMMA                │ ',' │ L152:C31 │ Operadores
1052. IDENTIFIER           │ 'high' │ L152:C33 │ Identificadores
1053. RIGHT_PAREN          │ ')' │ L152:C37 │ Delimitadores
1054. SEMICOLON            │ ';' │ L152:C38 │ Pontuação
1055. RIGHT_BRACE          │ '}' │ L153:C5 │ Delimitadores
1056. RIGHT_BRACE          │ '}' │ L154:C1 │ Delimitadores
1057. INT                  │ 'int' │ L156:C1 │ Palavras-chave
1058. IDENTIFIER           │ 'partition' │ L156:C5 │ Identificadores
1059. LEFT_PAREN           │ '(' │ L156:C14 │ Delimitadores
1060. INT                  │ 'int' │ L156:C15 │ Palavras-chave
1061. IDENTIFIER           │ 'arr' │ L156:C19 │ Identificadores
1062. LEFT_BRACKET         │ '[' │ L156:C22 │ Delimitadores
1063. RIGHT_BRACKET        │ ']' │ L156:C23 │ Delimitadores
1064. COMMA                │ ',' │ L156:C24 │ Operadores
1065. INT                  │ 'int' │ L156:C26 │ Palavras-chave
1066. IDENTIFIER           │ 'low' │ L156:C30 │ Identificadores
1067. COMMA                │ ',' │ L156:C33 │ Operadores
1068. INT                  │ 'int' │ L156:C35 │ Palavras-chave
1069. IDENTIFIER           │ 'high' │ L156:C39 │ Identificadores
1070. RIGHT_PAREN          │ ')' │ L156:C43 │ Delimitadores
1071. LEFT_BRACE           │ '{' │ L156:C45 │ Delimitadores
1072. INT                  │ 'int' │ L157:C5 │ Palavras-chave
1073. IDENTIFIER           │ 'pivot' │ L157:C9 │ Identificadores
1074. ASSIGN               │ '=' │ L157:C15 │ Operadores
1075. IDENTIFIER           │ 'arr' │ L157:C17 │ Identificadores
1076. LEFT_BRACKET         │ '[' │ L157:C20 │ Delimitadores
1077. IDENTIFIER           │ 'high' │ L157:C21 │ Identificadores
1078. RIGHT_BRACKET        │ ']' │ L157:C25 │ Delimitadores
1079. SEMICOLON            │ ';' │ L157:C26 │ Pontuação
1080. INT                  │ 'int' │ L158:C5 │ Palavras-chave
1081. IDENTIFIER           │ 'i' │ L158:C9 │ Identificadores
1082. ASSIGN               │ '=' │ L158:C11 │ Operadores
1083. LEFT_PAREN           │ '(' │ L158:C13 │ Delimitadores
1084. IDENTIFIER           │ 'low' │ L158:C14 │ Identificadores
1085. MINUS                │ '-' │ L158:C18 │ Operadores
1086. INTEGER_LITERAL      │ '1' │ L158:C20 │ Literais
1087. RIGHT_PAREN          │ ')' │ L158:C21 │ Delimitadores
1088. SEMICOLON            │ ';' │ L158:C22 │ Pontuação
1089. FOR                  │ 'for' │ L160:C5 │ Palavras-chave
1090. LEFT_PAREN           │ '(' │ L160:C9 │ Delimitadores
1091. INT                  │ 'int' │ L160:C10 │ Palavras-chave
1092. IDENTIFIER           │ 'j' │ L160:C14 │ Identificadores
1093. ASSIGN               │ '=' │ L160:C16 │ Operadores
1094. IDENTIFIER           │ 'low' │ L160:C18 │ Identificadores
1095. SEMICOLON            │ ';' │ L160:C21 │ Pontuação
1096. IDENTIFIER           │ 'j' │ L160:C23 │ Identificadores
1097. LESS_EQUAL           │ '<=' │ L160:C25 │ Operadores
1098. IDENTIFIER           │ 'high' │ L160:C28 │ Identificadores
1099. MINUS                │ '-' │ L160:C33 │ Operadores
1100. INTEGER_LITERAL      │ '1' │ L160:C35 │ Literais
1101. SEMICOLON            │ ';' │ L160:C36 │ Pontuação
1102. IDENTIFIER           │ 'j' │ L160:C38 │ Identificadores
1103. INCREMENT            │ '++' │ L160:C39 │ Operadores
1104. RIGHT_PAREN          │ ')' │ L160:C41 │ Delimitadores
1105. LEFT_BRACE           │ '{' │ L160:C43 │ Delimitadores
1106. IF                   │ 'if' │ L161:C9 │ Palavras-chave
1107. LEFT_PAREN           │ '(' │ L161:C12 │ Delimitadores
1108. IDENTIFIER           │ 'arr' │ L161:C13 │ Identificadores
1109. LEFT_BRACKET         │ '[' │ L161:C16 │ Delimitadores
1110. IDENTIFIER           │ 'j' │ L161:C17 │ Identificadores
1111. RIGHT_BRACKET        │ ']' │ L161:C18 │ Delimitadores
1112. LESS_THAN            │ '<' │ L161:C20 │ Operadores
1113. IDENTIFIER           │ 'pivot' │ L161:C22 │ Identificadores
1114. RIGHT_PAREN          │ ')' │ L161:C27 │ Delimitadores
1115. LEFT_BRACE           │ '{' │ L161:C29 │ Delimitadores
1116. IDENTIFIER           │ 'i' │ L162:C13 │ Identificadores
1117. INCREMENT            │ '++' │ L162:C14 │ Operadores
1118. SEMICOLON            │ ';' │ L162:C16 │ Pontuação
1119. INT                  │ 'int' │ L163:C13 │ Palavras-chave
1120. IDENTIFIER           │ 'temp' │ L163:C17 │ Identificadores
1121. ASSIGN               │ '=' │ L163:C22 │ Operadores
1122. IDENTIFIER           │ 'arr' │ L163:C24 │ Identificadores
1123. LEFT_BRACKET         │ '[' │ L163:C27 │ Delimitadores
1124. IDENTIFIER           │ 'i' │ L163:C28 │ Identificadores
1125. RIGHT_BRACKET        │ ']' │ L163:C29 │ Delimitadores
1126. SEMICOLON            │ ';' │ L163:C30 │ Pontuação
1127. IDENTIFIER           │ 'arr' │ L164:C13 │ Identificadores
1128. LEFT_BRACKET         │ '[' │ L164:C16 │ Delimitadores
1129. IDENTIFIER           │ 'i' │ L164:C17 │ Identificadores
1130. RIGHT_BRACKET        │ ']' │ L164:C18 │ Delimitadores
1131. ASSIGN               │ '=' │ L164:C20 │ Operadores
1132. IDENTIFIER           │ 'arr' │ L164:C22 │ Identificadores
1133. LEFT_BRACKET         │ '[' │ L164:C25 │ Delimitadores
1134. IDENTIFIER           │ 'j' │ L164:C26 │ Identificadores
1135. RIGHT_BRACKET        │ ']' │ L164:C27 │ Delimitadores
1136. SEMICOLON            │ ';' │ L164:C28 │ Pontuação
1137. IDENTIFIER           │ 'arr' │ L165:C13 │ Identificadores
1138. LEFT_BRACKET         │ '[' │ L165:C16 │ Delimitadores
1139. IDENTIFIER           │ 'j' │ L165:C17 │ Identificadores
1140. RIGHT_BRACKET        │ ']' │ L165:C18 │ Delimitadores
1141. ASSIGN               │ '=' │ L165:C20 │ Operadores
1142. IDENTIFIER           │ 'temp' │ L165:C22 │ Identificadores
1143. SEMICOLON            │ ';' │ L165:C26 │ Pontuação
1144. RIGHT_BRACE          │ '}' │ L166:C9 │ Delimitadores
1145. RIGHT_BRACE          │ '}' │ L167:C5 │ Delimitadores
1146. INT                  │ 'int' │ L169:C5 │ Palavras-chave
1147. IDENTIFIER           │ 'temp' │ L169:C9 │ Identificadores
1148. ASSIGN               │ '=' │ L169:C14 │ Operadores
1149. IDENTIFIER           │ 'arr' │ L169:C16 │ Identificadores
1150. LEFT_BRACKET         │ '[' │ L169:C19 │ Delimitadores
1151. IDENTIFIER           │ 'i' │ L169:C20 │ Identificadores
1152. PLUS                 │ '+' │ L169:C22 │ Operadores
1153. INTEGER_LITERAL      │ '1' │ L169:C24 │ Literais
1154. RIGHT_BRACKET        │ ']' │ L169:C25 │ Delimitadores
1155. SEMICOLON            │ ';' │ L169:C26 │ Pontuação
1156. IDENTIFIER           │ 'arr' │ L170:C5 │ Identificadores
1157. LEFT_BRACKET         │ '[' │ L170:C8 │ Delimitadores
1158. IDENTIFIER           │ 'i' │ L170:C9 │ Identificadores
1159. PLUS                 │ '+' │ L170:C11 │ Operadores
1160. INTEGER_LITERAL      │ '1' │ L170:C13 │ Literais
1161. RIGHT_BRACKET        │ ']' │ L170:C14 │ Delimitadores
1162. ASSIGN               │ '=' │ L170:C16 │ Operadores
1163. IDENTIFIER           │ 'arr' │ L170:C18 │ Identificadores
1164. LEFT_BRACKET         │ '[' │ L170:C21 │ Delimitadores
1165. IDENTIFIER           │ 'high' │ L170:C22 │ Identificadores
1166. RIGHT_BRACKET        │ ']' │ L170:C26 │ Delimitadores
1167. SEMICOLON            │ ';' │ L170:C27 │ Pontuação
1168. IDENTIFIER           │ 'arr' │ L171:C5 │ Identificadores
1169. LEFT_BRACKET         │ '[' │ L171:C8 │ Delimitadores
1170. IDENTIFIER           │ 'high' │ L171:C9 │ Identificadores
1171. RIGHT_BRACKET        │ ']' │ L171:C13 │ Delimitadores
1172. ASSIGN               │ '=' │ L171:C15 │ Operadores
1173. IDENTIFIER           │ 'temp' │ L171:C17 │ Identificadores
1174. SEMICOLON            │ ';' │ L171:C21 │ Pontuação
1175. RETURN               │ 'return' │ L173:C5 │ Palavras-chave
1176. LEFT_PAREN           │ '(' │ L173:C12 │ Delimitadores
1177. IDENTIFIER           │ 'i' │ L173:C13 │ Identificadores
1178. PLUS                 │ '+' │ L173:C15 │ Operadores
1179. INTEGER_LITERAL      │ '1' │ L173:C17 │ Literais
1180. RIGHT_PAREN          │ ')' │ L173:C18 │ Delimitadores
1181. SEMICOLON            │ ';' │ L173:C19 │ Pontuação
1182. RIGHT_BRACE          │ '}' │ L174:C1 │ Delimitadores
1183. INT                  │ 'int' │ L177:C1 │ Palavras-chave
1184. IDENTIFIER           │ 'main' │ L177:C5 │ Identificadores
1185. LEFT_PAREN           │ '(' │ L177:C9 │ Delimitadores
1186. VOID                 │ 'void' │ L177:C10 │ Palavras-chave
1187. RIGHT_PAREN          │ ')' │ L177:C14 │ Delimitadores
1188. LEFT_BRACE           │ '{' │ L177:C16 │ Delimitadores
1189. IDENTIFIER           │ 'printf' │ L178:C5 │ Identificadores
1190. LEFT_PAREN           │ '(' │ L178:C11 │ Delimitadores
1191. STRING_LITERAL       │ '"Starting performance test...\n"' │ L178:C12 │ Literais
1192. RIGHT_PAREN          │ ')' │ L178:C44 │ Delimitadores
1193. SEMICOLON            │ ';' │ L178:C45 │ Pontuação
1194. INT                  │ 'int' │ L181:C5 │ Palavras-chave
1195. IDENTIFIER           │ 'sum' │ L181:C9 │ Identificadores
1196. ASSIGN               │ '=' │ L181:C13 │ Operadores
1197. INTEGER_LITERAL      │ '0' │ L181:C15 │ Literais
1198. SEMICOLON            │ ';' │ L181:C16 │ Pontuação
1199. FOR                  │ 'for' │ L182:C5 │ Palavras-chave
1200. LEFT_PAREN           │ '(' │ L182:C9 │ Delimitadores
1201. INT                  │ 'int' │ L182:C10 │ Palavras-chave
1202. IDENTIFIER           │ 'i' │ L182:C14 │ Identificadores
1203. ASSIGN               │ '=' │ L182:C16 │ Operadores
1204. INTEGER_LITERAL      │ '0' │ L182:C18 │ Literais
1205. SEMICOLON            │ ';' │ L182:C19 │ Pontuação
1206. IDENTIFIER           │ 'i' │ L182:C21 │ Identificadores
1207. LESS_THAN            │ '<' │ L182:C23 │ Operadores
1208. INTEGER_LITERAL      │ '1000' │ L182:C25 │ Literais
1209. SEMICOLON            │ ';' │ L182:C29 │ Pontuação
1210. IDENTIFIER           │ 'i' │ L182:C31 │ Identificadores
1211. INCREMENT            │ '++' │ L182:C32 │ Operadores
1212. RIGHT_PAREN          │ ')' │ L182:C34 │ Delimitadores
1213. LEFT_BRACE           │ '{' │ L182:C36 │ Delimitadores
1214. IDENTIFIER           │ 'sum' │ L183:C9 │ Identificadores
1215. PLUS_ASSIGN          │ '+=' │ L183:C13 │ Operadores
1216. IDENTIFIER           │ 'large_array_1' │ L183:C16 │ Identificadores
1217. LEFT_BRACKET         │ '[' │ L183:C29 │ Delimitadores
1218. IDENTIFIER           │ 'i' │ L183:C30 │ Identificadores
1219. RIGHT_BRACKET        │ ']' │ L183:C31 │ Delimitadores
1220. SEMICOLON            │ ';' │ L183:C32 │ Pontuação
1221. RIGHT_BRACE          │ '}' │ L184:C5 │ Delimitadores
1222. IDENTIFIER           │ 'printf' │ L185:C5 │ Identificadores
1223. LEFT_PAREN           │ '(' │ L185:C11 │ Delimitadores
1224. STRING_LITERAL       │ '"Sum of large_array_1: %d\n"' │ L185:C12 │ Literais
1225. COMMA                │ ',' │ L185:C40 │ Operadores
1226. IDENTIFIER           │ 'sum' │ L185:C42 │ Identificadores
1227. RIGHT_PAREN          │ ')' │ L185:C45 │ Delimitadores
1228. SEMICOLON            │ ';' │ L185:C46 │ Pontuação
1229. DOUBLE               │ 'double' │ L187:C5 │ Palavras-chave
1230. IDENTIFIER           │ 'double_sum' │ L187:C12 │ Identificadores
1231. ASSIGN               │ '=' │ L187:C23 │ Operadores
1232. FLOAT_LITERAL        │ '0.0' │ L187:C25 │ Literais
1233. SEMICOLON            │ ';' │ L187:C28 │ Pontuação
1234. FOR                  │ 'for' │ L188:C5 │ Palavras-chave
1235. LEFT_PAREN           │ '(' │ L188:C9 │ Delimitadores
1236. INT                  │ 'int' │ L188:C10 │ Palavras-chave
1237. IDENTIFIER           │ 'i' │ L188:C14 │ Identificadores
1238. ASSIGN               │ '=' │ L188:C16 │ Operadores
1239. INTEGER_LITERAL      │ '0' │ L188:C18 │ Literais
1240. SEMICOLON            │ ';' │ L188:C19 │ Pontuação
1241. IDENTIFIER           │ 'i' │ L188:C21 │ Identificadores
1242. LESS_THAN            │ '<' │ L188:C23 │ Operadores
1243. INTEGER_LITERAL      │ '500' │ L188:C25 │ Literais
1244. SEMICOLON            │ ';' │ L188:C28 │ Pontuação
1245. IDENTIFIER           │ 'i' │ L188:C30 │ Identificadores
1246. INCREMENT            │ '++' │ L188:C31 │ Operadores
1247. RIGHT_PAREN          │ ')' │ L188:C33 │ Delimitadores
1248. LEFT_BRACE           │ '{' │ L188:C35 │ Delimitadores
1249. IDENTIFIER           │ 'double_sum' │ L189:C9 │ Identificadores
1250. PLUS_ASSIGN          │ '+=' │ L189:C20 │ Operadores
1251. IDENTIFIER           │ 'large_array_2' │ L189:C23 │ Identificadores
1252. LEFT_BRACKET         │ '[' │ L189:C36 │ Delimitadores
1253. IDENTIFIER           │ 'i' │ L189:C37 │ Identificadores
1254. RIGHT_BRACKET        │ ']' │ L189:C38 │ Delimitadores
1255. SEMICOLON            │ ';' │ L189:C39 │ Pontuação
1256. RIGHT_BRACE          │ '}' │ L190:C5 │ Delimitadores
1257. IDENTIFIER           │ 'printf' │ L191:C5 │ Identificadores
1258. LEFT_PAREN           │ '(' │ L191:C11 │ Delimitadores
1259. STRING_LITERAL       │ '"Sum of large_array_2: %f\n"' │ L191:C12 │ Literais
1260. COMMA                │ ',' │ L191:C40 │ Operadores
1261. IDENTIFIER           │ 'double_sum' │ L191:C42 │ Identificadores
1262. RIGHT_PAREN          │ ')' │ L191:C52 │ Delimitadores
1263. SEMICOLON            │ ';' │ L191:C53 │ Pontuação
1264. STRUCT               │ 'struct' │ L194:C5 │ Palavras-chave
1265. IDENTIFIER           │ 'ComplexStruct' │ L194:C12 │ Identificadores
1266. IDENTIFIER           │ 'objects' │ L194:C26 │ Identificadores
1267. LEFT_BRACKET         │ '[' │ L194:C33 │ Delimitadores
1268. INTEGER_LITERAL      │ '100' │ L194:C34 │ Literais
1269. RIGHT_BRACKET        │ ']' │ L194:C37 │ Delimitadores
1270. SEMICOLON            │ ';' │ L194:C38 │ Pontuação
1271. FOR                  │ 'for' │ L195:C5 │ Palavras-chave
1272. LEFT_PAREN           │ '(' │ L195:C9 │ Delimitadores
1273. INT                  │ 'int' │ L195:C10 │ Palavras-chave
1274. IDENTIFIER           │ 'i' │ L195:C14 │ Identificadores
1275. ASSIGN               │ '=' │ L195:C16 │ Operadores
1276. INTEGER_LITERAL      │ '0' │ L195:C18 │ Literais
1277. SEMICOLON            │ ';' │ L195:C19 │ Pontuação
1278. IDENTIFIER           │ 'i' │ L195:C21 │ Identificadores
1279. LESS_THAN            │ '<' │ L195:C23 │ Operadores
1280. INTEGER_LITERAL      │ '100' │ L195:C25 │ Literais
1281. SEMICOLON            │ ';' │ L195:C28 │ Pontuação
1282. IDENTIFIER           │ 'i' │ L195:C30 │ Identificadores
1283. INCREMENT            │ '++' │ L195:C31 │ Operadores
1284. RIGHT_PAREN          │ ')' │ L195:C33 │ Delimitadores
1285. LEFT_BRACE           │ '{' │ L195:C35 │ Delimitadores
1286. IDENTIFIER           │ 'objects' │ L196:C9 │ Identificadores
1287. LEFT_BRACKET         │ '[' │ L196:C16 │ Delimitadores
1288. IDENTIFIER           │ 'i' │ L196:C17 │ Identificadores
1289. RIGHT_BRACKET        │ ']' │ L196:C18 │ Delimitadores
1290. DOT                  │ '.' │ L196:C19 │ Operadores
1291. IDENTIFIER           │ 'id' │ L196:C20 │ Identificadores
1292. ASSIGN               │ '=' │ L196:C23 │ Operadores
1293. IDENTIFIER           │ 'i' │ L196:C25 │ Identificadores
1294. SEMICOLON            │ ';' │ L196:C26 │ Pontuação
1295. IDENTIFIER           │ 'sprintf' │ L197:C9 │ Identificadores
1296. LEFT_PAREN           │ '(' │ L197:C16 │ Delimitadores
1297. IDENTIFIER           │ 'objects' │ L197:C17 │ Identificadores
1298. LEFT_BRACKET         │ '[' │ L197:C24 │ Delimitadores
1299. IDENTIFIER           │ 'i' │ L197:C25 │ Identificadores
1300. RIGHT_BRACKET        │ ']' │ L197:C26 │ Delimitadores
1301. DOT                  │ '.' │ L197:C27 │ Operadores
1302. IDENTIFIER           │ 'name' │ L197:C28 │ Identificadores
1303. COMMA                │ ',' │ L197:C32 │ Operadores
1304. STRING_LITERAL       │ '"Object_%d"' │ L197:C34 │ Literais
1305. COMMA                │ ',' │ L197:C45 │ Operadores
1306. IDENTIFIER           │ 'i' │ L197:C47 │ Identificadores
1307. RIGHT_PAREN          │ ')' │ L197:C48 │ Delimitadores
1308. SEMICOLON            │ ';' │ L197:C49 │ Pontuação
1309. IDENTIFIER           │ 'objects' │ L198:C9 │ Identificadores
1310. LEFT_BRACKET         │ '[' │ L198:C16 │ Delimitadores
1311. IDENTIFIER           │ 'i' │ L198:C17 │ Identificadores
1312. RIGHT_BRACKET        │ ']' │ L198:C18 │ Delimitadores
1313. DOT                  │ '.' │ L198:C19 │ Operadores
1314. IDENTIFIER           │ 'position' │ L198:C20 │ Identificadores
1315. DOT                  │ '.' │ L198:C28 │ Operadores
1316. IDENTIFIER           │ 'x' │ L198:C29 │ Identificadores
1317. ASSIGN               │ '=' │ L198:C31 │ Operadores
1318. IDENTIFIER           │ 'i' │ L198:C33 │ Identificadores
1319. MULTIPLY             │ '*' │ L198:C35 │ Operadores
1320. FLOAT_LITERAL        │ '1.0' │ L198:C37 │ Literais
1321. SEMICOLON            │ ';' │ L198:C40 │ Pontuação
1322. IDENTIFIER           │ 'objects' │ L199:C9 │ Identificadores
1323. LEFT_BRACKET         │ '[' │ L199:C16 │ Delimitadores
1324. IDENTIFIER           │ 'i' │ L199:C17 │ Identificadores
1325. RIGHT_BRACKET        │ ']' │ L199:C18 │ Delimitadores
1326. DOT                  │ '.' │ L199:C19 │ Operadores
1327. IDENTIFIER           │ 'position' │ L199:C20 │ Identificadores
1328. DOT                  │ '.' │ L199:C28 │ Operadores
1329. IDENTIFIER           │ 'y' │ L199:C29 │ Identificadores
1330. ASSIGN               │ '=' │ L199:C31 │ Operadores
1331. IDENTIFIER           │ 'i' │ L199:C33 │ Identificadores
1332. MULTIPLY             │ '*' │ L199:C35 │ Operadores
1333. FLOAT_LITERAL        │ '2.0' │ L199:C37 │ Literais
1334. SEMICOLON            │ ';' │ L199:C40 │ Pontuação
1335. IDENTIFIER           │ 'objects' │ L200:C9 │ Identificadores
1336. LEFT_BRACKET         │ '[' │ L200:C16 │ Delimitadores
1337. IDENTIFIER           │ 'i' │ L200:C17 │ Identificadores
1338. RIGHT_BRACKET        │ ']' │ L200:C18 │ Delimitadores
1339. DOT                  │ '.' │ L200:C19 │ Operadores
1340. IDENTIFIER           │ 'position' │ L200:C20 │ Identificadores
1341. DOT                  │ '.' │ L200:C28 │ Operadores
1342. IDENTIFIER           │ 'z' │ L200:C29 │ Identificadores
1343. ASSIGN               │ '=' │ L200:C31 │ Operadores
1344. IDENTIFIER           │ 'i' │ L200:C33 │ Identificadores
1345. MULTIPLY             │ '*' │ L200:C35 │ Operadores
1346. FLOAT_LITERAL        │ '3.0' │ L200:C37 │ Literais
1347. SEMICOLON            │ ';' │ L200:C40 │ Pontuação
1348. IDENTIFIER           │ 'objects' │ L201:C9 │ Identificadores
1349. LEFT_BRACKET         │ '[' │ L201:C16 │ Delimitadores
1350. IDENTIFIER           │ 'i' │ L201:C17 │ Identificadores
1351. RIGHT_BRACKET        │ ']' │ L201:C18 │ Delimitadores
1352. DOT                  │ '.' │ L201:C19 │ Operadores
1353. IDENTIFIER           │ 'velocity' │ L201:C20 │ Identificadores
1354. DOT                  │ '.' │ L201:C28 │ Operadores
1355. IDENTIFIER           │ 'x' │ L201:C29 │ Identificadores
1356. ASSIGN               │ '=' │ L201:C31 │ Operadores
1357. IDENTIFIER           │ 'i' │ L201:C33 │ Identificadores
1358. MULTIPLY             │ '*' │ L201:C35 │ Operadores
1359. FLOAT_LITERAL        │ '0.1' │ L201:C37 │ Literais
1360. SEMICOLON            │ ';' │ L201:C40 │ Pontuação
1361. IDENTIFIER           │ 'objects' │ L202:C9 │ Identificadores
1362. LEFT_BRACKET         │ '[' │ L202:C16 │ Delimitadores
1363. IDENTIFIER           │ 'i' │ L202:C17 │ Identificadores
1364. RIGHT_BRACKET        │ ']' │ L202:C18 │ Delimitadores
1365. DOT                  │ '.' │ L202:C19 │ Operadores
1366. IDENTIFIER           │ 'velocity' │ L202:C20 │ Identificadores
1367. DOT                  │ '.' │ L202:C28 │ Operadores
1368. IDENTIFIER           │ 'y' │ L202:C29 │ Identificadores
1369. ASSIGN               │ '=' │ L202:C31 │ Operadores
1370. IDENTIFIER           │ 'i' │ L202:C33 │ Identificadores
1371. MULTIPLY             │ '*' │ L202:C35 │ Operadores
1372. FLOAT_LITERAL        │ '0.2' │ L202:C37 │ Literais
1373. SEMICOLON            │ ';' │ L202:C40 │ Pontuação
1374. IDENTIFIER           │ 'objects' │ L203:C9 │ Identificadores
1375. LEFT_BRACKET         │ '[' │ L203:C16 │ Delimitadores
1376. IDENTIFIER           │ 'i' │ L203:C17 │ Identificadores
1377. RIGHT_BRACKET        │ ']' │ L203:C18 │ Delimitadores
1378. DOT                  │ '.' │ L203:C19 │ Operadores
1379. IDENTIFIER           │ 'velocity' │ L203:C20 │ Identificadores
1380. DOT                  │ '.' │ L203:C28 │ Operadores
1381. IDENTIFIER           │ 'z' │ L203:C29 │ Identificadores
1382. ASSIGN               │ '=' │ L203:C31 │ Operadores
1383. IDENTIFIER           │ 'i' │ L203:C33 │ Identificadores
1384. MULTIPLY             │ '*' │ L203:C35 │ Operadores
1385. FLOAT_LITERAL        │ '0.3' │ L203:C37 │ Literais
1386. SEMICOLON            │ ';' │ L203:C40 │ Pontuação
1387. IDENTIFIER           │ 'objects' │ L204:C9 │ Identificadores
1388. LEFT_BRACKET         │ '[' │ L204:C16 │ Delimitadores
1389. IDENTIFIER           │ 'i' │ L204:C17 │ Identificadores
1390. RIGHT_BRACKET        │ ']' │ L204:C18 │ Delimitadores
1391. DOT                  │ '.' │ L204:C19 │ Operadores
1392. IDENTIFIER           │ 'active' │ L204:C20 │ Identificadores
1393. ASSIGN               │ '=' │ L204:C27 │ Operadores
1394. LEFT_PAREN           │ '(' │ L204:C29 │ Delimitadores
1395. IDENTIFIER           │ 'i' │ L204:C30 │ Identificadores
1396. MODULO               │ '%' │ L204:C32 │ Operadores
1397. INTEGER_LITERAL      │ '2' │ L204:C34 │ Literais
1398. EQUAL                │ '==' │ L204:C36 │ Operadores
1399. INTEGER_LITERAL      │ '0' │ L204:C39 │ Literais
1400. RIGHT_PAREN          │ ')' │ L204:C40 │ Delimitadores
1401. SEMICOLON            │ ';' │ L204:C41 │ Pontuação
1402. IDENTIFIER           │ 'objects' │ L205:C9 │ Identificadores
1403. LEFT_BRACKET         │ '[' │ L205:C16 │ Delimitadores
1404. IDENTIFIER           │ 'i' │ L205:C17 │ Identificadores
1405. RIGHT_BRACKET        │ ']' │ L205:C18 │ Delimitadores
1406. DOT                  │ '.' │ L205:C19 │ Operadores
1407. IDENTIFIER           │ 'timestamp' │ L205:C20 │ Identificadores
1408. ASSIGN               │ '=' │ L205:C30 │ Operadores
1409. IDENTIFIER           │ 'time' │ L205:C32 │ Identificadores
1410. LEFT_PAREN           │ '(' │ L205:C36 │ Delimitadores
1411. IDENTIFIER           │ 'NULL' │ L205:C37 │ Identificadores
1412. RIGHT_PAREN          │ ')' │ L205:C41 │ Delimitadores
1413. PLUS                 │ '+' │ L205:C43 │ Operadores
1414. IDENTIFIER           │ 'i' │ L205:C45 │ Identificadores
1415. SEMICOLON            │ ';' │ L205:C46 │ Pontuação
1416. FOR                  │ 'for' │ L207:C9 │ Palavras-chave
1417. LEFT_PAREN           │ '(' │ L207:C13 │ Delimitadores
1418. INT                  │ 'int' │ L207:C14 │ Palavras-chave
1419. IDENTIFIER           │ 'j' │ L207:C18 │ Identificadores
1420. ASSIGN               │ '=' │ L207:C20 │ Operadores
1421. INTEGER_LITERAL      │ '0' │ L207:C22 │ Literais
1422. SEMICOLON            │ ';' │ L207:C23 │ Pontuação
1423. IDENTIFIER           │ 'j' │ L207:C25 │ Identificadores
1424. LESS_THAN            │ '<' │ L207:C27 │ Operadores
1425. INTEGER_LITERAL      │ '100' │ L207:C29 │ Literais
1426. SEMICOLON            │ ';' │ L207:C32 │ Pontuação
1427. IDENTIFIER           │ 'j' │ L207:C34 │ Identificadores
1428. INCREMENT            │ '++' │ L207:C35 │ Operadores
1429. RIGHT_PAREN          │ ')' │ L207:C37 │ Delimitadores
1430. LEFT_BRACE           │ '{' │ L207:C39 │ Delimitadores
1431. IDENTIFIER           │ 'objects' │ L208:C13 │ Identificadores
1432. LEFT_BRACKET         │ '[' │ L208:C20 │ Delimitadores
1433. IDENTIFIER           │ 'i' │ L208:C21 │ Identificadores
1434. RIGHT_BRACKET        │ ']' │ L208:C22 │ Delimitadores
1435. DOT                  │ '.' │ L208:C23 │ Operadores
1436. IDENTIFIER           │ 'data' │ L208:C24 │ Identificadores
1437. LEFT_BRACKET         │ '[' │ L208:C28 │ Delimitadores
1438. IDENTIFIER           │ 'j' │ L208:C29 │ Identificadores
1439. RIGHT_BRACKET        │ ']' │ L208:C30 │ Delimitadores
1440. ASSIGN               │ '=' │ L208:C32 │ Operadores
1441. IDENTIFIER           │ 'sin' │ L208:C34 │ Identificadores
1442. LEFT_PAREN           │ '(' │ L208:C37 │ Delimitadores
1443. IDENTIFIER           │ 'i' │ L208:C38 │ Identificadores
1444. MULTIPLY             │ '*' │ L208:C40 │ Operadores
1445. IDENTIFIER           │ 'j' │ L208:C42 │ Identificadores
1446. MULTIPLY             │ '*' │ L208:C44 │ Operadores
1447. FLOAT_LITERAL        │ '0.01' │ L208:C46 │ Literais
1448. RIGHT_PAREN          │ ')' │ L208:C50 │ Delimitadores
1449. SEMICOLON            │ ';' │ L208:C51 │ Pontuação
1450. RIGHT_BRACE          │ '}' │ L209:C9 │ Delimitadores
1451. FOR                  │ 'for' │ L212:C9 │ Palavras-chave
1452. LEFT_PAREN           │ '(' │ L212:C13 │ Delimitadores
1453. INT                  │ 'int' │ L212:C14 │ Palavras-chave
1454. IDENTIFIER           │ 'row' │ L212:C18 │ Identificadores
1455. ASSIGN               │ '=' │ L212:C22 │ Operadores
1456. INTEGER_LITERAL      │ '0' │ L212:C24 │ Literais
1457. SEMICOLON            │ ';' │ L212:C25 │ Pontuação
1458. IDENTIFIER           │ 'row' │ L212:C27 │ Identificadores
1459. LESS_THAN            │ '<' │ L212:C31 │ Operadores
1460. INTEGER_LITERAL      │ '4' │ L212:C33 │ Literais
1461. SEMICOLON            │ ';' │ L212:C34 │ Pontuação
1462. IDENTIFIER           │ 'row' │ L212:C36 │ Identificadores
1463. INCREMENT            │ '++' │ L212:C39 │ Operadores
1464. RIGHT_PAREN          │ ')' │ L212:C41 │ Delimitadores
1465. LEFT_BRACE           │ '{' │ L212:C43 │ Delimitadores
1466. FOR                  │ 'for' │ L213:C13 │ Palavras-chave
1467. LEFT_PAREN           │ '(' │ L213:C17 │ Delimitadores
1468. INT                  │ 'int' │ L213:C18 │ Palavras-chave
1469. IDENTIFIER           │ 'col' │ L213:C22 │ Identificadores
1470. ASSIGN               │ '=' │ L213:C26 │ Operadores
1471. INTEGER_LITERAL      │ '0' │ L213:C28 │ Literais
1472. SEMICOLON            │ ';' │ L213:C29 │ Pontuação
1473. IDENTIFIER           │ 'col' │ L213:C31 │ Identificadores
1474. LESS_THAN            │ '<' │ L213:C35 │ Operadores
1475. INTEGER_LITERAL      │ '4' │ L213:C37 │ Literais
1476. SEMICOLON            │ ';' │ L213:C38 │ Pontuação
1477. IDENTIFIER           │ 'col' │ L213:C40 │ Identificadores
1478. INCREMENT            │ '++' │ L213:C43 │ Operadores
1479. RIGHT_PAREN          │ ')' │ L213:C45 │ Delimitadores
1480. LEFT_BRACE           │ '{' │ L213:C47 │ Delimitadores
1481. IDENTIFIER           │ 'objects' │ L214:C17 │ Identificadores
1482. LEFT_BRACKET         │ '[' │ L214:C24 │ Delimitadores
1483. IDENTIFIER           │ 'i' │ L214:C25 │ Identificadores
1484. RIGHT_BRACKET        │ ']' │ L214:C26 │ Delimitadores
1485. DOT                  │ '.' │ L214:C27 │ Operadores
1486. IDENTIFIER           │ 'transform' │ L214:C28 │ Identificadores
1487. DOT                  │ '.' │ L214:C37 │ Operadores
1488. IDENTIFIER           │ 'm' │ L214:C38 │ Identificadores
1489. LEFT_BRACKET         │ '[' │ L214:C39 │ Delimitadores
1490. IDENTIFIER           │ 'row' │ L214:C40 │ Identificadores
1491. RIGHT_BRACKET        │ ']' │ L214:C43 │ Delimitadores
1492. LEFT_BRACKET         │ '[' │ L214:C44 │ Delimitadores
1493. IDENTIFIER           │ 'col' │ L214:C45 │ Identificadores
1494. RIGHT_BRACKET        │ ']' │ L214:C48 │ Delimitadores
1495. ASSIGN               │ '=' │ L214:C50 │ Operadores
1496. LEFT_PAREN           │ '(' │ L214:C52 │ Delimitadores
1497. IDENTIFIER           │ 'row' │ L214:C53 │ Identificadores
1498. EQUAL                │ '==' │ L214:C57 │ Operadores
1499. IDENTIFIER           │ 'col' │ L214:C60 │ Identificadores
1500. RIGHT_PAREN          │ ')' │ L214:C63 │ Delimitadores
1501. CONDITIONAL          │ '?' │ L214:C65 │ Operadores
1502. FLOAT_LITERAL        │ '1.0' │ L214:C67 │ Literais
1503. COLON                │ ':' │ L214:C71 │ Operadores
1504. FLOAT_LITERAL        │ '0.0' │ L214:C73 │ Literais
1505. SEMICOLON            │ ';' │ L214:C76 │ Pontuação
1506. RIGHT_BRACE          │ '}' │ L215:C13 │ Delimitadores
1507. RIGHT_BRACE          │ '}' │ L216:C9 │ Delimitadores
1508. RIGHT_BRACE          │ '}' │ L217:C5 │ Delimitadores
1509. INT                  │ 'int' │ L220:C5 │ Palavras-chave
1510. IDENTIFIER           │ 'result1' │ L220:C9 │ Identificadores
1511. ASSIGN               │ '=' │ L220:C17 │ Operadores
1512. IDENTIFIER           │ 'complex_function_1' │ L220:C19 │ Identificadores
1513. LEFT_PAREN           │ '(' │ L220:C37 │ Delimitadores
1514. INTEGER_LITERAL      │ '1' │ L220:C38 │ Literais
1515. COMMA                │ ',' │ L220:C39 │ Operadores
1516. INTEGER_LITERAL      │ '2' │ L220:C41 │ Literais
1517. COMMA                │ ',' │ L220:C42 │ Operadores
1518. INTEGER_LITERAL      │ '3' │ L220:C44 │ Literais
1519. COMMA                │ ',' │ L220:C45 │ Operadores
1520. INTEGER_LITERAL      │ '4' │ L220:C47 │ Literais
1521. COMMA                │ ',' │ L220:C48 │ Operadores
1522. INTEGER_LITERAL      │ '5' │ L220:C50 │ Literais
1523. COMMA                │ ',' │ L220:C51 │ Operadores
1524. INTEGER_LITERAL      │ '6' │ L220:C53 │ Literais
1525. COMMA                │ ',' │ L220:C54 │ Operadores
1526. INTEGER_LITERAL      │ '7' │ L220:C56 │ Literais
1527. COMMA                │ ',' │ L220:C57 │ Operadores
1528. INTEGER_LITERAL      │ '8' │ L220:C59 │ Literais
1529. COMMA                │ ',' │ L220:C60 │ Operadores
1530. INTEGER_LITERAL      │ '9' │ L220:C62 │ Literais
1531. COMMA                │ ',' │ L220:C63 │ Operadores
1532. INTEGER_LITERAL      │ '10' │ L220:C65 │ Literais
1533. RIGHT_PAREN          │ ')' │ L220:C67 │ Delimitadores
1534. SEMICOLON            │ ';' │ L220:C68 │ Pontuação
1535. IDENTIFIER           │ 'printf' │ L221:C5 │ Identificadores
1536. LEFT_PAREN           │ '(' │ L221:C11 │ Delimitadores
1537. STRING_LITERAL       │ '"Complex function 1 result: %d\n"' │ L221:C12 │ Literais
1538. COMMA                │ ',' │ L221:C45 │ Operadores
1539. IDENTIFIER           │ 'result1' │ L221:C47 │ Identificadores
1540. RIGHT_PAREN          │ ')' │ L221:C54 │ Delimitadores
1541. SEMICOLON            │ ';' │ L221:C55 │ Pontuação
1542. DOUBLE               │ 'double' │ L223:C5 │ Palavras-chave
1543. IDENTIFIER           │ 'result2' │ L223:C12 │ Identificadores
1544. ASSIGN               │ '=' │ L223:C20 │ Operadores
1545. IDENTIFIER           │ 'complex_function_2' │ L223:C22 │ Identificadores
1546. LEFT_PAREN           │ '(' │ L223:C40 │ Delimitadores
1547. FLOAT_LITERAL        │ '1.0' │ L223:C41 │ Literais
1548. COMMA                │ ',' │ L223:C44 │ Operadores
1549. FLOAT_LITERAL        │ '2.0' │ L223:C46 │ Literais
1550. COMMA                │ ',' │ L223:C49 │ Operadores
1551. FLOAT_LITERAL        │ '3.0' │ L223:C51 │ Literais
1552. COMMA                │ ',' │ L223:C54 │ Operadores
1553. FLOAT_LITERAL        │ '4.0' │ L223:C56 │ Literais
1554. COMMA                │ ',' │ L223:C59 │ Operadores
1555. FLOAT_LITERAL        │ '5.0' │ L223:C61 │ Literais
1556. COMMA                │ ',' │ L223:C64 │ Operadores
1557. FLOAT_LITERAL        │ '6.0' │ L223:C66 │ Literais
1558. COMMA                │ ',' │ L223:C69 │ Operadores
1559. FLOAT_LITERAL        │ '7.0' │ L224:C40 │ Literais
1560. COMMA                │ ',' │ L224:C43 │ Operadores
1561. FLOAT_LITERAL        │ '8.0' │ L224:C45 │ Literais
1562. COMMA                │ ',' │ L224:C48 │ Operadores
1563. FLOAT_LITERAL        │ '9.0' │ L224:C50 │ Literais
1564. COMMA                │ ',' │ L224:C53 │ Operadores
1565. FLOAT_LITERAL        │ '10.0' │ L224:C55 │ Literais
1566. COMMA                │ ',' │ L224:C59 │ Operadores
1567. FLOAT_LITERAL        │ '11.0' │ L224:C61 │ Literais
1568. COMMA                │ ',' │ L224:C65 │ Operadores
1569. FLOAT_LITERAL        │ '12.0' │ L224:C67 │ Literais
1570. RIGHT_PAREN          │ ')' │ L224:C71 │ Delimitadores
1571. SEMICOLON            │ ';' │ L224:C72 │ Pontuação
1572. IDENTIFIER           │ 'printf' │ L225:C5 │ Identificadores
1573. LEFT_PAREN           │ '(' │ L225:C11 │ Delimitadores
1574. STRING_LITERAL       │ '"Complex function 2 result: %f\n"' │ L225:C12 │ Literais
1575. COMMA                │ ',' │ L225:C45 │ Operadores
1576. IDENTIFIER           │ 'result2' │ L225:C47 │ Identificadores
1577. RIGHT_PAREN          │ ')' │ L225:C54 │ Delimitadores
1578. SEMICOLON            │ ';' │ L225:C55 │ Pontuação
1579. DOUBLE               │ 'double' │ L228:C5 │ Palavras-chave
1580. IDENTIFIER           │ 'matrix_a' │ L228:C12 │ Identificadores
1581. LEFT_BRACKET         │ '[' │ L228:C20 │ Delimitadores
1582. INTEGER_LITERAL      │ '4' │ L228:C21 │ Literais
1583. RIGHT_BRACKET        │ ']' │ L228:C22 │ Delimitadores
1584. LEFT_BRACKET         │ '[' │ L228:C23 │ Delimitadores
1585. INTEGER_LITERAL      │ '4' │ L228:C24 │ Literais
1586. RIGHT_BRACKET        │ ']' │ L228:C25 │ Delimitadores
1587. ASSIGN               │ '=' │ L228:C27 │ Operadores
1588. LEFT_BRACE           │ '{' │ L228:C29 │ Delimitadores
1589. LEFT_BRACE           │ '{' │ L229:C9 │ Delimitadores
1590. FLOAT_LITERAL        │ '1.0' │ L229:C10 │ Literais
1591. COMMA                │ ',' │ L229:C13 │ Operadores
1592. FLOAT_LITERAL        │ '2.0' │ L229:C15 │ Literais
1593. COMMA                │ ',' │ L229:C18 │ Operadores
1594. FLOAT_LITERAL        │ '3.0' │ L229:C20 │ Literais
1595. COMMA                │ ',' │ L229:C23 │ Operadores
1596. FLOAT_LITERAL        │ '4.0' │ L229:C25 │ Literais
1597. RIGHT_BRACE          │ '}' │ L229:C28 │ Delimitadores
1598. COMMA                │ ',' │ L229:C29 │ Operadores
1599. LEFT_BRACE           │ '{' │ L230:C9 │ Delimitadores
1600. FLOAT_LITERAL        │ '5.0' │ L230:C10 │ Literais
1601. COMMA                │ ',' │ L230:C13 │ Operadores
1602. FLOAT_LITERAL        │ '6.0' │ L230:C15 │ Literais
1603. COMMA                │ ',' │ L230:C18 │ Operadores
1604. FLOAT_LITERAL        │ '7.0' │ L230:C20 │ Literais
1605. COMMA                │ ',' │ L230:C23 │ Operadores
1606. FLOAT_LITERAL        │ '8.0' │ L230:C25 │ Literais
1607. RIGHT_BRACE          │ '}' │ L230:C28 │ Delimitadores
1608. COMMA                │ ',' │ L230:C29 │ Operadores
1609. LEFT_BRACE           │ '{' │ L231:C9 │ Delimitadores
1610. FLOAT_LITERAL        │ '9.0' │ L231:C10 │ Literais
1611. COMMA                │ ',' │ L231:C13 │ Operadores
1612. FLOAT_LITERAL        │ '10.0' │ L231:C15 │ Literais
1613. COMMA                │ ',' │ L231:C19 │ Operadores
1614. FLOAT_LITERAL        │ '11.0' │ L231:C21 │ Literais
1615. COMMA                │ ',' │ L231:C25 │ Operadores
1616. FLOAT_LITERAL        │ '12.0' │ L231:C27 │ Literais
1617. RIGHT_BRACE          │ '}' │ L231:C31 │ Delimitadores
1618. COMMA                │ ',' │ L231:C32 │ Operadores
1619. LEFT_BRACE           │ '{' │ L232:C9 │ Delimitadores
1620. FLOAT_LITERAL        │ '13.0' │ L232:C10 │ Literais
1621. COMMA                │ ',' │ L232:C14 │ Operadores
1622. FLOAT_LITERAL        │ '14.0' │ L232:C16 │ Literais
1623. COMMA                │ ',' │ L232:C20 │ Operadores
1624. FLOAT_LITERAL        │ '15.0' │ L232:C22 │ Literais
1625. COMMA                │ ',' │ L232:C26 │ Operadores
1626. FLOAT_LITERAL        │ '16.0' │ L232:C28 │ Literais
1627. RIGHT_BRACE          │ '}' │ L232:C32 │ Delimitadores
1628. RIGHT_BRACE          │ '}' │ L233:C5 │ Delimitadores
1629. SEMICOLON            │ ';' │ L233:C6 │ Pontuação
1630. DOUBLE               │ 'double' │ L235:C5 │ Palavras-chave
1631. IDENTIFIER           │ 'matrix_b' │ L235:C12 │ Identificadores
1632. LEFT_BRACKET         │ '[' │ L235:C20 │ Delimitadores
1633. INTEGER_LITERAL      │ '4' │ L235:C21 │ Literais
1634. RIGHT_BRACKET        │ ']' │ L235:C22 │ Delimitadores
1635. LEFT_BRACKET         │ '[' │ L235:C23 │ Delimitadores
1636. INTEGER_LITERAL      │ '4' │ L235:C24 │ Literais
1637. RIGHT_BRACKET        │ ']' │ L235:C25 │ Delimitadores
1638. ASSIGN               │ '=' │ L235:C27 │ Operadores
1639. LEFT_BRACE           │ '{' │ L235:C29 │ Delimitadores
1640. LEFT_BRACE           │ '{' │ L236:C9 │ Delimitadores
1641. FLOAT_LITERAL        │ '16.0' │ L236:C10 │ Literais
1642. COMMA                │ ',' │ L236:C14 │ Operadores
1643. FLOAT_LITERAL        │ '15.0' │ L236:C16 │ Literais
1644. COMMA                │ ',' │ L236:C20 │ Operadores
1645. FLOAT_LITERAL        │ '14.0' │ L236:C22 │ Literais
1646. COMMA                │ ',' │ L236:C26 │ Operadores
1647. FLOAT_LITERAL        │ '13.0' │ L236:C28 │ Literais
1648. RIGHT_BRACE          │ '}' │ L236:C32 │ Delimitadores
1649. COMMA                │ ',' │ L236:C33 │ Operadores
1650. LEFT_BRACE           │ '{' │ L237:C9 │ Delimitadores
1651. FLOAT_LITERAL        │ '12.0' │ L237:C10 │ Literais
1652. COMMA                │ ',' │ L237:C14 │ Operadores
1653. FLOAT_LITERAL        │ '11.0' │ L237:C16 │ Literais
1654. COMMA                │ ',' │ L237:C20 │ Operadores
1655. FLOAT_LITERAL        │ '10.0' │ L237:C22 │ Literais
1656. COMMA                │ ',' │ L237:C26 │ Operadores
1657. FLOAT_LITERAL        │ '9.0' │ L237:C28 │ Literais
1658. RIGHT_BRACE          │ '}' │ L237:C31 │ Delimitadores
1659. COMMA                │ ',' │ L237:C32 │ Operadores
1660. LEFT_BRACE           │ '{' │ L238:C9 │ Delimitadores
1661. FLOAT_LITERAL        │ '8.0' │ L238:C10 │ Literais
1662. COMMA                │ ',' │ L238:C13 │ Operadores
1663. FLOAT_LITERAL        │ '7.0' │ L238:C15 │ Literais
1664. COMMA                │ ',' │ L238:C18 │ Operadores
1665. FLOAT_LITERAL        │ '6.0' │ L238:C20 │ Literais
1666. COMMA                │ ',' │ L238:C23 │ Operadores
1667. FLOAT_LITERAL        │ '5.0' │ L238:C25 │ Literais
1668. RIGHT_BRACE          │ '}' │ L238:C28 │ Delimitadores
1669. COMMA                │ ',' │ L238:C29 │ Operadores
1670. LEFT_BRACE           │ '{' │ L239:C9 │ Delimitadores
1671. FLOAT_LITERAL        │ '4.0' │ L239:C10 │ Literais
1672. COMMA                │ ',' │ L239:C13 │ Operadores
1673. FLOAT_LITERAL        │ '3.0' │ L239:C15 │ Literais
1674. COMMA                │ ',' │ L239:C18 │ Operadores
1675. FLOAT_LITERAL        │ '2.0' │ L239:C20 │ Literais
1676. COMMA                │ ',' │ L239:C23 │ Operadores
1677. FLOAT_LITERAL        │ '1.0' │ L239:C25 │ Literais
1678. RIGHT_BRACE          │ '}' │ L239:C28 │ Delimitadores
1679. RIGHT_BRACE          │ '}' │ L240:C5 │ Delimitadores
1680. SEMICOLON            │ ';' │ L240:C6 │ Pontuação
1681. DOUBLE               │ 'double' │ L242:C5 │ Palavras-chave
1682. IDENTIFIER           │ 'matrix_result' │ L242:C12 │ Identificadores
1683. LEFT_BRACKET         │ '[' │ L242:C25 │ Delimitadores
1684. INTEGER_LITERAL      │ '4' │ L242:C26 │ Literais
1685. RIGHT_BRACKET        │ ']' │ L242:C27 │ Delimitadores
1686. LEFT_BRACKET         │ '[' │ L242:C28 │ Delimitadores
1687. INTEGER_LITERAL      │ '4' │ L242:C29 │ Literais
1688. RIGHT_BRACKET        │ ']' │ L242:C30 │ Delimitadores
1689. SEMICOLON            │ ';' │ L242:C31 │ Pontuação
1690. IDENTIFIER           │ 'matrix_multiply' │ L243:C5 │ Identificadores
1691. LEFT_PAREN           │ '(' │ L243:C20 │ Delimitadores
1692. IDENTIFIER           │ 'matrix_a' │ L243:C21 │ Identificadores
1693. COMMA                │ ',' │ L243:C29 │ Operadores
1694. IDENTIFIER           │ 'matrix_b' │ L243:C31 │ Identificadores
1695. COMMA                │ ',' │ L243:C39 │ Operadores
1696. IDENTIFIER           │ 'matrix_result' │ L243:C41 │ Identificadores
1697. RIGHT_PAREN          │ ')' │ L243:C54 │ Delimitadores
1698. SEMICOLON            │ ';' │ L243:C55 │ Pontuação
1699. IDENTIFIER           │ 'printf' │ L245:C5 │ Identificadores
1700. LEFT_PAREN           │ '(' │ L245:C11 │ Delimitadores
1701. STRING_LITERAL       │ '"Matrix multiplication result:\n"' │ L245:C12 │ Literais
1702. RIGHT_PAREN          │ ')' │ L245:C45 │ Delimitadores
1703. SEMICOLON            │ ';' │ L245:C46 │ Pontuação
1704. FOR                  │ 'for' │ L246:C5 │ Palavras-chave
1705. LEFT_PAREN           │ '(' │ L246:C9 │ Delimitadores
1706. INT                  │ 'int' │ L246:C10 │ Palavras-chave
1707. IDENTIFIER           │ 'i' │ L246:C14 │ Identificadores
1708. ASSIGN               │ '=' │ L246:C16 │ Operadores
1709. INTEGER_LITERAL      │ '0' │ L246:C18 │ Literais
1710. SEMICOLON            │ ';' │ L246:C19 │ Pontuação
1711. IDENTIFIER           │ 'i' │ L246:C21 │ Identificadores
1712. LESS_THAN            │ '<' │ L246:C23 │ Operadores
1713. INTEGER_LITERAL      │ '4' │ L246:C25 │ Literais
1714. SEMICOLON            │ ';' │ L246:C26 │ Pontuação
1715. IDENTIFIER           │ 'i' │ L246:C28 │ Identificadores
1716. INCREMENT            │ '++' │ L246:C29 │ Operadores
1717. RIGHT_PAREN          │ ')' │ L246:C31 │ Delimitadores
1718. LEFT_BRACE           │ '{' │ L246:C33 │ Delimitadores
1719. FOR                  │ 'for' │ L247:C9 │ Palavras-chave
1720. LEFT_PAREN           │ '(' │ L247:C13 │ Delimitadores
1721. INT                  │ 'int' │ L247:C14 │ Palavras-chave
1722. IDENTIFIER           │ 'j' │ L247:C18 │ Identificadores
1723. ASSIGN               │ '=' │ L247:C20 │ Operadores
1724. INTEGER_LITERAL      │ '0' │ L247:C22 │ Literais
1725. SEMICOLON            │ ';' │ L247:C23 │ Pontuação
1726. IDENTIFIER           │ 'j' │ L247:C25 │ Identificadores
1727. LESS_THAN            │ '<' │ L247:C27 │ Operadores
1728. INTEGER_LITERAL      │ '4' │ L247:C29 │ Literais
1729. SEMICOLON            │ ';' │ L247:C30 │ Pontuação
1730. IDENTIFIER           │ 'j' │ L247:C32 │ Identificadores
1731. INCREMENT            │ '++' │ L247:C33 │ Operadores
1732. RIGHT_PAREN          │ ')' │ L247:C35 │ Delimitadores
1733. LEFT_BRACE           │ '{' │ L247:C37 │ Delimitadores
1734. IDENTIFIER           │ 'printf' │ L248:C13 │ Identificadores
1735. LEFT_PAREN           │ '(' │ L248:C19 │ Delimitadores
1736. STRING_LITERAL       │ '"%8.2f "' │ L248:C20 │ Literais
1737. COMMA                │ ',' │ L248:C28 │ Operadores
1738. IDENTIFIER           │ 'matrix_result' │ L248:C30 │ Identificadores
1739. LEFT_BRACKET         │ '[' │ L248:C43 │ Delimitadores
1740. IDENTIFIER           │ 'i' │ L248:C44 │ Identificadores
1741. RIGHT_BRACKET        │ ']' │ L248:C45 │ Delimitadores
1742. LEFT_BRACKET         │ '[' │ L248:C46 │ Delimitadores
1743. IDENTIFIER           │ 'j' │ L248:C47 │ Identificadores
1744. RIGHT_BRACKET        │ ']' │ L248:C48 │ Delimitadores
1745. RIGHT_PAREN          │ ')' │ L248:C49 │ Delimitadores
1746. SEMICOLON            │ ';' │ L248:C50 │ Pontuação
1747. RIGHT_BRACE          │ '}' │ L249:C9 │ Delimitadores
1748. IDENTIFIER           │ 'printf' │ L250:C9 │ Identificadores
1749. LEFT_PAREN           │ '(' │ L250:C15 │ Delimitadores
1750. STRING_LITERAL       │ '"\n"' │ L250:C16 │ Literais
1751. RIGHT_PAREN          │ ')' │ L250:C20 │ Delimitadores
1752. SEMICOLON            │ ';' │ L250:C21 │ Pontuação
1753. RIGHT_BRACE          │ '}' │ L251:C5 │ Delimitadores
1754. INT                  │ 'int' │ L254:C5 │ Palavras-chave
1755. IDENTIFIER           │ 'test_array' │ L254:C9 │ Identificadores
1756. LEFT_BRACKET         │ '[' │ L254:C19 │ Delimitadores
1757. INTEGER_LITERAL      │ '1000' │ L254:C20 │ Literais
1758. RIGHT_BRACKET        │ ']' │ L254:C24 │ Delimitadores
1759. SEMICOLON            │ ';' │ L254:C25 │ Pontuação
1760. FOR                  │ 'for' │ L255:C5 │ Palavras-chave
1761. LEFT_PAREN           │ '(' │ L255:C9 │ Delimitadores
1762. INT                  │ 'int' │ L255:C10 │ Palavras-chave
1763. IDENTIFIER           │ 'i' │ L255:C14 │ Identificadores
1764. ASSIGN               │ '=' │ L255:C16 │ Operadores
1765. INTEGER_LITERAL      │ '0' │ L255:C18 │ Literais
1766. SEMICOLON            │ ';' │ L255:C19 │ Pontuação
1767. IDENTIFIER           │ 'i' │ L255:C21 │ Identificadores
1768. LESS_THAN            │ '<' │ L255:C23 │ Operadores
1769. INTEGER_LITERAL      │ '1000' │ L255:C25 │ Literais
1770. SEMICOLON            │ ';' │ L255:C29 │ Pontuação
1771. IDENTIFIER           │ 'i' │ L255:C31 │ Identificadores
1772. INCREMENT            │ '++' │ L255:C32 │ Operadores
1773. RIGHT_PAREN          │ ')' │ L255:C34 │ Delimitadores
1774. LEFT_BRACE           │ '{' │ L255:C36 │ Delimitadores
1775. IDENTIFIER           │ 'test_array' │ L256:C9 │ Identificadores
1776. LEFT_BRACKET         │ '[' │ L256:C19 │ Delimitadores
1777. IDENTIFIER           │ 'i' │ L256:C20 │ Identificadores
1778. RIGHT_BRACKET        │ ']' │ L256:C21 │ Delimitadores
1779. ASSIGN               │ '=' │ L256:C23 │ Operadores
1780. INTEGER_LITERAL      │ '1000' │ L256:C25 │ Literais
1781. MINUS                │ '-' │ L256:C30 │ Operadores
1782. IDENTIFIER           │ 'i' │ L256:C32 │ Identificadores
1783. SEMICOLON            │ ';' │ L256:C33 │ Pontuação
1784. RIGHT_BRACE          │ '}' │ L257:C5 │ Delimitadores
1785. IDENTIFIER           │ 'bubble_sort' │ L259:C5 │ Identificadores
1786. LEFT_PAREN           │ '(' │ L259:C16 │ Delimitadores
1787. IDENTIFIER           │ 'test_array' │ L259:C17 │ Identificadores
1788. COMMA                │ ',' │ L259:C27 │ Operadores
1789. INTEGER_LITERAL      │ '1000' │ L259:C29 │ Literais
1790. RIGHT_PAREN          │ ')' │ L259:C33 │ Delimitadores
1791. SEMICOLON            │ ';' │ L259:C34 │ Pontuação
1792. IDENTIFIER           │ 'printf' │ L260:C5 │ Identificadores
1793. LEFT_PAREN           │ '(' │ L260:C11 │ Delimitadores
1794. STRING_LITERAL       │ '"Array sorted successfully\n"' │ L260:C12 │ Literais
1795. RIGHT_PAREN          │ ')' │ L260:C41 │ Delimitadores
1796. SEMICOLON            │ ';' │ L260:C42 │ Pontuação
1797. FOR                  │ 'for' │ L263:C5 │ Palavras-chave
1798. LEFT_PAREN           │ '(' │ L263:C9 │ Delimitadores
1799. INT                  │ 'int' │ L263:C10 │ Palavras-chave
1800. IDENTIFIER           │ 'i' │ L263:C14 │ Identificadores
1801. ASSIGN               │ '=' │ L263:C16 │ Operadores
1802. INTEGER_LITERAL      │ '0' │ L263:C18 │ Literais
1803. SEMICOLON            │ ';' │ L263:C19 │ Pontuação
1804. IDENTIFIER           │ 'i' │ L263:C21 │ Identificadores
1805. LESS_THAN            │ '<' │ L263:C23 │ Operadores
1806. INTEGER_LITERAL      │ '5' │ L263:C25 │ Literais
1807. SEMICOLON            │ ';' │ L263:C26 │ Pontuação
1808. IDENTIFIER           │ 'i' │ L263:C28 │ Identificadores
1809. INCREMENT            │ '++' │ L263:C29 │ Operadores
1810. RIGHT_PAREN          │ ')' │ L263:C31 │ Delimitadores
1811. LEFT_BRACE           │ '{' │ L263:C33 │ Delimitadores
1812. IDENTIFIER           │ 'printf' │ L264:C9 │ Identificadores
1813. LEFT_PAREN           │ '(' │ L264:C15 │ Delimitadores
1814. STRING_LITERAL       │ '"String %d length: %zu\n"' │ L264:C16 │ Literais
1815. COMMA                │ ',' │ L264:C41 │ Operadores
1816. IDENTIFIER           │ 'i' │ L264:C43 │ Identificadores
1817. COMMA                │ ',' │ L264:C44 │ Operadores
1818. IDENTIFIER           │ 'strlen' │ L264:C46 │ Identificadores
1819. LEFT_PAREN           │ '(' │ L264:C52 │ Delimitadores
1820. IDENTIFIER           │ 'long_strings' │ L264:C53 │ Identificadores
1821. LEFT_BRACKET         │ '[' │ L264:C65 │ Delimitadores
1822. IDENTIFIER           │ 'i' │ L264:C66 │ Identificadores
1823. RIGHT_BRACKET        │ ']' │ L264:C67 │ Delimitadores
1824. RIGHT_PAREN          │ ')' │ L264:C68 │ Delimitadores
1825. RIGHT_PAREN          │ ')' │ L264:C69 │ Delimitadores
1826. SEMICOLON            │ ';' │ L264:C70 │ Pontuação
1827. RIGHT_BRACE          │ '}' │ L265:C5 │ Delimitadores
1828. INT                  │ 'int' │ L268:C5 │ Palavras-chave
1829. IDENTIFIER           │ 'a' │ L268:C9 │ Identificadores
1830. ASSIGN               │ '=' │ L268:C11 │ Operadores
1831. INTEGER_LITERAL      │ '10' │ L268:C13 │ Literais
1832. COMMA                │ ',' │ L268:C15 │ Operadores
1833. IDENTIFIER           │ 'b' │ L268:C17 │ Identificadores
1834. ASSIGN               │ '=' │ L268:C19 │ Operadores
1835. INTEGER_LITERAL      │ '20' │ L268:C21 │ Literais
1836. COMMA                │ ',' │ L268:C23 │ Operadores
1837. IDENTIFIER           │ 'c' │ L268:C25 │ Identificadores
1838. ASSIGN               │ '=' │ L268:C27 │ Operadores
1839. INTEGER_LITERAL      │ '15' │ L268:C29 │ Literais
1840. SEMICOLON            │ ';' │ L268:C31 │ Pontuação
1841. IDENTIFIER           │ 'printf' │ L269:C5 │ Identificadores
1842. LEFT_PAREN           │ '(' │ L269:C11 │ Delimitadores
1843. STRING_LITERAL       │ '"MAX(%d, %d) = %d\n"' │ L269:C12 │ Literais
1844. COMMA                │ ',' │ L269:C32 │ Operadores
1845. IDENTIFIER           │ 'a' │ L269:C34 │ Identificadores
1846. COMMA                │ ',' │ L269:C35 │ Operadores
1847. IDENTIFIER           │ 'b' │ L269:C37 │ Identificadores
1848. COMMA                │ ',' │ L269:C38 │ Operadores
1849. LEFT_PAREN           │ '(' │ L269:C40 │ Delimitadores
1850. LEFT_PAREN           │ '(' │ L269:C41 │ Delimitadores
1851. IDENTIFIER           │ 'a' │ L269:C42 │ Identificadores
1852. RIGHT_PAREN          │ ')' │ L269:C43 │ Delimitadores
1853. GREATER_THAN         │ '>' │ L269:C45 │ Operadores
1854. LEFT_PAREN           │ '(' │ L269:C47 │ Delimitadores
1855. IDENTIFIER           │ 'b' │ L269:C48 │ Identificadores
1856. RIGHT_PAREN          │ ')' │ L269:C49 │ Delimitadores
1857. CONDITIONAL          │ '?' │ L269:C51 │ Operadores
1858. LEFT_PAREN           │ '(' │ L269:C53 │ Delimitadores
1859. IDENTIFIER           │ 'a' │ L269:C54 │ Identificadores
1860. RIGHT_PAREN          │ ')' │ L269:C55 │ Delimitadores
1861. COLON                │ ':' │ L269:C57 │ Operadores
1862. LEFT_PAREN           │ '(' │ L269:C59 │ Delimitadores
1863. IDENTIFIER           │ 'b' │ L269:C60 │ Identificadores
1864. RIGHT_PAREN          │ ')' │ L269:C61 │ Delimitadores
1865. RIGHT_PAREN          │ ')' │ L269:C62 │ Delimitadores
1866. RIGHT_PAREN          │ ')' │ L269:C63 │ Delimitadores
1867. SEMICOLON            │ ';' │ L269:C64 │ Pontuação
1868. IDENTIFIER           │ 'printf' │ L270:C5 │ Identificadores
1869. LEFT_PAREN           │ '(' │ L270:C11 │ Delimitadores
1870. STRING_LITERAL       │ '"MIN(%d, %d) = %d\n"' │ L270:C12 │ Literais
1871. COMMA                │ ',' │ L270:C32 │ Operadores
1872. IDENTIFIER           │ 'a' │ L270:C34 │ Identificadores
1873. COMMA                │ ',' │ L270:C35 │ Operadores
1874. IDENTIFIER           │ 'b' │ L270:C37 │ Identificadores
1875. COMMA                │ ',' │ L270:C38 │ Operadores
1876. LEFT_PAREN           │ '(' │ L270:C40 │ Delimitadores
1877. LEFT_PAREN           │ '(' │ L270:C41 │ Delimitadores
1878. IDENTIFIER           │ 'a' │ L270:C42 │ Identificadores
1879. RIGHT_PAREN          │ ')' │ L270:C43 │ Delimitadores
1880. LESS_THAN            │ '<' │ L270:C45 │ Operadores
1881. LEFT_PAREN           │ '(' │ L270:C47 │ Delimitadores
1882. IDENTIFIER           │ 'b' │ L270:C48 │ Identificadores
1883. RIGHT_PAREN          │ ')' │ L270:C49 │ Delimitadores
1884. CONDITIONAL          │ '?' │ L270:C51 │ Operadores
1885. LEFT_PAREN           │ '(' │ L270:C53 │ Delimitadores
1886. IDENTIFIER           │ 'a' │ L270:C54 │ Identificadores
1887. RIGHT_PAREN          │ ')' │ L270:C55 │ Delimitadores
1888. COLON                │ ':' │ L270:C57 │ Operadores
1889. LEFT_PAREN           │ '(' │ L270:C59 │ Delimitadores
1890. IDENTIFIER           │ 'b' │ L270:C60 │ Identificadores
1891. RIGHT_PAREN          │ ')' │ L270:C61 │ Delimitadores
1892. RIGHT_PAREN          │ ')' │ L270:C62 │ Delimitadores
1893. RIGHT_PAREN          │ ')' │ L270:C63 │ Delimitadores
1894. SEMICOLON            │ ';' │ L270:C64 │ Pontuação
1895. IDENTIFIER           │ 'printf' │ L271:C5 │ Identificadores
1896. LEFT_PAREN           │ '(' │ L271:C11 │ Delimitadores
1897. STRING_LITERAL       │ '"CLAMP(%d, %d, %d) = %d\n"' │ L271:C12 │ Literais
1898. COMMA                │ ',' │ L271:C38 │ Operadores
1899. IDENTIFIER           │ 'c' │ L271:C40 │ Identificadores
1900. COMMA                │ ',' │ L271:C41 │ Operadores
1901. IDENTIFIER           │ 'a' │ L271:C43 │ Identificadores
1902. COMMA                │ ',' │ L271:C44 │ Operadores
1903. IDENTIFIER           │ 'b' │ L271:C46 │ Identificadores
1904. COMMA                │ ',' │ L271:C47 │ Operadores
1905. LEFT_PAREN           │ '(' │ L271:C49 │ Delimitadores
1906. LEFT_PAREN           │ '(' │ L271:C50 │ Delimitadores
1907. LEFT_PAREN           │ '(' │ L271:C51 │ Delimitadores
1908. LEFT_PAREN           │ '(' │ L271:C52 │ Delimitadores
1909. LEFT_PAREN           │ '(' │ L271:C53 │ Delimitadores
1910. IDENTIFIER           │ 'c' │ L271:C54 │ Identificadores
1911. RIGHT_PAREN          │ ')' │ L271:C55 │ Delimitadores
1912. GREATER_THAN         │ '>' │ L271:C57 │ Operadores
1913. LEFT_PAREN           │ '(' │ L271:C59 │ Delimitadores
1914. IDENTIFIER           │ 'a' │ L271:C60 │ Identificadores
1915. RIGHT_PAREN          │ ')' │ L271:C61 │ Delimitadores
1916. CONDITIONAL          │ '?' │ L271:C63 │ Operadores
1917. LEFT_PAREN           │ '(' │ L271:C65 │ Delimitadores
1918. IDENTIFIER           │ 'c' │ L271:C66 │ Identificadores
1919. RIGHT_PAREN          │ ')' │ L271:C67 │ Delimitadores
1920. COLON                │ ':' │ L271:C69 │ Operadores
1921. LEFT_PAREN           │ '(' │ L271:C71 │ Delimitadores
1922. IDENTIFIER           │ 'a' │ L271:C72 │ Identificadores
1923. RIGHT_PAREN          │ ')' │ L271:C73 │ Delimitadores
1924. RIGHT_PAREN          │ ')' │ L271:C74 │ Delimitadores
1925. RIGHT_PAREN          │ ')' │ L271:C75 │ Delimitadores
1926. LESS_THAN            │ '<' │ L271:C77 │ Operadores
1927. LEFT_PAREN           │ '(' │ L271:C79 │ Delimitadores
1928. IDENTIFIER           │ 'b' │ L271:C80 │ Identificadores
1929. RIGHT_PAREN          │ ')' │ L271:C81 │ Delimitadores
1930. CONDITIONAL          │ '?' │ L271:C83 │ Operadores
1931. LEFT_PAREN           │ '(' │ L271:C85 │ Delimitadores
1932. LEFT_PAREN           │ '(' │ L271:C86 │ Delimitadores
1933. LEFT_PAREN           │ '(' │ L271:C87 │ Delimitadores
1934. IDENTIFIER           │ 'c' │ L271:C88 │ Identificadores
1935. RIGHT_PAREN          │ ')' │ L271:C89 │ Delimitadores
1936. GREATER_THAN         │ '>' │ L271:C91 │ Operadores
1937. LEFT_PAREN           │ '(' │ L271:C93 │ Delimitadores
1938. IDENTIFIER           │ 'a' │ L271:C94 │ Identificadores
1939. RIGHT_PAREN          │ ')' │ L271:C95 │ Delimitadores
1940. CONDITIONAL          │ '?' │ L271:C97 │ Operadores
1941. LEFT_PAREN           │ '(' │ L271:C99 │ Delimitadores
1942. IDENTIFIER           │ 'c' │ L271:C100 │ Identificadores
1943. RIGHT_PAREN          │ ')' │ L271:C101 │ Delimitadores
1944. COLON                │ ':' │ L271:C103 │ Operadores
1945. LEFT_PAREN           │ '(' │ L271:C105 │ Delimitadores
1946. IDENTIFIER           │ 'a' │ L271:C106 │ Identificadores
1947. RIGHT_PAREN          │ ')' │ L271:C107 │ Delimitadores
1948. RIGHT_PAREN          │ ')' │ L271:C108 │ Delimitadores
1949. RIGHT_PAREN          │ ')' │ L271:C109 │ Delimitadores
1950. COLON                │ ':' │ L271:C111 │ Operadores
1951. LEFT_PAREN           │ '(' │ L271:C113 │ Delimitadores
1952. IDENTIFIER           │ 'b' │ L271:C114 │ Identificadores
1953. RIGHT_PAREN          │ ')' │ L271:C115 │ Delimitadores
1954. RIGHT_PAREN          │ ')' │ L271:C116 │ Delimitadores
1955. RIGHT_PAREN          │ ')' │ L271:C117 │ Delimitadores
1956. RIGHT_PAREN          │ ')' │ L271:C118 │ Delimitadores
1957. SEMICOLON            │ ';' │ L271:C119 │ Pontuação
1958. DOUBLE               │ 'double' │ L274:C5 │ Palavras-chave
1959. IDENTIFIER           │ 'math_result' │ L274:C12 │ Identificadores
1960. ASSIGN               │ '=' │ L274:C24 │ Operadores
1961. FLOAT_LITERAL        │ '0.0' │ L274:C26 │ Literais
1962. SEMICOLON            │ ';' │ L274:C29 │ Pontuação
1963. FOR                  │ 'for' │ L275:C5 │ Palavras-chave
1964. LEFT_PAREN           │ '(' │ L275:C9 │ Delimitadores
1965. INT                  │ 'int' │ L275:C10 │ Palavras-chave
1966. IDENTIFIER           │ 'i' │ L275:C14 │ Identificadores
1967. ASSIGN               │ '=' │ L275:C16 │ Operadores
1968. INTEGER_LITERAL      │ '1' │ L275:C18 │ Literais
1969. SEMICOLON            │ ';' │ L275:C19 │ Pontuação
1970. IDENTIFIER           │ 'i' │ L275:C21 │ Identificadores
1971. LESS_EQUAL           │ '<=' │ L275:C23 │ Operadores
1972. INTEGER_LITERAL      │ '1000' │ L275:C26 │ Literais
1973. SEMICOLON            │ ';' │ L275:C30 │ Pontuação
1974. IDENTIFIER           │ 'i' │ L275:C32 │ Identificadores
1975. INCREMENT            │ '++' │ L275:C33 │ Operadores
1976. RIGHT_PAREN          │ ')' │ L275:C35 │ Delimitadores
1977. LEFT_BRACE           │ '{' │ L275:C37 │ Delimitadores
1978. IDENTIFIER           │ 'math_result' │ L276:C9 │ Identificadores
1979. PLUS_ASSIGN          │ '+=' │ L276:C21 │ Operadores
1980. IDENTIFIER           │ 'sin' │ L276:C24 │ Identificadores
1981. LEFT_PAREN           │ '(' │ L276:C27 │ Delimitadores
1982. IDENTIFIER           │ 'i' │ L276:C28 │ Identificadores
1983. MULTIPLY             │ '*' │ L276:C30 │ Operadores
1984. FLOAT_LITERAL        │ '0.01' │ L276:C32 │ Literais
1985. RIGHT_PAREN          │ ')' │ L276:C36 │ Delimitadores
1986. MULTIPLY             │ '*' │ L276:C38 │ Operadores
1987. IDENTIFIER           │ 'cos' │ L276:C40 │ Identificadores
1988. LEFT_PAREN           │ '(' │ L276:C43 │ Delimitadores
1989. IDENTIFIER           │ 'i' │ L276:C44 │ Identificadores
1990. MULTIPLY             │ '*' │ L276:C46 │ Operadores
1991. FLOAT_LITERAL        │ '0.02' │ L276:C48 │ Literais
1992. RIGHT_PAREN          │ ')' │ L276:C52 │ Delimitadores
1993. MULTIPLY             │ '*' │ L276:C54 │ Operadores
1994. IDENTIFIER           │ 'tan' │ L276:C56 │ Identificadores
1995. LEFT_PAREN           │ '(' │ L276:C59 │ Delimitadores
1996. IDENTIFIER           │ 'i' │ L276:C60 │ Identificadores
1997. MULTIPLY             │ '*' │ L276:C62 │ Operadores
1998. FLOAT_LITERAL        │ '0.005' │ L276:C64 │ Literais
1999. RIGHT_PAREN          │ ')' │ L276:C69 │ Delimitadores
2000. SEMICOLON            │ ';' │ L276:C70 │ Pontuação
2001. IDENTIFIER           │ 'math_result' │ L277:C9 │ Identificadores
2002. PLUS_ASSIGN          │ '+=' │ L277:C21 │ Operadores
2003. IDENTIFIER           │ 'sqrt' │ L277:C24 │ Identificadores
2004. LEFT_PAREN           │ '(' │ L277:C28 │ Delimitadores
2005. IDENTIFIER           │ 'i' │ L277:C29 │ Identificadores
2006. RIGHT_PAREN          │ ')' │ L277:C30 │ Delimitadores
2007. MULTIPLY             │ '*' │ L277:C32 │ Operadores
2008. IDENTIFIER           │ 'log' │ L277:C34 │ Identificadores
2009. LEFT_PAREN           │ '(' │ L277:C37 │ Delimitadores
2010. IDENTIFIER           │ 'i' │ L277:C38 │ Identificadores
2011. RIGHT_PAREN          │ ')' │ L277:C39 │ Delimitadores
2012. MULTIPLY             │ '*' │ L277:C41 │ Operadores
2013. IDENTIFIER           │ 'exp' │ L277:C43 │ Identificadores
2014. LEFT_PAREN           │ '(' │ L277:C46 │ Delimitadores
2015. IDENTIFIER           │ 'i' │ L277:C47 │ Identificadores
2016. MULTIPLY             │ '*' │ L277:C49 │ Operadores
2017. FLOAT_LITERAL        │ '0.001' │ L277:C51 │ Literais
2018. RIGHT_PAREN          │ ')' │ L277:C56 │ Delimitadores
2019. SEMICOLON            │ ';' │ L277:C57 │ Pontuação
2020. IDENTIFIER           │ 'math_result' │ L278:C9 │ Identificadores
2021. PLUS_ASSIGN          │ '+=' │ L278:C21 │ Operadores
2022. IDENTIFIER           │ 'pow' │ L278:C24 │ Identificadores
2023. LEFT_PAREN           │ '(' │ L278:C27 │ Delimitadores
2024. IDENTIFIER           │ 'i' │ L278:C28 │ Identificadores
2025. COMMA                │ ',' │ L278:C29 │ Operadores
2026. FLOAT_LITERAL        │ '0.5' │ L278:C31 │ Literais
2027. RIGHT_PAREN          │ ')' │ L278:C34 │ Delimitadores
2028. MULTIPLY             │ '*' │ L278:C36 │ Operadores
2029. IDENTIFIER           │ 'fabs' │ L278:C38 │ Identificadores
2030. LEFT_PAREN           │ '(' │ L278:C42 │ Delimitadores
2031. IDENTIFIER           │ 'sin' │ L278:C43 │ Identificadores
2032. LEFT_PAREN           │ '(' │ L278:C46 │ Delimitadores
2033. IDENTIFIER           │ 'i' │ L278:C47 │ Identificadores
2034. RIGHT_PAREN          │ ')' │ L278:C48 │ Delimitadores
2035. RIGHT_PAREN          │ ')' │ L278:C49 │ Delimitadores
2036. SEMICOLON            │ ';' │ L278:C50 │ Pontuação
2037. RIGHT_BRACE          │ '}' │ L279:C5 │ Delimitadores
2038. IDENTIFIER           │ 'printf' │ L280:C5 │ Identificadores
2039. LEFT_PAREN           │ '(' │ L280:C11 │ Delimitadores
2040. STRING_LITERAL       │ '"Math result: %f\n"' │ L280:C12 │ Literais
2041. COMMA                │ ',' │ L280:C31 │ Operadores
2042. IDENTIFIER           │ 'math_result' │ L280:C33 │ Identificadores
2043. RIGHT_PAREN          │ ')' │ L280:C44 │ Delimitadores
2044. SEMICOLON            │ ';' │ L280:C45 │ Pontuação
2045. IDENTIFIER           │ 'uint64_t' │ L283:C5 │ Identificadores
2046. IDENTIFIER           │ 'bit_result' │ L283:C14 │ Identificadores
2047. ASSIGN               │ '=' │ L283:C25 │ Operadores
2048. INTEGER_LITERAL      │ '0' │ L283:C27 │ Literais
2049. SEMICOLON            │ ';' │ L283:C28 │ Pontuação
2050. FOR                  │ 'for' │ L284:C5 │ Palavras-chave
2051. LEFT_PAREN           │ '(' │ L284:C9 │ Delimitadores
2052. INT                  │ 'int' │ L284:C10 │ Palavras-chave
2053. IDENTIFIER           │ 'i' │ L284:C14 │ Identificadores
2054. ASSIGN               │ '=' │ L284:C16 │ Operadores
2055. INTEGER_LITERAL      │ '0' │ L284:C18 │ Literais
2056. SEMICOLON            │ ';' │ L284:C19 │ Pontuação
2057. IDENTIFIER           │ 'i' │ L284:C21 │ Identificadores
2058. LESS_THAN            │ '<' │ L284:C23 │ Operadores
2059. INTEGER_LITERAL      │ '64' │ L284:C25 │ Literais
2060. SEMICOLON            │ ';' │ L284:C27 │ Pontuação
2061. IDENTIFIER           │ 'i' │ L284:C29 │ Identificadores
2062. INCREMENT            │ '++' │ L284:C30 │ Operadores
2063. RIGHT_PAREN          │ ')' │ L284:C32 │ Delimitadores
2064. LEFT_BRACE           │ '{' │ L284:C34 │ Delimitadores
2065. IDENTIFIER           │ 'bit_result' │ L285:C9 │ Identificadores
2066. OR_ASSIGN            │ '|=' │ L285:C20 │ Operadores
2067. LEFT_PAREN           │ '(' │ L285:C23 │ Delimitadores
2068. INTEGER_LITERAL      │ '1ULL' │ L285:C24 │ Literais
2069. LEFT_SHIFT           │ '<<' │ L285:C29 │ Operadores
2070. IDENTIFIER           │ 'i' │ L285:C32 │ Identificadores
2071. RIGHT_PAREN          │ ')' │ L285:C33 │ Delimitadores
2072. SEMICOLON            │ ';' │ L285:C34 │ Pontuação
2073. IDENTIFIER           │ 'bit_result' │ L286:C9 │ Identificadores
2074. XOR_ASSIGN           │ '^=' │ L286:C20 │ Operadores
2075. LEFT_PAREN           │ '(' │ L286:C23 │ Delimitadores
2076. INTEGER_LITERAL      │ '0xAAAAAAAAAAAAAAAAULL' │ L286:C24 │ Literais
2077. RIGHT_SHIFT          │ '>>' │ L286:C46 │ Operadores
2078. IDENTIFIER           │ 'i' │ L286:C49 │ Identificadores
2079. RIGHT_PAREN          │ ')' │ L286:C50 │ Delimitadores
2080. SEMICOLON            │ ';' │ L286:C51 │ Pontuação
2081. IDENTIFIER           │ 'bit_result' │ L287:C9 │ Identificadores
2082. AND_ASSIGN           │ '&=' │ L287:C20 │ Operadores
2083. LEFT_PAREN           │ '(' │ L287:C23 │ Delimitadores
2084. INTEGER_LITERAL      │ '0x5555555555555555ULL' │ L287:C24 │ Literais
2085. LEFT_SHIFT           │ '<<' │ L287:C46 │ Operadores
2086. LEFT_PAREN           │ '(' │ L287:C49 │ Delimitadores
2087. IDENTIFIER           │ 'i' │ L287:C50 │ Identificadores
2088. MODULO               │ '%' │ L287:C52 │ Operadores
2089. INTEGER_LITERAL      │ '32' │ L287:C54 │ Literais
2090. RIGHT_PAREN          │ ')' │ L287:C56 │ Delimitadores
2091. RIGHT_PAREN          │ ')' │ L287:C57 │ Delimitadores
2092. SEMICOLON            │ ';' │ L287:C58 │ Pontuação
2093. RIGHT_BRACE          │ '}' │ L288:C5 │ Delimitadores
2094. IDENTIFIER           │ 'printf' │ L289:C5 │ Identificadores
2095. LEFT_PAREN           │ '(' │ L289:C11 │ Delimitadores
2096. STRING_LITERAL       │ '"Bit operations result: %llu\n"' │ L289:C12 │ Literais
2097. COMMA                │ ',' │ L289:C43 │ Operadores
2098. IDENTIFIER           │ 'bit_result' │ L289:C45 │ Identificadores
2099. RIGHT_PAREN          │ ')' │ L289:C55 │ Delimitadores
2100. SEMICOLON            │ ';' │ L289:C56 │ Pontuação
2101. IDENTIFIER           │ 'printf' │ L291:C5 │ Identificadores
2102. LEFT_PAREN           │ '(' │ L291:C11 │ Delimitadores
2103. STRING_LITERAL       │ '"Performance test completed successfully!\n"' │ L291:C12 │ Literais
2104. RIGHT_PAREN          │ ')' │ L291:C56 │ Delimitadores
2105. SEMICOLON            │ ';' │ L291:C57 │ Pontuação
2106. RETURN               │ 'return' │ L292:C5 │ Palavras-chave
2107. INTEGER_LITERAL      │ '0' │ L292:C12 │ Literais
2108. SEMICOLON            │ ';' │ L292:C13 │ Pontuação
2109. RIGHT_BRACE          │ '}' │ L293:C1 │ Delimitadores
2110. VOID                 │ 'void' │ L296:C1 │ Palavras-chave
2111. IDENTIFIER           │ 'additional_function_1' │ L296:C6 │ Identificadores
2112. LEFT_PAREN           │ '(' │ L296:C27 │ Delimitadores
2113. VOID                 │ 'void' │ L296:C28 │ Palavras-chave
2114. RIGHT_PAREN          │ ')' │ L296:C32 │ Delimitadores
2115. LEFT_BRACE           │ '{' │ L296:C34 │ Delimitadores
2116. FOR                  │ 'for' │ L298:C5 │ Palavras-chave
2117. LEFT_PAREN           │ '(' │ L298:C9 │ Delimitadores
2118. INT                  │ 'int' │ L298:C10 │ Palavras-chave
2119. IDENTIFIER           │ 'i' │ L298:C14 │ Identificadores
2120. ASSIGN               │ '=' │ L298:C16 │ Operadores
2121. INTEGER_LITERAL      │ '0' │ L298:C18 │ Literais
2122. SEMICOLON            │ ';' │ L298:C19 │ Pontuação
2123. IDENTIFIER           │ 'i' │ L298:C21 │ Identificadores
2124. LESS_THAN            │ '<' │ L298:C23 │ Operadores
2125. INTEGER_LITERAL      │ '100' │ L298:C25 │ Literais
2126. SEMICOLON            │ ';' │ L298:C28 │ Pontuação
2127. IDENTIFIER           │ 'i' │ L298:C30 │ Identificadores
2128. INCREMENT            │ '++' │ L298:C31 │ Operadores
2129. RIGHT_PAREN          │ ')' │ L298:C33 │ Delimitadores
2130. LEFT_BRACE           │ '{' │ L298:C35 │ Delimitadores
2131. IDENTIFIER           │ 'printf' │ L299:C9 │ Identificadores
2132. LEFT_PAREN           │ '(' │ L299:C15 │ Delimitadores
2133. STRING_LITERAL       │ '"Additional function 1: %d\n"' │ L299:C16 │ Literais
2134. COMMA                │ ',' │ L299:C45 │ Operadores
2135. IDENTIFIER           │ 'i' │ L299:C47 │ Identificadores
2136. RIGHT_PAREN          │ ')' │ L299:C48 │ Delimitadores
2137. SEMICOLON            │ ';' │ L299:C49 │ Pontuação
2138. RIGHT_BRACE          │ '}' │ L300:C5 │ Delimitadores
2139. RIGHT_BRACE          │ '}' │ L301:C1 │ Delimitadores
2140. VOID                 │ 'void' │ L303:C1 │ Palavras-chave
2141. IDENTIFIER           │ 'additional_function_2' │ L303:C6 │ Identificadores
2142. LEFT_PAREN           │ '(' │ L303:C27 │ Delimitadores
2143. VOID                 │ 'void' │ L303:C28 │ Palavras-chave
2144. RIGHT_PAREN          │ ')' │ L303:C32 │ Delimitadores
2145. LEFT_BRACE           │ '{' │ L303:C34 │ Delimitadores
2146. DOUBLE               │ 'double' │ L305:C5 │ Palavras-chave
2147. IDENTIFIER           │ 'values' │ L305:C12 │ Identificadores
2148. LEFT_BRACKET         │ '[' │ L305:C18 │ Delimitadores
2149. INTEGER_LITERAL      │ '50' │ L305:C19 │ Literais
2150. RIGHT_BRACKET        │ ']' │ L305:C21 │ Delimitadores
2151. SEMICOLON            │ ';' │ L305:C22 │ Pontuação
2152. FOR                  │ 'for' │ L306:C5 │ Palavras-chave
2153. LEFT_PAREN           │ '(' │ L306:C9 │ Delimitadores
2154. INT                  │ 'int' │ L306:C10 │ Palavras-chave
2155. IDENTIFIER           │ 'i' │ L306:C14 │ Identificadores
2156. ASSIGN               │ '=' │ L306:C16 │ Operadores
2157. INTEGER_LITERAL      │ '0' │ L306:C18 │ Literais
2158. SEMICOLON            │ ';' │ L306:C19 │ Pontuação
2159. IDENTIFIER           │ 'i' │ L306:C21 │ Identificadores
2160. LESS_THAN            │ '<' │ L306:C23 │ Operadores
2161. INTEGER_LITERAL      │ '50' │ L306:C25 │ Literais
2162. SEMICOLON            │ ';' │ L306:C27 │ Pontuação
2163. IDENTIFIER           │ 'i' │ L306:C29 │ Identificadores
2164. INCREMENT            │ '++' │ L306:C30 │ Operadores
2165. RIGHT_PAREN          │ ')' │ L306:C32 │ Delimitadores
2166. LEFT_BRACE           │ '{' │ L306:C34 │ Delimitadores
2167. IDENTIFIER           │ 'values' │ L307:C9 │ Identificadores
2168. LEFT_BRACKET         │ '[' │ L307:C15 │ Delimitadores
2169. IDENTIFIER           │ 'i' │ L307:C16 │ Identificadores
2170. RIGHT_BRACKET        │ ']' │ L307:C17 │ Delimitadores
2171. ASSIGN               │ '=' │ L307:C19 │ Operadores
2172. IDENTIFIER           │ 'sin' │ L307:C21 │ Identificadores
2173. LEFT_PAREN           │ '(' │ L307:C24 │ Delimitadores
2174. IDENTIFIER           │ 'i' │ L307:C25 │ Identificadores
2175. MULTIPLY             │ '*' │ L307:C27 │ Operadores
2176. FLOAT_LITERAL        │ '0.1' │ L307:C29 │ Literais
2177. RIGHT_PAREN          │ ')' │ L307:C32 │ Delimitadores
2178. PLUS                 │ '+' │ L307:C34 │ Operadores
2179. IDENTIFIER           │ 'cos' │ L307:C36 │ Identificadores
2180. LEFT_PAREN           │ '(' │ L307:C39 │ Delimitadores
2181. IDENTIFIER           │ 'i' │ L307:C40 │ Identificadores
2182. MULTIPLY             │ '*' │ L307:C42 │ Operadores
2183. FLOAT_LITERAL        │ '0.2' │ L307:C44 │ Literais
2184. RIGHT_PAREN          │ ')' │ L307:C47 │ Delimitadores
2185. SEMICOLON            │ ';' │ L307:C48 │ Pontuação
2186. RIGHT_BRACE          │ '}' │ L308:C5 │ Delimitadores
2187. RIGHT_BRACE          │ '}' │ L309:C1 │ Delimitadores
2188. VOID                 │ 'void' │ L311:C1 │ Palavras-chave
2189. IDENTIFIER           │ 'additional_function_3' │ L311:C6 │ Identificadores
2190. LEFT_PAREN           │ '(' │ L311:C27 │ Delimitadores
2191. VOID                 │ 'void' │ L311:C28 │ Palavras-chave
2192. RIGHT_PAREN          │ ')' │ L311:C32 │ Delimitadores
2193. LEFT_BRACE           │ '{' │ L311:C34 │ Delimitadores
2194. STRUCT               │ 'struct' │ L313:C5 │ Palavras-chave
2195. IDENTIFIER           │ 'Point3D' │ L313:C12 │ Identificadores
2196. IDENTIFIER           │ 'points' │ L313:C20 │ Identificadores
2197. LEFT_BRACKET         │ '[' │ L313:C26 │ Delimitadores
2198. INTEGER_LITERAL      │ '25' │ L313:C27 │ Literais
2199. RIGHT_BRACKET        │ ']' │ L313:C29 │ Delimitadores
2200. SEMICOLON            │ ';' │ L313:C30 │ Pontuação
2201. FOR                  │ 'for' │ L314:C5 │ Palavras-chave
2202. LEFT_PAREN           │ '(' │ L314:C9 │ Delimitadores
2203. INT                  │ 'int' │ L314:C10 │ Palavras-chave
2204. IDENTIFIER           │ 'i' │ L314:C14 │ Identificadores
2205. ASSIGN               │ '=' │ L314:C16 │ Operadores
2206. INTEGER_LITERAL      │ '0' │ L314:C18 │ Literais
2207. SEMICOLON            │ ';' │ L314:C19 │ Pontuação
2208. IDENTIFIER           │ 'i' │ L314:C21 │ Identificadores
2209. LESS_THAN            │ '<' │ L314:C23 │ Operadores
2210. INTEGER_LITERAL      │ '25' │ L314:C25 │ Literais
2211. SEMICOLON            │ ';' │ L314:C27 │ Pontuação
2212. IDENTIFIER           │ 'i' │ L314:C29 │ Identificadores
2213. INCREMENT            │ '++' │ L314:C30 │ Operadores
2214. RIGHT_PAREN          │ ')' │ L314:C32 │ Delimitadores
2215. LEFT_BRACE           │ '{' │ L314:C34 │ Delimitadores
2216. IDENTIFIER           │ 'points' │ L315:C9 │ Identificadores
2217. LEFT_BRACKET         │ '[' │ L315:C15 │ Delimitadores
2218. IDENTIFIER           │ 'i' │ L315:C16 │ Identificadores
2219. RIGHT_BRACKET        │ ']' │ L315:C17 │ Delimitadores
2220. DOT                  │ '.' │ L315:C18 │ Operadores
2221. IDENTIFIER           │ 'x' │ L315:C19 │ Identificadores
2222. ASSIGN               │ '=' │ L315:C21 │ Operadores
2223. IDENTIFIER           │ 'i' │ L315:C23 │ Identificadores
2224. MULTIPLY             │ '*' │ L315:C25 │ Operadores
2225. FLOAT_LITERAL        │ '1.5' │ L315:C27 │ Literais
2226. SEMICOLON            │ ';' │ L315:C30 │ Pontuação
2227. IDENTIFIER           │ 'points' │ L316:C9 │ Identificadores
2228. LEFT_BRACKET         │ '[' │ L316:C15 │ Delimitadores
2229. IDENTIFIER           │ 'i' │ L316:C16 │ Identificadores
2230. RIGHT_BRACKET        │ ']' │ L316:C17 │ Delimitadores
2231. DOT                  │ '.' │ L316:C18 │ Operadores
2232. IDENTIFIER           │ 'y' │ L316:C19 │ Identificadores
2233. ASSIGN               │ '=' │ L316:C21 │ Operadores
2234. IDENTIFIER           │ 'i' │ L316:C23 │ Identificadores
2235. MULTIPLY             │ '*' │ L316:C25 │ Operadores
2236. FLOAT_LITERAL        │ '2.5' │ L316:C27 │ Literais
2237. SEMICOLON            │ ';' │ L316:C30 │ Pontuação
2238. IDENTIFIER           │ 'points' │ L317:C9 │ Identificadores
2239. LEFT_BRACKET         │ '[' │ L317:C15 │ Delimitadores
2240. IDENTIFIER           │ 'i' │ L317:C16 │ Identificadores
2241. RIGHT_BRACKET        │ ']' │ L317:C17 │ Delimitadores
2242. DOT                  │ '.' │ L317:C18 │ Operadores
2243. IDENTIFIER           │ 'z' │ L317:C19 │ Identificadores
2244. ASSIGN               │ '=' │ L317:C21 │ Operadores
2245. IDENTIFIER           │ 'i' │ L317:C23 │ Identificadores
2246. MULTIPLY             │ '*' │ L317:C25 │ Operadores
2247. FLOAT_LITERAL        │ '3.5' │ L317:C27 │ Literais
2248. SEMICOLON            │ ';' │ L317:C30 │ Pontuação
2249. RIGHT_BRACE          │ '}' │ L318:C5 │ Delimitadores
2250. RIGHT_BRACE          │ '}' │ L319:C1 │ Delimitadores
2251. STRUCT               │ 'struct' │ L324:C1 │ Palavras-chave
2252. IDENTIFIER           │ 'DeepStruct' │ L324:C8 │ Identificadores
2253. LEFT_BRACE           │ '{' │ L324:C19 │ Delimitadores
2254. CHAR                 │ 'char' │ L325:C5 │ Palavras-chave
2255. IDENTIFIER           │ 'deep_char' │ L325:C10 │ Identificadores
2256. SEMICOLON            │ ';' │ L325:C19 │ Pontuação
2257. FLOAT                │ 'float' │ L326:C5 │ Palavras-chave
2258. IDENTIFIER           │ 'deep_float' │ L326:C11 │ Identificadores
2259. SEMICOLON            │ ';' │ L326:C21 │ Pontuação
2260. RIGHT_BRACE          │ '}' │ L327:C1 │ Delimitadores
2261. SEMICOLON            │ ';' │ L327:C2 │ Pontuação
2262. STRUCT               │ 'struct' │ L329:C1 │ Palavras-chave
2263. IDENTIFIER           │ 'MiddleStruct' │ L329:C8 │ Identificadores
2264. LEFT_BRACE           │ '{' │ L329:C21 │ Delimitadores
2265. INT                  │ 'int' │ L330:C5 │ Palavras-chave
2266. IDENTIFIER           │ 'inner_a' │ L330:C9 │ Identificadores
2267. SEMICOLON            │ ';' │ L330:C16 │ Pontuação
2268. DOUBLE               │ 'double' │ L331:C5 │ Palavras-chave
2269. IDENTIFIER           │ 'inner_b' │ L331:C12 │ Identificadores
2270. SEMICOLON            │ ';' │ L331:C19 │ Pontuação
2271. STRUCT               │ 'struct' │ L332:C5 │ Palavras-chave
2272. IDENTIFIER           │ 'DeepStruct' │ L332:C12 │ Identificadores
2273. IDENTIFIER           │ 'deep_struct' │ L332:C23 │ Identificadores
2274. SEMICOLON            │ ';' │ L332:C34 │ Pontuação
2275. RIGHT_BRACE          │ '}' │ L333:C1 │ Delimitadores
2276. SEMICOLON            │ ';' │ L333:C2 │ Pontuação
2277. UNION                │ 'union' │ L335:C1 │ Palavras-chave
2278. IDENTIFIER           │ 'TestUnion' │ L335:C7 │ Identificadores
2279. LEFT_BRACE           │ '{' │ L335:C17 │ Delimitadores
2280. INT                  │ 'int' │ L336:C5 │ Palavras-chave
2281. IDENTIFIER           │ 'union_int' │ L336:C9 │ Identificadores
2282. SEMICOLON            │ ';' │ L336:C18 │ Pontuação
2283. FLOAT                │ 'float' │ L337:C5 │ Palavras-chave
2284. IDENTIFIER           │ 'union_float' │ L337:C11 │ Identificadores
2285. SEMICOLON            │ ';' │ L337:C22 │ Pontuação
2286. CHAR                 │ 'char' │ L338:C5 │ Palavras-chave
2287. IDENTIFIER           │ 'union_array' │ L338:C10 │ Identificadores
2288. LEFT_BRACKET         │ '[' │ L338:C21 │ Delimitadores
2289. INTEGER_LITERAL      │ '16' │ L338:C22 │ Literais
2290. RIGHT_BRACKET        │ ']' │ L338:C24 │ Delimitadores
2291. SEMICOLON            │ ';' │ L338:C25 │ Pontuação
2292. RIGHT_BRACE          │ '}' │ L339:C1 │ Delimitadores
2293. SEMICOLON            │ ';' │ L339:C2 │ Pontuação
2294. STRUCT               │ 'struct' │ L341:C1 │ Palavras-chave
2295. IDENTIFIER           │ 'NestedStruct' │ L341:C8 │ Identificadores
2296. LEFT_BRACE           │ '{' │ L341:C21 │ Delimitadores
2297. STRUCT               │ 'struct' │ L342:C5 │ Palavras-chave
2298. IDENTIFIER           │ 'MiddleStruct' │ L342:C12 │ Identificadores
2299. IDENTIFIER           │ 'middle_struct' │ L342:C25 │ Identificadores
2300. SEMICOLON            │ ';' │ L342:C38 │ Pontuação
2301. UNION                │ 'union' │ L343:C5 │ Palavras-chave
2302. IDENTIFIER           │ 'TestUnion' │ L343:C11 │ Identificadores
2303. IDENTIFIER           │ 'test_union' │ L343:C21 │ Identificadores
2304. SEMICOLON            │ ';' │ L343:C31 │ Pontuação
2305. RIGHT_BRACE          │ '}' │ L344:C1 │ Delimitadores
2306. SEMICOLON            │ ';' │ L344:C2 │ Pontuação
2307. VOID                 │ 'void' │ L347:C1 │ Palavras-chave
2308. IDENTIFIER           │ 'final_test_function' │ L347:C6 │ Identificadores
2309. LEFT_PAREN           │ '(' │ L347:C25 │ Delimitadores
2310. VOID                 │ 'void' │ L347:C26 │ Palavras-chave
2311. RIGHT_PAREN          │ ')' │ L347:C30 │ Delimitadores
2312. LEFT_BRACE           │ '{' │ L347:C32 │ Delimitadores
2313. STRUCT               │ 'struct' │ L348:C5 │ Palavras-chave
2314. IDENTIFIER           │ 'NestedStruct' │ L348:C12 │ Identificadores
2315. IDENTIFIER           │ 'nested' │ L348:C25 │ Identificadores
2316. SEMICOLON            │ ';' │ L348:C31 │ Pontuação
2317. IDENTIFIER           │ 'nested' │ L349:C5 │ Identificadores
2318. DOT                  │ '.' │ L349:C11 │ Operadores
2319. IDENTIFIER           │ 'middle_struct' │ L349:C12 │ Identificadores
2320. DOT                  │ '.' │ L349:C25 │ Operadores
2321. IDENTIFIER           │ 'inner_a' │ L349:C26 │ Identificadores
2322. ASSIGN               │ '=' │ L349:C34 │ Operadores
2323. INTEGER_LITERAL      │ '42' │ L349:C36 │ Literais
2324. SEMICOLON            │ ';' │ L349:C38 │ Pontuação
2325. IDENTIFIER           │ 'nested' │ L350:C5 │ Identificadores
2326. DOT                  │ '.' │ L350:C11 │ Operadores
2327. IDENTIFIER           │ 'middle_struct' │ L350:C12 │ Identificadores
2328. DOT                  │ '.' │ L350:C25 │ Operadores
2329. IDENTIFIER           │ 'inner_b' │ L350:C26 │ Identificadores
2330. ASSIGN               │ '=' │ L350:C34 │ Operadores
2331. FLOAT_LITERAL        │ '3.14159' │ L350:C36 │ Literais
2332. SEMICOLON            │ ';' │ L350:C43 │ Pontuação
2333. IDENTIFIER           │ 'nested' │ L351:C5 │ Identificadores
2334. DOT                  │ '.' │ L351:C11 │ Operadores
2335. IDENTIFIER           │ 'middle_struct' │ L351:C12 │ Identificadores
2336. DOT                  │ '.' │ L351:C25 │ Operadores
2337. IDENTIFIER           │ 'deep_struct' │ L351:C26 │ Identificadores
2338. DOT                  │ '.' │ L351:C37 │ Operadores
2339. IDENTIFIER           │ 'deep_char' │ L351:C38 │ Identificadores
2340. ASSIGN               │ '=' │ L351:C48 │ Operadores
2341. CHAR_LITERAL         │ ''A'' │ L351:C50 │ Literais
2342. SEMICOLON            │ ';' │ L351:C53 │ Pontuação
2343. IDENTIFIER           │ 'nested' │ L352:C5 │ Identificadores
2344. DOT                  │ '.' │ L352:C11 │ Operadores
2345. IDENTIFIER           │ 'middle_struct' │ L352:C12 │ Identificadores
2346. DOT                  │ '.' │ L352:C25 │ Operadores
2347. IDENTIFIER           │ 'deep_struct' │ L352:C26 │ Identificadores
2348. DOT                  │ '.' │ L352:C37 │ Operadores
2349. IDENTIFIER           │ 'deep_float' │ L352:C38 │ Identificadores
2350. ASSIGN               │ '=' │ L352:C49 │ Operadores
2351. FLOAT_LITERAL        │ '2.71828f' │ L352:C51 │ Literais
2352. SEMICOLON            │ ';' │ L352:C59 │ Pontuação
2353. IDENTIFIER           │ 'nested' │ L353:C5 │ Identificadores
2354. DOT                  │ '.' │ L353:C11 │ Operadores
2355. IDENTIFIER           │ 'test_union' │ L353:C12 │ Identificadores
2356. DOT                  │ '.' │ L353:C22 │ Operadores
2357. IDENTIFIER           │ 'union_int' │ L353:C23 │ Identificadores
2358. ASSIGN               │ '=' │ L353:C33 │ Operadores
2359. INTEGER_LITERAL      │ '12345' │ L353:C35 │ Literais
2360. SEMICOLON            │ ';' │ L353:C40 │ Pontuação
2361. IDENTIFIER           │ 'printf' │ L355:C5 │ Identificadores
2362. LEFT_PAREN           │ '(' │ L355:C11 │ Delimitadores
2363. STRING_LITERAL       │ '"Nested structure test completed\n"' │ L355:C12 │ Literais
2364. RIGHT_PAREN          │ ')' │ L355:C47 │ Delimitadores
2365. SEMICOLON            │ ';' │ L355:C48 │ Pontuação
2366. RIGHT_BRACE          │ '}' │ L356:C1 │ Delimitadores
2367. END_OF_FILE          │ '' │ L357:C1 │ Outros

📈 ESTATÍSTICAS
==============================
Total de tokens: 2367
Categorias encontradas: 7

Distribuição por categoria:
  • Delimitadores  : 544 (23.0%)
  • Identificadores: 539 (22.8%)
  • Literais       : 362 (15.3%)
  • Operadores     : 578 (24.4%)
  • Outros         : 1   (0.0%)
  • Palavras-chave : 173 (7.3%)
  • Pontuação    : 170 (7.2%)

✅ Análise concluída sem erros!

📋 Pré-processamento: ✅ Concluído (1 arquivos, 11 macros)

🔍 Iniciando análise sintática...

╔══════════════════════════════════════════════════════════════╗
║ ANÁLISE SINTÁTICA: test_cases/advanced/performance/valid/large_file.c║
╚══════════════════════════════════════════════════════════════╝
[2025-09-12 17:56:47] [INFO]  Successfully loaded C89 grammar from file: /Users/Guilherme/CLionProjects/CompiladorC_v2/src/parser/data/grammar/simple_c.grammar
[2025-09-12 17:56:47] [INFO]  Checking grammar for LL(1) conflicts... (/Users/Guilherme/CLionProjects/CompiladorC_v2/src/parser/src/parser.cpp:1015 in initialize)
[2025-09-12 17:56:47] [INFO]  No LL(1) conflicts detected in grammar (/Users/Guilherme/CLionProjects/CompiladorC_v2/src/parser/src/parser.cpp:1021 in initialize)
[DEBUG] main: Parser criado
[DEBUG] main: TokenStream criado
[DEBUG] main: Chamando parseTokens com 2367 tokens
[DEBUG] main: parseTokens retornou
✅ Análise sintática concluída com sucesso!

🌳 Árvore Sintática Abstrata (AST):
TranslationUnit
├── FunctionDeclaration: int complex_function_1 (int a, int b, int c, int d, int e, int f, int g, int h, int i, int j)
│   └──  [5]CompoundStatement
│   │   ├── VariableDeclaration: int result = a + b + c + d + e + f + g + h + i + j
│   │   │   └──  [13]BinaryExpression: +
│   │   │   │   ├── Left:
│   │   │   │   │   └──  [13]BinaryExpression: +
│   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   └──  [13]BinaryExpression: +
│   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: +
│   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: +
│   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: +
│   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: +
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: +
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: +
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: a
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: b
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: c
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: d
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: e
│   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: f
│   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: g
│   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   └──  [26]Identifier: h
│   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   └── Right:
│   │   │   │   │   └──  [26]Identifier: j
│   │   └──  [10]ReturnStatement (result)
│   │   │   └──  [26]Identifier: result
├── FunctionDeclaration: double complex_function_2 (double x1, double y1, double z1, double x2, double y2, double z2, double x3, double y3, double z3, double x4, double y4, double z4)
│   └──  [5]CompoundStatement
│   │   └──  [10]ReturnStatement (sqrt ( x1 - x2 * x1 - x2 + y1 - y2 * y1 - y2 + z1 - z2 * z1 - z2 ) + sqrt ( x2 - x3 * x2 - x3 + y2 - y3 * y2 - y3 + z2 - z3 * z2 - z3 ) + sqrt ( x3 - x4 * x3 - x4 + y3 - y4 * y3 - y4 + z3 - z4 * z3 - z4 ))
│   │   │   └──  [13]BinaryExpression: +
│   │   │   │   ├── Left:
│   │   │   │   │   └──  [13]BinaryExpression: +
│   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   └──  [17]CallExpression
│   │   │   │   │   │   │   │   ├── Callee:
│   │   │   │   │   │   │   │   │   └──  [26]Identifier: sqrt
│   │   │   │   │   │   │   │   └── Arguments:
│   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: +
│   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: +
│   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: *
│   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: -
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: x1
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: x2
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: -
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: x1
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: x2
│   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: *
│   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: -
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: y1
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: y2
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: -
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: y1
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: y2
│   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: *
│   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: -
│   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: z1
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: z2
│   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: -
│   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: z1
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: z2
│   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   └──  [17]CallExpression
│   │   │   │   │   │   │   │   ├── Callee:
│   │   │   │   │   │   │   │   │   └──  [26]Identifier: sqrt
│   │   │   │   │   │   │   │   └── Arguments:
│   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: +
│   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: +
│   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: *
│   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: -
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: x2
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: x3
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: -
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: x2
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: x3
│   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: *
│   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: -
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: y2
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: y3
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: -
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: y2
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: y3
│   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: *
│   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: -
│   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: z2
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: z3
│   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: -
│   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: z2
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: z3
│   │   │   │   └── Right:
│   │   │   │   │   └──  [17]CallExpression
│   │   │   │   │   │   ├── Callee:
│   │   │   │   │   │   │   └──  [26]Identifier: sqrt
│   │   │   │   │   │   └── Arguments:
│   │   │   │   │   │   │   └──  [13]BinaryExpression: +
│   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: +
│   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: *
│   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: -
│   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: x3
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: x4
│   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: -
│   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: x3
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: x4
│   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: *
│   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: -
│   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: y3
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: y4
│   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: -
│   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: y3
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: y4
│   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: *
│   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: -
│   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: z3
│   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: z4
│   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: -
│   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: z3
│   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: z4
├── VariableDeclaration: static int large_array_1[1000] = { 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 }
│   └──  [5]CompoundStatement
│   │   ├──  [22]IntegerLiteral: 1
│   │   ├──  [22]IntegerLiteral: 2
│   │   ├──  [22]IntegerLiteral: 3
│   │   ├──  [22]IntegerLiteral: 4
│   │   ├──  [22]IntegerLiteral: 5
│   │   ├──  [22]IntegerLiteral: 6
│   │   ├──  [22]IntegerLiteral: 7
│   │   ├──  [22]IntegerLiteral: 8
│   │   ├──  [22]IntegerLiteral: 9
│   │   ├──  [22]IntegerLiteral: 10
│   │   ├──  [22]IntegerLiteral: 11
│   │   ├──  [22]IntegerLiteral: 12
│   │   ├──  [22]IntegerLiteral: 13
│   │   ├──  [22]IntegerLiteral: 14
│   │   ├──  [22]IntegerLiteral: 15
│   │   ├──  [22]IntegerLiteral: 16
│   │   ├──  [22]IntegerLiteral: 17
│   │   ├──  [22]IntegerLiteral: 18
│   │   ├──  [22]IntegerLiteral: 19
│   │   ├──  [22]IntegerLiteral: 20
│   │   ├──  [22]IntegerLiteral: 21
│   │   ├──  [22]IntegerLiteral: 22
│   │   ├──  [22]IntegerLiteral: 23
│   │   ├──  [22]IntegerLiteral: 24
│   │   ├──  [22]IntegerLiteral: 25
│   │   ├──  [22]IntegerLiteral: 26
│   │   ├──  [22]IntegerLiteral: 27
│   │   ├──  [22]IntegerLiteral: 28
│   │   ├──  [22]IntegerLiteral: 29
│   │   ├──  [22]IntegerLiteral: 30
│   │   ├──  [22]IntegerLiteral: 31
│   │   ├──  [22]IntegerLiteral: 32
│   │   ├──  [22]IntegerLiteral: 33
│   │   ├──  [22]IntegerLiteral: 34
│   │   ├──  [22]IntegerLiteral: 35
│   │   ├──  [22]IntegerLiteral: 36
│   │   ├──  [22]IntegerLiteral: 37
│   │   ├──  [22]IntegerLiteral: 38
│   │   ├──  [22]IntegerLiteral: 39
│   │   ├──  [22]IntegerLiteral: 40
│   │   ├──  [22]IntegerLiteral: 41
│   │   ├──  [22]IntegerLiteral: 42
│   │   ├──  [22]IntegerLiteral: 43
│   │   ├──  [22]IntegerLiteral: 44
│   │   ├──  [22]IntegerLiteral: 45
│   │   ├──  [22]IntegerLiteral: 46
│   │   ├──  [22]IntegerLiteral: 47
│   │   ├──  [22]IntegerLiteral: 48
│   │   ├──  [22]IntegerLiteral: 49
│   │   ├──  [22]IntegerLiteral: 50
│   │   ├──  [22]IntegerLiteral: 51
│   │   ├──  [22]IntegerLiteral: 52
│   │   ├──  [22]IntegerLiteral: 53
│   │   ├──  [22]IntegerLiteral: 54
│   │   ├──  [22]IntegerLiteral: 55
│   │   ├──  [22]IntegerLiteral: 56
│   │   ├──  [22]IntegerLiteral: 57
│   │   ├──  [22]IntegerLiteral: 58
│   │   ├──  [22]IntegerLiteral: 59
│   │   ├──  [22]IntegerLiteral: 60
│   │   ├──  [22]IntegerLiteral: 61
│   │   ├──  [22]IntegerLiteral: 62
│   │   ├──  [22]IntegerLiteral: 63
│   │   ├──  [22]IntegerLiteral: 64
│   │   ├──  [22]IntegerLiteral: 65
│   │   ├──  [22]IntegerLiteral: 66
│   │   ├──  [22]IntegerLiteral: 67
│   │   ├──  [22]IntegerLiteral: 68
│   │   ├──  [22]IntegerLiteral: 69
│   │   ├──  [22]IntegerLiteral: 70
│   │   ├──  [22]IntegerLiteral: 71
│   │   ├──  [22]IntegerLiteral: 72
│   │   ├──  [22]IntegerLiteral: 73
│   │   ├──  [22]IntegerLiteral: 74
│   │   ├──  [22]IntegerLiteral: 75
│   │   ├──  [22]IntegerLiteral: 76
│   │   ├──  [22]IntegerLiteral: 77
│   │   ├──  [22]IntegerLiteral: 78
│   │   ├──  [22]IntegerLiteral: 79
│   │   ├──  [22]IntegerLiteral: 80
│   │   ├──  [22]IntegerLiteral: 82
│   │   ├──  [22]IntegerLiteral: 83
│   │   ├──  [22]IntegerLiteral: 84
│   │   ├──  [22]IntegerLiteral: 85
│   │   ├──  [22]IntegerLiteral: 86
│   │   ├──  [22]IntegerLiteral: 87
│   │   ├──  [22]IntegerLiteral: 88
│   │   ├──  [22]IntegerLiteral: 89
│   │   ├──  [22]IntegerLiteral: 90
│   │   ├──  [22]IntegerLiteral: 91
│   │   ├──  [22]IntegerLiteral: 92
│   │   ├──  [22]IntegerLiteral: 93
│   │   ├──  [22]IntegerLiteral: 94
│   │   ├──  [22]IntegerLiteral: 95
│   │   ├──  [22]IntegerLiteral: 96
│   │   ├──  [22]IntegerLiteral: 97
│   │   ├──  [22]IntegerLiteral: 98
│   │   ├──  [22]IntegerLiteral: 99
│   │   └──  [22]IntegerLiteral: 100
├── VariableDeclaration: static double large_array_2[500] = { 3.141590 2.718280 1.414210 1.732050 2.236070 1.618030 2.449490 2.645750 1.324720 3.316620 2.449490 1.732050 2.236070 3.141590 2.718280 1.414210 1.618030 2.645750 1.324720 3.316620 1.414210 3.141590 2.718280 1.732050 2.236070 1.618030 2.449490 2.645750 1.324720 3.316620 2.718280 1.414210 3.141590 1.732050 2.236070 1.618030 2.449490 2.645750 1.324720 3.316620 1.732050 2.236070 1.618030 3.141590 2.718280 1.414210 2.449490 2.645750 1.324720 3.316620 }
│   └──  [5]CompoundStatement
│   │   ├──  [23]FloatLiteral: 3.141590
│   │   ├──  [23]FloatLiteral: 2.718280
│   │   ├──  [23]FloatLiteral: 1.414210
│   │   ├──  [23]FloatLiteral: 1.732050
│   │   ├──  [23]FloatLiteral: 2.236070
│   │   ├──  [23]FloatLiteral: 1.618030
│   │   ├──  [23]FloatLiteral: 2.449490
│   │   ├──  [23]FloatLiteral: 2.645750
│   │   ├──  [23]FloatLiteral: 1.324720
│   │   ├──  [23]FloatLiteral: 3.316620
│   │   ├──  [23]FloatLiteral: 2.449490
│   │   ├──  [23]FloatLiteral: 1.732050
│   │   ├──  [23]FloatLiteral: 2.236070
│   │   ├──  [23]FloatLiteral: 3.141590
│   │   ├──  [23]FloatLiteral: 2.718280
│   │   ├──  [23]FloatLiteral: 1.414210
│   │   ├──  [23]FloatLiteral: 1.618030
│   │   ├──  [23]FloatLiteral: 2.645750
│   │   ├──  [23]FloatLiteral: 1.324720
│   │   ├──  [23]FloatLiteral: 3.316620
│   │   ├──  [23]FloatLiteral: 1.414210
│   │   ├──  [23]FloatLiteral: 3.141590
│   │   ├──  [23]FloatLiteral: 2.718280
│   │   ├──  [23]FloatLiteral: 1.732050
│   │   ├──  [23]FloatLiteral: 2.236070
│   │   ├──  [23]FloatLiteral: 1.618030
│   │   ├──  [23]FloatLiteral: 2.449490
│   │   ├──  [23]FloatLiteral: 2.645750
│   │   ├──  [23]FloatLiteral: 1.324720
│   │   ├──  [23]FloatLiteral: 3.316620
│   │   ├──  [23]FloatLiteral: 2.718280
│   │   ├──  [23]FloatLiteral: 1.414210
│   │   ├──  [23]FloatLiteral: 3.141590
│   │   ├──  [23]FloatLiteral: 1.732050
│   │   ├──  [23]FloatLiteral: 2.236070
│   │   ├──  [23]FloatLiteral: 1.618030
│   │   ├──  [23]FloatLiteral: 2.449490
│   │   ├──  [23]FloatLiteral: 2.645750
│   │   ├──  [23]FloatLiteral: 1.324720
│   │   ├──  [23]FloatLiteral: 3.316620
│   │   ├──  [23]FloatLiteral: 1.732050
│   │   ├──  [23]FloatLiteral: 2.236070
│   │   ├──  [23]FloatLiteral: 1.618030
│   │   ├──  [23]FloatLiteral: 3.141590
│   │   ├──  [23]FloatLiteral: 2.718280
│   │   ├──  [23]FloatLiteral: 1.414210
│   │   ├──  [23]FloatLiteral: 2.449490
│   │   ├──  [23]FloatLiteral: 2.645750
│   │   ├──  [23]FloatLiteral: 1.324720
│   │   └──  [23]FloatLiteral: 3.316620
├── VariableDeclaration: static const char long_strings[] = { "This is a very long string that contains a lot of text to test the lexer's ability to handle large string literals efficiently and correctly without any performance degradation or memory issues that might occur during the tokenization process of very long string constants in C source code files." "Another extremely long string with different content to ensure that the lexer can handle multiple long strings in the same source file without any problems or performance issues that might arise from processing large amounts of string data during the lexical analysis phase of compilation." "Yet another long string with even more content to thoroughly test the lexer's string handling capabilities and ensure that it can process large amounts of string data efficiently and correctly without any memory leaks or performance bottlenecks that might occur during tokenization." "A fourth long string to continue testing the lexer's ability to handle multiple long string literals in a single source file and ensure that the performance remains consistent even when processing large amounts of string data during the lexical analysis phase." "The fifth and final long string in this array to complete the testing of the lexer's string handling capabilities and ensure that it can efficiently process large amounts of string data without any issues or performance degradation during the tokenization process." }
│   └──  [5]CompoundStatement
│   │   ├──  [24]StringLiteral: "This is a very long string that contains a lot of text to test the lexer\'s ability to handle large string literals efficiently and correctly without any performance degradation or memory issues that might occur during the tokenization process of very long string constants in C source code files."
│   │   ├──  [24]StringLiteral: "Another extremely long string with different content to ensure that the lexer can handle multiple long strings in the same source file without any problems or performance issues that might arise from processing large amounts of string data during the lexical analysis phase of compilation."
│   │   ├──  [24]StringLiteral: "Yet another long string with even more content to thoroughly test the lexer\'s string handling capabilities and ensure that it can process large amounts of string data efficiently and correctly without any memory leaks or performance bottlenecks that might occur during tokenization."
│   │   ├──  [24]StringLiteral: "A fourth long string to continue testing the lexer\'s ability to handle multiple long string literals in a single source file and ensure that the performance remains consistent even when processing large amounts of string data during the lexical analysis phase."
│   │   └──  [24]StringLiteral: "The fifth and final long string in this array to complete the testing of the lexer\'s string handling capabilities and ensure that it can efficiently process large amounts of string data without any issues or performance degradation during the tokenization process."
├── VariableDeclaration: long time
├── VariableDeclaration: double sin
├── VariableDeclaration: double sqrt
├── VariableDeclaration: double pow
├── VariableDeclaration: double log
├── VariableDeclaration: double fabs
├── VariableDeclaration: size_t strlen
├── VariableDeclaration: int partition
├── FunctionDeclaration: void matrix_multiply (double[4][4] a, double[4][4] b, double[4][4] result)
│   └──  [5]CompoundStatement
│   │   └── ForStatement
│   │   │   ├── Init: int i = 0
│   │   │   ├── Condition: i < 4
│   │   │   ├── Update: i ++
│   │   │   └── Body:
 [5]CompoundStatement
│   │   │   │   │   └── ForStatement
│   │   │   │   │   │   ├── Init: int j = 0
│   │   │   │   │   │   ├── Condition: j < 4
│   │   │   │   │   │   ├── Update: j ++
│   │   │   │   │   │   └── Body:
 [5]CompoundStatement
│   │   │   │   │   │   │   │   ├──  [6]ExpressionStatement: result [ i ] [ j ] = 0.000000
│   │   │   │   │   │   │   │   │   └──  [15]AssignmentExpression: =
│   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: result
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: j
│   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   └──  [23]FloatLiteral: 0.000000
│   │   │   │   │   │   │   │   └── ForStatement
│   │   │   │   │   │   │   │   │   ├── Init: int k = 0
│   │   │   │   │   │   │   │   │   ├── Condition: k < 4
│   │   │   │   │   │   │   │   │   ├── Update: k ++
│   │   │   │   │   │   │   │   │   └── Body:
 [5]CompoundStatement
│   │   │   │   │   │   │   │   │   │   │   └──  [6]ExpressionStatement: result [ i ] [ j ] += a [ i ] [ k ] * b [ k ] [ j ]
│   │   │   │   │   │   │   │   │   │   │   │   └──  [15]AssignmentExpression: +=
│   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: result
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: j
│   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: *
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: a
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: k
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: b
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: k
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: j
├── FunctionDeclaration: void bubble_sort (int[] arr, int n)
│   └──  [5]CompoundStatement
│   │   └── ForStatement
│   │   │   ├── Init: int i = 0
│   │   │   ├── Condition: i < n - 1
│   │   │   ├── Update: i ++
│   │   │   └── Body:
 [5]CompoundStatement
│   │   │   │   │   └── ForStatement
│   │   │   │   │   │   ├── Init: int j = 0
│   │   │   │   │   │   ├── Condition: j < n - i - 1
│   │   │   │   │   │   ├── Update: j ++
│   │   │   │   │   │   └── Body:
 [5]CompoundStatement
│   │   │   │   │   │   │   │   └── IfStatement arr [ j ] > arr [ j + 1 ]
│   │   │   │   │   │   │   │   │   ├── Condition:
 [13]BinaryExpression: >
│   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: arr
│   │   │   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: j
│   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: arr
│   │   │   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: +
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: j
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [22]IntegerLiteral: 1
│   │   │   │   │   │   │   │   │   └── Then:
 [5]CompoundStatement
│   │   │   │   │   │   │   │   │   │   │   ├── VariableDeclaration: int temp = arr [ j ]
│   │   │   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: arr
│   │   │   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: j
│   │   │   │   │   │   │   │   │   │   │   ├──  [6]ExpressionStatement: arr [ j ] = arr [ j + 1 ]
│   │   │   │   │   │   │   │   │   │   │   │   └──  [15]AssignmentExpression: =
│   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: arr
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: j
│   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: arr
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: +
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: j
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [22]IntegerLiteral: 1
│   │   │   │   │   │   │   │   │   │   │   └──  [6]ExpressionStatement: arr [ j + 1 ] = temp
│   │   │   │   │   │   │   │   │   │   │   │   └──  [15]AssignmentExpression: =
│   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: arr
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: +
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: j
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [22]IntegerLiteral: 1
│   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: temp
├── FunctionDeclaration: void quick_sort (int[] arr, int low, int high)
│   └──  [5]CompoundStatement
│   │   └── IfStatement low < high
│   │   │   ├── Condition:
 [13]BinaryExpression: <
│   │   │   │   │   ├── Left:
│   │   │   │   │   │   └──  [26]Identifier: low
│   │   │   │   │   └── Right:
│   │   │   │   │   │   └──  [26]Identifier: high
│   │   │   └── Then:
 [5]CompoundStatement
│   │   │   │   │   ├── VariableDeclaration: int pi = partition ( arr , low , high )
│   │   │   │   │   │   └──  [17]CallExpression
│   │   │   │   │   │   │   ├── Callee:
│   │   │   │   │   │   │   │   └──  [26]Identifier: partition
│   │   │   │   │   │   │   └── Arguments:
│   │   │   │   │   │   │   │   └──  [26]Identifier: arr
│   │   │   │   │   │   │   │   └──  [26]Identifier: low
│   │   │   │   │   │   │   │   └──  [26]Identifier: high
│   │   │   │   │   ├──  [6]ExpressionStatement: quick_sort ( arr , low , pi - 1 )
│   │   │   │   │   │   └──  [17]CallExpression
│   │   │   │   │   │   │   ├── Callee:
│   │   │   │   │   │   │   │   └──  [26]Identifier: quick_sort
│   │   │   │   │   │   │   └── Arguments:
│   │   │   │   │   │   │   │   └──  [26]Identifier: arr
│   │   │   │   │   │   │   │   └──  [26]Identifier: low
│   │   │   │   │   │   │   │   └──  [13]BinaryExpression: -
│   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: pi
│   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   └──  [22]IntegerLiteral: 1
│   │   │   │   │   └──  [6]ExpressionStatement: quick_sort ( arr , pi + 1 , high )
│   │   │   │   │   │   └──  [17]CallExpression
│   │   │   │   │   │   │   ├── Callee:
│   │   │   │   │   │   │   │   └──  [26]Identifier: quick_sort
│   │   │   │   │   │   │   └── Arguments:
│   │   │   │   │   │   │   │   └──  [26]Identifier: arr
│   │   │   │   │   │   │   │   └──  [13]BinaryExpression: +
│   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: pi
│   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   └──  [22]IntegerLiteral: 1
│   │   │   │   │   │   │   │   └──  [26]Identifier: high
├── FunctionDeclaration: int partition (int[] arr, int low, int high)
│   └──  [5]CompoundStatement
│   │   ├── VariableDeclaration: int pivot = arr [ high ]
│   │   │   └──  [19]ArrayAccess
│   │   │   │   ├── Array:
│   │   │   │   │   └──  [26]Identifier: arr
│   │   │   │   └── Index:
│   │   │   │   │   └──  [26]Identifier: high
│   │   ├── VariableDeclaration: int i = low - 1
│   │   │   └──  [13]BinaryExpression: -
│   │   │   │   ├── Left:
│   │   │   │   │   └──  [26]Identifier: low
│   │   │   │   └── Right:
│   │   │   │   │   └──  [22]IntegerLiteral: 1
│   │   ├── ForStatement
│   │   │   ├── Init: int j = low
│   │   │   ├── Condition: j <= high - 1
│   │   │   ├── Update: j ++
│   │   │   └── Body:
 [5]CompoundStatement
│   │   │   │   │   └── IfStatement arr [ j ] < pivot
│   │   │   │   │   │   ├── Condition:
 [13]BinaryExpression: <
│   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: arr
│   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: j
│   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   └──  [26]Identifier: pivot
│   │   │   │   │   │   └── Then:
 [5]CompoundStatement
│   │   │   │   │   │   │   │   ├──  [6]ExpressionStatement: i ++
│   │   │   │   │   │   │   │   │   └──  [14]UnaryExpression: ++
│   │   │   │   │   │   │   │   │   │   └── Operand:
 [26]Identifier: i
│   │   │   │   │   │   │   │   ├── VariableDeclaration: int temp = arr [ i ]
│   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: arr
│   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   │   ├──  [6]ExpressionStatement: arr [ i ] = arr [ j ]
│   │   │   │   │   │   │   │   │   └──  [15]AssignmentExpression: =
│   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: arr
│   │   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: arr
│   │   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: j
│   │   │   │   │   │   │   │   └──  [6]ExpressionStatement: arr [ j ] = temp
│   │   │   │   │   │   │   │   │   └──  [15]AssignmentExpression: =
│   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: arr
│   │   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: j
│   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: temp
│   │   ├── VariableDeclaration: int temp = arr [ i + 1 ]
│   │   │   └──  [19]ArrayAccess
│   │   │   │   ├── Array:
│   │   │   │   │   └──  [26]Identifier: arr
│   │   │   │   └── Index:
│   │   │   │   │   └──  [13]BinaryExpression: +
│   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   └──  [22]IntegerLiteral: 1
│   │   ├──  [6]ExpressionStatement: arr [ i + 1 ] = arr [ high ]
│   │   │   └──  [15]AssignmentExpression: =
│   │   │   │   ├── Left:
│   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   └──  [26]Identifier: arr
│   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   └──  [13]BinaryExpression: +
│   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   └──  [22]IntegerLiteral: 1
│   │   │   │   └── Right:
│   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   └──  [26]Identifier: arr
│   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   └──  [26]Identifier: high
│   │   ├──  [6]ExpressionStatement: arr [ high ] = temp
│   │   │   └──  [15]AssignmentExpression: =
│   │   │   │   ├── Left:
│   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   └──  [26]Identifier: arr
│   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   └──  [26]Identifier: high
│   │   │   │   └── Right:
│   │   │   │   │   └──  [26]Identifier: temp
│   │   └──  [10]ReturnStatement (i + 1)
│   │   │   └──  [13]BinaryExpression: +
│   │   │   │   ├── Left:
│   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   └── Right:
│   │   │   │   │   └──  [22]IntegerLiteral: 1
├── FunctionDeclaration: int main (void param)
│   └──  [5]CompoundStatement
│   │   ├──  [6]ExpressionStatement: printf ( "Starting performance test..." )
│   │   │   └──  [17]CallExpression
│   │   │   │   ├── Callee:
│   │   │   │   │   └──  [26]Identifier: printf
│   │   │   │   └── Arguments:
│   │   │   │   │   └──  [24]StringLiteral: "Starting performance test...\n"
│   │   ├── VariableDeclaration: int sum = 0
│   │   │   └──  [22]IntegerLiteral: 0
│   │   ├── ForStatement
│   │   │   ├── Init: int i = 0
│   │   │   ├── Condition: i < 1000
│   │   │   ├── Update: i ++
│   │   │   └── Body:
 [5]CompoundStatement
│   │   │   │   │   └──  [6]ExpressionStatement: sum += large_array_1 [ i ]
│   │   │   │   │   │   └──  [15]AssignmentExpression: +=
│   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   └──  [26]Identifier: sum
│   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: large_array_1
│   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   ├──  [6]ExpressionStatement: printf ( "Sum of large_array_1: %d" , sum )
│   │   │   └──  [17]CallExpression
│   │   │   │   ├── Callee:
│   │   │   │   │   └──  [26]Identifier: printf
│   │   │   │   └── Arguments:
│   │   │   │   │   └──  [24]StringLiteral: "Sum of large_array_1: %d\n"
│   │   │   │   │   └──  [26]Identifier: sum
│   │   ├── VariableDeclaration: double double_sum = 0.000000
│   │   │   └──  [23]FloatLiteral: 0.000000
│   │   ├── ForStatement
│   │   │   ├── Init: int i = 0
│   │   │   ├── Condition: i < 500
│   │   │   ├── Update: i ++
│   │   │   └── Body:
 [5]CompoundStatement
│   │   │   │   │   └──  [6]ExpressionStatement: double_sum += large_array_2 [ i ]
│   │   │   │   │   │   └──  [15]AssignmentExpression: +=
│   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   └──  [26]Identifier: double_sum
│   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: large_array_2
│   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   ├──  [6]ExpressionStatement: printf ( "Sum of large_array_2: %f" , double_sum )
│   │   │   └──  [17]CallExpression
│   │   │   │   ├── Callee:
│   │   │   │   │   └──  [26]Identifier: printf
│   │   │   │   └── Arguments:
│   │   │   │   │   └──  [24]StringLiteral: "Sum of large_array_2: %f\n"
│   │   │   │   │   └──  [26]Identifier: double_sum
│   │   ├──  [5]CompoundStatement
│   │   ├── ForStatement
│   │   │   ├── Init: int i = 0
│   │   │   ├── Condition: i < 100
│   │   │   ├── Update: i ++
│   │   │   └── Body:
 [5]CompoundStatement
│   │   │   │   │   ├──  [6]ExpressionStatement: objects [ i ] . id = i
│   │   │   │   │   │   └──  [15]AssignmentExpression: =
│   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   └──  [18]MemberExpression: .id
│   │   │   │   │   │   │   │   │   └── Object:
│   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: objects
│   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   ├──  [6]ExpressionStatement: sprintf ( objects [ i ] . name , "Object_%d" , i )
│   │   │   │   │   │   └──  [17]CallExpression
│   │   │   │   │   │   │   ├── Callee:
│   │   │   │   │   │   │   │   └──  [26]Identifier: sprintf
│   │   │   │   │   │   │   └── Arguments:
│   │   │   │   │   │   │   │   └──  [18]MemberExpression: .name
│   │   │   │   │   │   │   │   │   └── Object:
│   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: objects
│   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   │   └──  [24]StringLiteral: "Object_%d"
│   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   ├──  [6]ExpressionStatement: objects [ i ] . position . x = i * 1.000000
│   │   │   │   │   │   └──  [15]AssignmentExpression: =
│   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   └──  [18]MemberExpression: .x
│   │   │   │   │   │   │   │   │   └── Object:
│   │   │   │   │   │   │   │   │   │   └──  [18]MemberExpression: .position
│   │   │   │   │   │   │   │   │   │   │   └── Object:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: objects
│   │   │   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   └──  [13]BinaryExpression: *
│   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   └──  [23]FloatLiteral: 1.000000
│   │   │   │   │   ├──  [6]ExpressionStatement: objects [ i ] . position . y = i * 2.000000
│   │   │   │   │   │   └──  [15]AssignmentExpression: =
│   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   └──  [18]MemberExpression: .y
│   │   │   │   │   │   │   │   │   └── Object:
│   │   │   │   │   │   │   │   │   │   └──  [18]MemberExpression: .position
│   │   │   │   │   │   │   │   │   │   │   └── Object:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: objects
│   │   │   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   └──  [13]BinaryExpression: *
│   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   └──  [23]FloatLiteral: 2.000000
│   │   │   │   │   ├──  [6]ExpressionStatement: objects [ i ] . position . z = i * 3.000000
│   │   │   │   │   │   └──  [15]AssignmentExpression: =
│   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   └──  [18]MemberExpression: .z
│   │   │   │   │   │   │   │   │   └── Object:
│   │   │   │   │   │   │   │   │   │   └──  [18]MemberExpression: .position
│   │   │   │   │   │   │   │   │   │   │   └── Object:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: objects
│   │   │   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   └──  [13]BinaryExpression: *
│   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   └──  [23]FloatLiteral: 3.000000
│   │   │   │   │   ├──  [6]ExpressionStatement: objects [ i ] . velocity . x = i * 0.100000
│   │   │   │   │   │   └──  [15]AssignmentExpression: =
│   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   └──  [18]MemberExpression: .x
│   │   │   │   │   │   │   │   │   └── Object:
│   │   │   │   │   │   │   │   │   │   └──  [18]MemberExpression: .velocity
│   │   │   │   │   │   │   │   │   │   │   └── Object:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: objects
│   │   │   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   └──  [13]BinaryExpression: *
│   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   └──  [23]FloatLiteral: 0.100000
│   │   │   │   │   ├──  [6]ExpressionStatement: objects [ i ] . velocity . y = i * 0.200000
│   │   │   │   │   │   └──  [15]AssignmentExpression: =
│   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   └──  [18]MemberExpression: .y
│   │   │   │   │   │   │   │   │   └── Object:
│   │   │   │   │   │   │   │   │   │   └──  [18]MemberExpression: .velocity
│   │   │   │   │   │   │   │   │   │   │   └── Object:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: objects
│   │   │   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   └──  [13]BinaryExpression: *
│   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   └──  [23]FloatLiteral: 0.200000
│   │   │   │   │   ├──  [6]ExpressionStatement: objects [ i ] . velocity . z = i * 0.300000
│   │   │   │   │   │   └──  [15]AssignmentExpression: =
│   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   └──  [18]MemberExpression: .z
│   │   │   │   │   │   │   │   │   └── Object:
│   │   │   │   │   │   │   │   │   │   └──  [18]MemberExpression: .velocity
│   │   │   │   │   │   │   │   │   │   │   └── Object:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: objects
│   │   │   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   └──  [13]BinaryExpression: *
│   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   └──  [23]FloatLiteral: 0.300000
│   │   │   │   │   ├──  [6]ExpressionStatement: objects [ i ] . active = i % 2 == 0
│   │   │   │   │   │   └──  [15]AssignmentExpression: =
│   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   └──  [18]MemberExpression: .active
│   │   │   │   │   │   │   │   │   └── Object:
│   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: objects
│   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   └──  [13]BinaryExpression: ==
│   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: %
│   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [22]IntegerLiteral: 2
│   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   └──  [22]IntegerLiteral: 0
│   │   │   │   │   ├──  [6]ExpressionStatement: objects [ i ] . timestamp = time ( NULL ) + i
│   │   │   │   │   │   └──  [15]AssignmentExpression: =
│   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   └──  [18]MemberExpression: .timestamp
│   │   │   │   │   │   │   │   │   └── Object:
│   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: objects
│   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   └──  [13]BinaryExpression: +
│   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   └──  [17]CallExpression
│   │   │   │   │   │   │   │   │   │   │   ├── Callee:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: time
│   │   │   │   │   │   │   │   │   │   │   └── Arguments:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: NULL
│   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   ├── ForStatement
│   │   │   │   │   │   ├── Init: int j = 0
│   │   │   │   │   │   ├── Condition: j < 100
│   │   │   │   │   │   ├── Update: j ++
│   │   │   │   │   │   └── Body:
 [5]CompoundStatement
│   │   │   │   │   │   │   │   └──  [6]ExpressionStatement: objects [ i ] . data [ j ] = sin ( i * j * 0.010000 )
│   │   │   │   │   │   │   │   │   └──  [15]AssignmentExpression: =
│   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   │   └──  [18]MemberExpression: .data
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Object:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: objects
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: j
│   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   └──  [17]CallExpression
│   │   │   │   │   │   │   │   │   │   │   │   ├── Callee:
│   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: sin
│   │   │   │   │   │   │   │   │   │   │   │   └── Arguments:
│   │   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: *
│   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: *
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: j
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [23]FloatLiteral: 0.010000
│   │   │   │   │   └── ForStatement
│   │   │   │   │   │   ├── Init: int row = 0
│   │   │   │   │   │   ├── Condition: row < 4
│   │   │   │   │   │   ├── Update: row ++
│   │   │   │   │   │   └── Body:
 [5]CompoundStatement
│   │   │   │   │   │   │   │   └── ForStatement
│   │   │   │   │   │   │   │   │   ├── Init: int col = 0
│   │   │   │   │   │   │   │   │   ├── Condition: col < 4
│   │   │   │   │   │   │   │   │   ├── Update: col ++
│   │   │   │   │   │   │   │   │   └── Body:
 [5]CompoundStatement
│   │   │   │   │   │   │   │   │   │   │   └──  [6]ExpressionStatement: objects [ i ] . transform . m [ row ] [ col ] = row == col ? 1.000000 : 0.000000
│   │   │   │   │   │   │   │   │   │   │   │   └──  [15]AssignmentExpression: =
│   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [18]MemberExpression: .m
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Object:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [18]MemberExpression: .transform
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Object:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: objects
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: row
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: col
│   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [16]TernaryExpression
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Condition:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: ==
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: row
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: col
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── TrueExpr:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [23]FloatLiteral: 1.000000
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └── FalseExpr:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [23]FloatLiteral: 0.000000
│   │   ├── VariableDeclaration: int result1 = complex_function_1 ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 )
│   │   │   └──  [17]CallExpression
│   │   │   │   ├── Callee:
│   │   │   │   │   └──  [26]Identifier: complex_function_1
│   │   │   │   └── Arguments:
│   │   │   │   │   └──  [22]IntegerLiteral: 1
│   │   │   │   │   └──  [22]IntegerLiteral: 2
│   │   │   │   │   └──  [22]IntegerLiteral: 3
│   │   │   │   │   └──  [22]IntegerLiteral: 4
│   │   │   │   │   └──  [22]IntegerLiteral: 5
│   │   │   │   │   └──  [22]IntegerLiteral: 6
│   │   │   │   │   └──  [22]IntegerLiteral: 7
│   │   │   │   │   └──  [22]IntegerLiteral: 8
│   │   │   │   │   └──  [22]IntegerLiteral: 9
│   │   │   │   │   └──  [22]IntegerLiteral: 10
│   │   ├──  [6]ExpressionStatement: printf ( "Complex function 1 result: %d" , result1 )
│   │   │   └──  [17]CallExpression
│   │   │   │   ├── Callee:
│   │   │   │   │   └──  [26]Identifier: printf
│   │   │   │   └── Arguments:
│   │   │   │   │   └──  [24]StringLiteral: "Complex function 1 result: %d\n"
│   │   │   │   │   └──  [26]Identifier: result1
│   │   ├── VariableDeclaration: double result2 = complex_function_2 ( 1.000000 , 2.000000 , 3.000000 , 4.000000 , 5.000000 , 6.000000 , 7.000000 , 8.000000 , 9.000000 , 10.000000 , 11.000000 , 12.000000 )
│   │   │   └──  [17]CallExpression
│   │   │   │   ├── Callee:
│   │   │   │   │   └──  [26]Identifier: complex_function_2
│   │   │   │   └── Arguments:
│   │   │   │   │   └──  [23]FloatLiteral: 1.000000
│   │   │   │   │   └──  [23]FloatLiteral: 2.000000
│   │   │   │   │   └──  [23]FloatLiteral: 3.000000
│   │   │   │   │   └──  [23]FloatLiteral: 4.000000
│   │   │   │   │   └──  [23]FloatLiteral: 5.000000
│   │   │   │   │   └──  [23]FloatLiteral: 6.000000
│   │   │   │   │   └──  [23]FloatLiteral: 7.000000
│   │   │   │   │   └──  [23]FloatLiteral: 8.000000
│   │   │   │   │   └──  [23]FloatLiteral: 9.000000
│   │   │   │   │   └──  [23]FloatLiteral: 10.000000
│   │   │   │   │   └──  [23]FloatLiteral: 11.000000
│   │   │   │   │   └──  [23]FloatLiteral: 12.000000
│   │   ├──  [6]ExpressionStatement: printf ( "Complex function 2 result: %f" , result2 )
│   │   │   └──  [17]CallExpression
│   │   │   │   ├── Callee:
│   │   │   │   │   └──  [26]Identifier: printf
│   │   │   │   └── Arguments:
│   │   │   │   │   └──  [24]StringLiteral: "Complex function 2 result: %f\n"
│   │   │   │   │   └──  [26]Identifier: result2
│   │   ├── VariableDeclaration: double matrix_a[4][4] = { { 1.000000 2.000000 3.000000 4.000000 } { 5.000000 6.000000 7.000000 8.000000 } { 9.000000 10.000000 11.000000 12.000000 } { 13.000000 14.000000 15.000000 16.000000 } }
│   │   │   └──  [5]CompoundStatement
│   │   │   │   ├──  [5]CompoundStatement
│   │   │   │   │   ├──  [23]FloatLiteral: 1.000000
│   │   │   │   │   ├──  [23]FloatLiteral: 2.000000
│   │   │   │   │   ├──  [23]FloatLiteral: 3.000000
│   │   │   │   │   └──  [23]FloatLiteral: 4.000000
│   │   │   │   ├──  [5]CompoundStatement
│   │   │   │   │   ├──  [23]FloatLiteral: 5.000000
│   │   │   │   │   ├──  [23]FloatLiteral: 6.000000
│   │   │   │   │   ├──  [23]FloatLiteral: 7.000000
│   │   │   │   │   └──  [23]FloatLiteral: 8.000000
│   │   │   │   ├──  [5]CompoundStatement
│   │   │   │   │   ├──  [23]FloatLiteral: 9.000000
│   │   │   │   │   ├──  [23]FloatLiteral: 10.000000
│   │   │   │   │   ├──  [23]FloatLiteral: 11.000000
│   │   │   │   │   └──  [23]FloatLiteral: 12.000000
│   │   │   │   └──  [5]CompoundStatement
│   │   │   │   │   ├──  [23]FloatLiteral: 13.000000
│   │   │   │   │   ├──  [23]FloatLiteral: 14.000000
│   │   │   │   │   ├──  [23]FloatLiteral: 15.000000
│   │   │   │   │   └──  [23]FloatLiteral: 16.000000
│   │   ├── VariableDeclaration: double matrix_b[4][4] = { { 16.000000 15.000000 14.000000 13.000000 } { 12.000000 11.000000 10.000000 9.000000 } { 8.000000 7.000000 6.000000 5.000000 } { 4.000000 3.000000 2.000000 1.000000 } }
│   │   │   └──  [5]CompoundStatement
│   │   │   │   ├──  [5]CompoundStatement
│   │   │   │   │   ├──  [23]FloatLiteral: 16.000000
│   │   │   │   │   ├──  [23]FloatLiteral: 15.000000
│   │   │   │   │   ├──  [23]FloatLiteral: 14.000000
│   │   │   │   │   └──  [23]FloatLiteral: 13.000000
│   │   │   │   ├──  [5]CompoundStatement
│   │   │   │   │   ├──  [23]FloatLiteral: 12.000000
│   │   │   │   │   ├──  [23]FloatLiteral: 11.000000
│   │   │   │   │   ├──  [23]FloatLiteral: 10.000000
│   │   │   │   │   └──  [23]FloatLiteral: 9.000000
│   │   │   │   ├──  [5]CompoundStatement
│   │   │   │   │   ├──  [23]FloatLiteral: 8.000000
│   │   │   │   │   ├──  [23]FloatLiteral: 7.000000
│   │   │   │   │   ├──  [23]FloatLiteral: 6.000000
│   │   │   │   │   └──  [23]FloatLiteral: 5.000000
│   │   │   │   └──  [5]CompoundStatement
│   │   │   │   │   ├──  [23]FloatLiteral: 4.000000
│   │   │   │   │   ├──  [23]FloatLiteral: 3.000000
│   │   │   │   │   ├──  [23]FloatLiteral: 2.000000
│   │   │   │   │   └──  [23]FloatLiteral: 1.000000
│   │   ├── VariableDeclaration: double matrix_result[4][4]
│   │   ├──  [6]ExpressionStatement: matrix_multiply ( matrix_a , matrix_b , matrix_result )
│   │   │   └──  [17]CallExpression
│   │   │   │   ├── Callee:
│   │   │   │   │   └──  [26]Identifier: matrix_multiply
│   │   │   │   └── Arguments:
│   │   │   │   │   └──  [26]Identifier: matrix_a
│   │   │   │   │   └──  [26]Identifier: matrix_b
│   │   │   │   │   └──  [26]Identifier: matrix_result
│   │   ├──  [6]ExpressionStatement: printf ( "Matrix multiplication result:" )
│   │   │   └──  [17]CallExpression
│   │   │   │   ├── Callee:
│   │   │   │   │   └──  [26]Identifier: printf
│   │   │   │   └── Arguments:
│   │   │   │   │   └──  [24]StringLiteral: "Matrix multiplication result:\n"
│   │   ├── ForStatement
│   │   │   ├── Init: int i = 0
│   │   │   ├── Condition: i < 4
│   │   │   ├── Update: i ++
│   │   │   └── Body:
 [5]CompoundStatement
│   │   │   │   │   ├── ForStatement
│   │   │   │   │   │   ├── Init: int j = 0
│   │   │   │   │   │   ├── Condition: j < 4
│   │   │   │   │   │   ├── Update: j ++
│   │   │   │   │   │   └── Body:
 [5]CompoundStatement
│   │   │   │   │   │   │   │   └──  [6]ExpressionStatement: printf ( "%8.2f " , matrix_result [ i ] [ j ] )
│   │   │   │   │   │   │   │   │   └──  [17]CallExpression
│   │   │   │   │   │   │   │   │   │   ├── Callee:
│   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: printf
│   │   │   │   │   │   │   │   │   │   └── Arguments:
│   │   │   │   │   │   │   │   │   │   │   └──  [24]StringLiteral: "%8.2f "
│   │   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: matrix_result
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: j
│   │   │   │   │   └──  [6]ExpressionStatement: printf ( "" )
│   │   │   │   │   │   └──  [17]CallExpression
│   │   │   │   │   │   │   ├── Callee:
│   │   │   │   │   │   │   │   └──  [26]Identifier: printf
│   │   │   │   │   │   │   └── Arguments:
│   │   │   │   │   │   │   │   └──  [24]StringLiteral: "\n"
│   │   ├── VariableDeclaration: int test_array[1000]
│   │   ├── ForStatement
│   │   │   ├── Init: int i = 0
│   │   │   ├── Condition: i < 1000
│   │   │   ├── Update: i ++
│   │   │   └── Body:
 [5]CompoundStatement
│   │   │   │   │   └──  [6]ExpressionStatement: test_array [ i ] = 1000 - i
│   │   │   │   │   │   └──  [15]AssignmentExpression: =
│   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: test_array
│   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   └──  [13]BinaryExpression: -
│   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   └──  [22]IntegerLiteral: 1000
│   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   ├──  [6]ExpressionStatement: bubble_sort ( test_array , 1000 )
│   │   │   └──  [17]CallExpression
│   │   │   │   ├── Callee:
│   │   │   │   │   └──  [26]Identifier: bubble_sort
│   │   │   │   └── Arguments:
│   │   │   │   │   └──  [26]Identifier: test_array
│   │   │   │   │   └──  [22]IntegerLiteral: 1000
│   │   ├──  [6]ExpressionStatement: printf ( "Array sorted successfully" )
│   │   │   └──  [17]CallExpression
│   │   │   │   ├── Callee:
│   │   │   │   │   └──  [26]Identifier: printf
│   │   │   │   └── Arguments:
│   │   │   │   │   └──  [24]StringLiteral: "Array sorted successfully\n"
│   │   ├── ForStatement
│   │   │   ├── Init: int i = 0
│   │   │   ├── Condition: i < 5
│   │   │   ├── Update: i ++
│   │   │   └── Body:
 [5]CompoundStatement
│   │   │   │   │   └──  [6]ExpressionStatement: printf ( "String %d length: %zu" , i , strlen ( long_strings [ i ] ) )
│   │   │   │   │   │   └──  [17]CallExpression
│   │   │   │   │   │   │   ├── Callee:
│   │   │   │   │   │   │   │   └──  [26]Identifier: printf
│   │   │   │   │   │   │   └── Arguments:
│   │   │   │   │   │   │   │   └──  [24]StringLiteral: "String %d length: %zu\n"
│   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   │   └──  [17]CallExpression
│   │   │   │   │   │   │   │   │   ├── Callee:
│   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: strlen
│   │   │   │   │   │   │   │   │   └── Arguments:
│   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: long_strings
│   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   ├──  [3]DeclarationList
│   │   │   ├── VariableDeclaration: int a = 10
│   │   │   │   └──  [22]IntegerLiteral: 10
│   │   │   ├── VariableDeclaration: int b = 20
│   │   │   │   └──  [22]IntegerLiteral: 20
│   │   │   └── VariableDeclaration: int c = 15
│   │   │   │   └──  [22]IntegerLiteral: 15
│   │   ├──  [6]ExpressionStatement: printf ( "MAX(%d, %d) = %d" , a , b , a > b ? a : b )
│   │   │   └──  [17]CallExpression
│   │   │   │   ├── Callee:
│   │   │   │   │   └──  [26]Identifier: printf
│   │   │   │   └── Arguments:
│   │   │   │   │   └──  [24]StringLiteral: "MAX(%d, %d) = %d\n"
│   │   │   │   │   └──  [26]Identifier: a
│   │   │   │   │   └──  [26]Identifier: b
│   │   │   │   │   └──  [16]TernaryExpression
│   │   │   │   │   │   ├── Condition:
│   │   │   │   │   │   │   └──  [13]BinaryExpression: >
│   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   └──  [26]Identifier: a
│   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   └──  [26]Identifier: b
│   │   │   │   │   │   ├── TrueExpr:
│   │   │   │   │   │   │   └──  [26]Identifier: a
│   │   │   │   │   │   └── FalseExpr:
│   │   │   │   │   │   │   └──  [26]Identifier: b
│   │   ├──  [6]ExpressionStatement: printf ( "MIN(%d, %d) = %d" , a , b , a < b ? a : b )
│   │   │   └──  [17]CallExpression
│   │   │   │   ├── Callee:
│   │   │   │   │   └──  [26]Identifier: printf
│   │   │   │   └── Arguments:
│   │   │   │   │   └──  [24]StringLiteral: "MIN(%d, %d) = %d\n"
│   │   │   │   │   └──  [26]Identifier: a
│   │   │   │   │   └──  [26]Identifier: b
│   │   │   │   │   └──  [16]TernaryExpression
│   │   │   │   │   │   ├── Condition:
│   │   │   │   │   │   │   └──  [13]BinaryExpression: <
│   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   └──  [26]Identifier: a
│   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   └──  [26]Identifier: b
│   │   │   │   │   │   ├── TrueExpr:
│   │   │   │   │   │   │   └──  [26]Identifier: a
│   │   │   │   │   │   └── FalseExpr:
│   │   │   │   │   │   │   └──  [26]Identifier: b
│   │   ├──  [6]ExpressionStatement: printf ( "CLAMP(%d, %d, %d) = %d" , c , a , b , c > a ? c : a < b ? c > a ? c : a : b )
│   │   │   └──  [17]CallExpression
│   │   │   │   ├── Callee:
│   │   │   │   │   └──  [26]Identifier: printf
│   │   │   │   └── Arguments:
│   │   │   │   │   └──  [24]StringLiteral: "CLAMP(%d, %d, %d) = %d\n"
│   │   │   │   │   └──  [26]Identifier: c
│   │   │   │   │   └──  [26]Identifier: a
│   │   │   │   │   └──  [26]Identifier: b
│   │   │   │   │   └──  [16]TernaryExpression
│   │   │   │   │   │   ├── Condition:
│   │   │   │   │   │   │   └──  [13]BinaryExpression: <
│   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   └──  [16]TernaryExpression
│   │   │   │   │   │   │   │   │   │   ├── Condition:
│   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: >
│   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: c
│   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: a
│   │   │   │   │   │   │   │   │   │   ├── TrueExpr:
│   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: c
│   │   │   │   │   │   │   │   │   │   └── FalseExpr:
│   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: a
│   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   └──  [26]Identifier: b
│   │   │   │   │   │   ├── TrueExpr:
│   │   │   │   │   │   │   └──  [16]TernaryExpression
│   │   │   │   │   │   │   │   ├── Condition:
│   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: >
│   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: c
│   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: a
│   │   │   │   │   │   │   │   ├── TrueExpr:
│   │   │   │   │   │   │   │   │   └──  [26]Identifier: c
│   │   │   │   │   │   │   │   └── FalseExpr:
│   │   │   │   │   │   │   │   │   └──  [26]Identifier: a
│   │   │   │   │   │   └── FalseExpr:
│   │   │   │   │   │   │   └──  [26]Identifier: b
│   │   ├── VariableDeclaration: double math_result = 0.000000
│   │   │   └──  [23]FloatLiteral: 0.000000
│   │   ├── ForStatement
│   │   │   ├── Init: int i = 1
│   │   │   ├── Condition: i <= 1000
│   │   │   ├── Update: i ++
│   │   │   └── Body:
 [5]CompoundStatement
│   │   │   │   │   ├──  [6]ExpressionStatement: math_result += sin ( i * 0.010000 ) * cos ( i * 0.020000 ) * tan ( i * 0.005000 )
│   │   │   │   │   │   └──  [15]AssignmentExpression: +=
│   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   └──  [26]Identifier: math_result
│   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   └──  [13]BinaryExpression: *
│   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: *
│   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [17]CallExpression
│   │   │   │   │   │   │   │   │   │   │   │   │   ├── Callee:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: sin
│   │   │   │   │   │   │   │   │   │   │   │   │   └── Arguments:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: *
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [23]FloatLiteral: 0.010000
│   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [17]CallExpression
│   │   │   │   │   │   │   │   │   │   │   │   │   ├── Callee:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: cos
│   │   │   │   │   │   │   │   │   │   │   │   │   └── Arguments:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: *
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [23]FloatLiteral: 0.020000
│   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   └──  [17]CallExpression
│   │   │   │   │   │   │   │   │   │   │   ├── Callee:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: tan
│   │   │   │   │   │   │   │   │   │   │   └── Arguments:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: *
│   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [23]FloatLiteral: 0.005000
│   │   │   │   │   ├──  [6]ExpressionStatement: math_result += sqrt ( i ) * log ( i ) * exp ( i * 0.001000 )
│   │   │   │   │   │   └──  [15]AssignmentExpression: +=
│   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   └──  [26]Identifier: math_result
│   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   └──  [13]BinaryExpression: *
│   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: *
│   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [17]CallExpression
│   │   │   │   │   │   │   │   │   │   │   │   │   ├── Callee:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: sqrt
│   │   │   │   │   │   │   │   │   │   │   │   │   └── Arguments:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [17]CallExpression
│   │   │   │   │   │   │   │   │   │   │   │   │   ├── Callee:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: log
│   │   │   │   │   │   │   │   │   │   │   │   │   └── Arguments:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   └──  [17]CallExpression
│   │   │   │   │   │   │   │   │   │   │   ├── Callee:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: exp
│   │   │   │   │   │   │   │   │   │   │   └── Arguments:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: *
│   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [23]FloatLiteral: 0.001000
│   │   │   │   │   └──  [6]ExpressionStatement: math_result += pow ( i , 0.500000 ) * fabs ( sin ( i ) )
│   │   │   │   │   │   └──  [15]AssignmentExpression: +=
│   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   └──  [26]Identifier: math_result
│   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   └──  [13]BinaryExpression: *
│   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   └──  [17]CallExpression
│   │   │   │   │   │   │   │   │   │   │   ├── Callee:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: pow
│   │   │   │   │   │   │   │   │   │   │   └── Arguments:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   │   │   │   │   │   └──  [23]FloatLiteral: 0.500000
│   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   └──  [17]CallExpression
│   │   │   │   │   │   │   │   │   │   │   ├── Callee:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: fabs
│   │   │   │   │   │   │   │   │   │   │   └── Arguments:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [17]CallExpression
│   │   │   │   │   │   │   │   │   │   │   │   │   ├── Callee:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: sin
│   │   │   │   │   │   │   │   │   │   │   │   │   └── Arguments:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   ├──  [6]ExpressionStatement: printf ( "Math result: %f" , math_result )
│   │   │   └──  [17]CallExpression
│   │   │   │   ├── Callee:
│   │   │   │   │   └──  [26]Identifier: printf
│   │   │   │   └── Arguments:
│   │   │   │   │   └──  [24]StringLiteral: "Math result: %f\n"
│   │   │   │   │   └──  [26]Identifier: math_result
│   │   ├──  [6]ExpressionStatement: uint64_t
│   │   │   └──  [26]Identifier: uint64_t
│   │   ├──  [6]ExpressionStatement: bit_result = 0
│   │   │   └──  [15]AssignmentExpression: =
│   │   │   │   ├── Left:
│   │   │   │   │   └──  [26]Identifier: bit_result
│   │   │   │   └── Right:
│   │   │   │   │   └──  [22]IntegerLiteral: 0
│   │   ├── ForStatement
│   │   │   ├── Init: int i = 0
│   │   │   ├── Condition: i < 64
│   │   │   ├── Update: i ++
│   │   │   └── Body:
 [5]CompoundStatement
│   │   │   │   │   ├──  [6]ExpressionStatement: bit_result |= 1 << i
│   │   │   │   │   │   └──  [15]AssignmentExpression: |=
│   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   └──  [26]Identifier: bit_result
│   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   └──  [13]BinaryExpression: <<
│   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   └──  [22]IntegerLiteral: 1
│   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   ├──  [6]ExpressionStatement: bit_result ^= 0 >> i
│   │   │   │   │   │   └──  [15]AssignmentExpression: ^=
│   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   └──  [26]Identifier: bit_result
│   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   └──  [13]BinaryExpression: >>
│   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   └──  [22]IntegerLiteral: 0
│   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   └──  [6]ExpressionStatement: bit_result &= 0 << i % 32
│   │   │   │   │   │   └──  [15]AssignmentExpression: &=
│   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   └──  [26]Identifier: bit_result
│   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   └──  [13]BinaryExpression: <<
│   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   └──  [22]IntegerLiteral: 0
│   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: %
│   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [22]IntegerLiteral: 32
│   │   ├──  [6]ExpressionStatement: printf ( "Bit operations result: %llu" , bit_result )
│   │   │   └──  [17]CallExpression
│   │   │   │   ├── Callee:
│   │   │   │   │   └──  [26]Identifier: printf
│   │   │   │   └── Arguments:
│   │   │   │   │   └──  [24]StringLiteral: "Bit operations result: %llu\n"
│   │   │   │   │   └──  [26]Identifier: bit_result
│   │   ├──  [6]ExpressionStatement: printf ( "Performance test completed successfully!" )
│   │   │   └──  [17]CallExpression
│   │   │   │   ├── Callee:
│   │   │   │   │   └──  [26]Identifier: printf
│   │   │   │   └── Arguments:
│   │   │   │   │   └──  [24]StringLiteral: "Performance test completed successfully!\n"
│   │   └──  [10]ReturnStatement (0)
│   │   │   └──  [22]IntegerLiteral: 0
├── FunctionDeclaration: void additional_function_1 (void param)
│   └──  [5]CompoundStatement
│   │   └── ForStatement
│   │   │   ├── Init: int i = 0
│   │   │   ├── Condition: i < 100
│   │   │   ├── Update: i ++
│   │   │   └── Body:
 [5]CompoundStatement
│   │   │   │   │   └──  [6]ExpressionStatement: printf ( "Additional function 1: %d" , i )
│   │   │   │   │   │   └──  [17]CallExpression
│   │   │   │   │   │   │   ├── Callee:
│   │   │   │   │   │   │   │   └──  [26]Identifier: printf
│   │   │   │   │   │   │   └── Arguments:
│   │   │   │   │   │   │   │   └──  [24]StringLiteral: "Additional function 1: %d\n"
│   │   │   │   │   │   │   │   └──  [26]Identifier: i
├── FunctionDeclaration: void additional_function_2 (void param)
│   └──  [5]CompoundStatement
│   │   ├── VariableDeclaration: double values[50]
│   │   └── ForStatement
│   │   │   ├── Init: int i = 0
│   │   │   ├── Condition: i < 50
│   │   │   ├── Update: i ++
│   │   │   └── Body:
 [5]CompoundStatement
│   │   │   │   │   └──  [6]ExpressionStatement: values [ i ] = sin ( i * 0.100000 ) + cos ( i * 0.200000 )
│   │   │   │   │   │   └──  [15]AssignmentExpression: =
│   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: values
│   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   └──  [13]BinaryExpression: +
│   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   └──  [17]CallExpression
│   │   │   │   │   │   │   │   │   │   │   ├── Callee:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: sin
│   │   │   │   │   │   │   │   │   │   │   └── Arguments:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: *
│   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [23]FloatLiteral: 0.100000
│   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   └──  [17]CallExpression
│   │   │   │   │   │   │   │   │   │   │   ├── Callee:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: cos
│   │   │   │   │   │   │   │   │   │   │   └── Arguments:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [13]BinaryExpression: *
│   │   │   │   │   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   │   │   │   │   └──  [23]FloatLiteral: 0.200000
├── FunctionDeclaration: void additional_function_3 (void param)
│   └──  [5]CompoundStatement
│   │   ├──  [5]CompoundStatement
│   │   └── ForStatement
│   │   │   ├── Init: int i = 0
│   │   │   ├── Condition: i < 25
│   │   │   ├── Update: i ++
│   │   │   └── Body:
 [5]CompoundStatement
│   │   │   │   │   ├──  [6]ExpressionStatement: points [ i ] . x = i * 1.500000
│   │   │   │   │   │   └──  [15]AssignmentExpression: =
│   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   └──  [18]MemberExpression: .x
│   │   │   │   │   │   │   │   │   └── Object:
│   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: points
│   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   └──  [13]BinaryExpression: *
│   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   └──  [23]FloatLiteral: 1.500000
│   │   │   │   │   ├──  [6]ExpressionStatement: points [ i ] . y = i * 2.500000
│   │   │   │   │   │   └──  [15]AssignmentExpression: =
│   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   └──  [18]MemberExpression: .y
│   │   │   │   │   │   │   │   │   └── Object:
│   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: points
│   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   └──  [13]BinaryExpression: *
│   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   └──  [23]FloatLiteral: 2.500000
│   │   │   │   │   └──  [6]ExpressionStatement: points [ i ] . z = i * 3.500000
│   │   │   │   │   │   └──  [15]AssignmentExpression: =
│   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   └──  [18]MemberExpression: .z
│   │   │   │   │   │   │   │   │   └── Object:
│   │   │   │   │   │   │   │   │   │   └──  [19]ArrayAccess
│   │   │   │   │   │   │   │   │   │   │   ├── Array:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: points
│   │   │   │   │   │   │   │   │   │   │   └── Index:
│   │   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   └──  [13]BinaryExpression: *
│   │   │   │   │   │   │   │   │   ├── Left:
│   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: i
│   │   │   │   │   │   │   │   │   └── Right:
│   │   │   │   │   │   │   │   │   │   └──  [23]FloatLiteral: 3.500000
└── FunctionDeclaration: void final_test_function (void param)
│   └──  [5]CompoundStatement
│   │   ├──  [5]CompoundStatement
│   │   ├──  [6]ExpressionStatement: nested . middle_struct . inner_a = 42
│   │   │   └──  [15]AssignmentExpression: =
│   │   │   │   ├── Left:
│   │   │   │   │   └──  [18]MemberExpression: .inner_a
│   │   │   │   │   │   └── Object:
│   │   │   │   │   │   │   └──  [18]MemberExpression: .middle_struct
│   │   │   │   │   │   │   │   └── Object:
│   │   │   │   │   │   │   │   │   └──  [26]Identifier: nested
│   │   │   │   └── Right:
│   │   │   │   │   └──  [22]IntegerLiteral: 42
│   │   ├──  [6]ExpressionStatement: nested . middle_struct . inner_b = 3.141590
│   │   │   └──  [15]AssignmentExpression: =
│   │   │   │   ├── Left:
│   │   │   │   │   └──  [18]MemberExpression: .inner_b
│   │   │   │   │   │   └── Object:
│   │   │   │   │   │   │   └──  [18]MemberExpression: .middle_struct
│   │   │   │   │   │   │   │   └── Object:
│   │   │   │   │   │   │   │   │   └──  [26]Identifier: nested
│   │   │   │   └── Right:
│   │   │   │   │   └──  [23]FloatLiteral: 3.141590
│   │   ├──  [6]ExpressionStatement: nested . middle_struct . deep_struct . deep_char = 'A'
│   │   │   └──  [15]AssignmentExpression: =
│   │   │   │   ├── Left:
│   │   │   │   │   └──  [18]MemberExpression: .deep_char
│   │   │   │   │   │   └── Object:
│   │   │   │   │   │   │   └──  [18]MemberExpression: .deep_struct
│   │   │   │   │   │   │   │   └── Object:
│   │   │   │   │   │   │   │   │   └──  [18]MemberExpression: .middle_struct
│   │   │   │   │   │   │   │   │   │   └── Object:
│   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: nested
│   │   │   │   └── Right:
│   │   │   │   │   └──  [25]CharLiteral: 'A'
│   │   ├──  [6]ExpressionStatement: nested . middle_struct . deep_struct . deep_float = 2.718280
│   │   │   └──  [15]AssignmentExpression: =
│   │   │   │   ├── Left:
│   │   │   │   │   └──  [18]MemberExpression: .deep_float
│   │   │   │   │   │   └── Object:
│   │   │   │   │   │   │   └──  [18]MemberExpression: .deep_struct
│   │   │   │   │   │   │   │   └── Object:
│   │   │   │   │   │   │   │   │   └──  [18]MemberExpression: .middle_struct
│   │   │   │   │   │   │   │   │   │   └── Object:
│   │   │   │   │   │   │   │   │   │   │   └──  [26]Identifier: nested
│   │   │   │   └── Right:
│   │   │   │   │   └──  [23]FloatLiteral: 2.718280
│   │   ├──  [6]ExpressionStatement: nested . test_union . union_int = 12345
│   │   │   └──  [15]AssignmentExpression: =
│   │   │   │   ├── Left:
│   │   │   │   │   └──  [18]MemberExpression: .union_int
│   │   │   │   │   │   └── Object:
│   │   │   │   │   │   │   └──  [18]MemberExpression: .test_union
│   │   │   │   │   │   │   │   └── Object:
│   │   │   │   │   │   │   │   │   └──  [26]Identifier: nested
│   │   │   │   └── Right:
│   │   │   │   │   └──  [22]IntegerLiteral: 12345
│   │   └──  [6]ExpressionStatement: printf ( "Nested structure test completed" )
│   │   │   └──  [17]CallExpression
│   │   │   │   ├── Callee:
│   │   │   │   │   └──  [26]Identifier: printf
│   │   │   │   └── Arguments:
│   │   │   │   │   └──  [24]StringLiteral: "Nested structure test completed\n"

